{"/home/travis/build/npmtest/node-npmtest-stylelint/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":2,"38":2,"39":1,"40":2,"41":2,"42":1,"43":2,"44":2,"45":1,"46":2,"47":2,"48":1,"49":1,"50":1,"51":1,"52":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":2,"11":2,"12":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":83},"end":{"line":105,"column":10}},"skip":true},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":77},"end":{"line":116,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":129,"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":40}},"skip":true},"9":{"name":"(anonymous_9)","line":137,"loc":{"start":{"line":137,"column":77},"end":{"line":140,"column":10}},"skip":true},"10":{"name":"(anonymous_10)","line":148,"loc":{"start":{"line":148,"column":83},"end":{"line":151,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":159,"loc":{"start":{"line":159,"column":79},"end":{"line":162,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":170,"loc":{"start":{"line":170,"column":75},"end":{"line":173,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":185,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":184,"column":5}},"24":{"start":{"line":92,"column":8},"end":{"line":94,"column":63}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"26":{"start":{"line":102,"column":8},"end":{"line":111,"column":10},"skip":true},"27":{"start":{"line":109,"column":12},"end":{"line":109,"column":55},"skip":true},"28":{"start":{"line":110,"column":12},"end":{"line":110,"column":48},"skip":true},"29":{"start":{"line":113,"column":8},"end":{"line":126,"column":10},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":76},"skip":true},"31":{"start":{"line":121,"column":12},"end":{"line":121,"column":73},"skip":true},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":74},"skip":true},"33":{"start":{"line":123,"column":12},"end":{"line":123,"column":79},"skip":true},"34":{"start":{"line":124,"column":12},"end":{"line":124,"column":25},"skip":true},"35":{"start":{"line":125,"column":12},"end":{"line":125,"column":45},"skip":true},"36":{"start":{"line":128,"column":8},"end":{"line":135,"column":14},"skip":true},"37":{"start":{"line":133,"column":16},"end":{"line":133,"column":29},"skip":true},"38":{"start":{"line":134,"column":16},"end":{"line":134,"column":55},"skip":true},"39":{"start":{"line":137,"column":8},"end":{"line":146,"column":10},"skip":true},"40":{"start":{"line":144,"column":12},"end":{"line":144,"column":25},"skip":true},"41":{"start":{"line":145,"column":12},"end":{"line":145,"column":45},"skip":true},"42":{"start":{"line":148,"column":8},"end":{"line":157,"column":10},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":25},"skip":true},"44":{"start":{"line":156,"column":12},"end":{"line":156,"column":48},"skip":true},"45":{"start":{"line":159,"column":8},"end":{"line":168,"column":10},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":25},"skip":true},"47":{"start":{"line":167,"column":12},"end":{"line":167,"column":46},"skip":true},"48":{"start":{"line":170,"column":8},"end":{"line":179,"column":10},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":94},"skip":true},"50":{"start":{"line":178,"column":12},"end":{"line":178,"column":48},"skip":true},"51":{"start":{"line":182,"column":8},"end":{"line":182,"column":35},"skip":true},"52":{"start":{"line":183,"column":8},"end":{"line":183,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":95,"column":14}},{"start":{"line":101,"column":4},"end":{"line":183,"column":14},"skip":true}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":18},"end":{"line":92,"column":32}},{"start":{"line":93,"column":12},"end":{"line":93,"column":53}},{"start":{"line":94,"column":12},"end":{"line":94,"column":61}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":45},"end":{"line":102,"column":79},"skip":true},{"start":{"line":102,"column":83},"end":{"line":111,"column":9},"skip":true}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":42},"end":{"line":113,"column":73},"skip":true},{"start":{"line":113,"column":77},"end":{"line":126,"column":9},"skip":true}]},"12":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":48},"end":{"line":128,"column":85},"skip":true},{"start":{"line":129,"column":12},"end":{"line":135,"column":13},"skip":true}]},"13":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":42},"end":{"line":137,"column":73},"skip":true},{"start":{"line":137,"column":77},"end":{"line":146,"column":9},"skip":true}]},"14":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":45},"end":{"line":148,"column":79},"skip":true},{"start":{"line":148,"column":83},"end":{"line":157,"column":9},"skip":true}]},"15":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":43},"end":{"line":159,"column":75},"skip":true},{"start":{"line":159,"column":79},"end":{"line":168,"column":9},"skip":true}]},"16":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":41},"end":{"line":170,"column":71},"skip":true},{"start":{"line":170,"column":75},"end":{"line":179,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_stylelint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"92":1,"95":1,"102":1,"109":1,"110":1,"113":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"128":1,"133":2,"134":2,"137":1,"144":2,"145":2,"148":1,"155":2,"156":2,"159":1,"166":2,"167":2,"170":1,"177":1,"178":1,"182":1,"183":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/lib.npmtest_stylelint.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/lib.npmtest_stylelint.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":54}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":60}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_stylelint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_stylelint = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_stylelint = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":0,"42":2,"43":2,"44":2,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,2],"16":[2,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":325,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":324,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":53},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":294,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":302,"column":8},"end":{"line":302,"column":82},"skip":true},"70":{"start":{"line":305,"column":8},"end":{"line":307,"column":9},"skip":true},"71":{"start":{"line":306,"column":12},"end":{"line":306,"column":82},"skip":true},"72":{"start":{"line":309,"column":8},"end":{"line":311,"column":9},"skip":true},"73":{"start":{"line":310,"column":12},"end":{"line":310,"column":18},"skip":true},"74":{"start":{"line":312,"column":8},"end":{"line":312,"column":54},"skip":true},"75":{"start":{"line":313,"column":8},"end":{"line":313,"column":69},"skip":true},"76":{"start":{"line":314,"column":8},"end":{"line":322,"column":36},"skip":true},"77":{"start":{"line":315,"column":12},"end":{"line":315,"column":61},"skip":true},"78":{"start":{"line":316,"column":12},"end":{"line":319,"column":13},"skip":true},"79":{"start":{"line":317,"column":16},"end":{"line":317,"column":75},"skip":true},"80":{"start":{"line":318,"column":16},"end":{"line":318,"column":23},"skip":true},"81":{"start":{"line":320,"column":12},"end":{"line":320,"column":38},"skip":true},"82":{"start":{"line":321,"column":12},"end":{"line":321,"column":27},"skip":true},"83":{"start":{"line":323,"column":8},"end":{"line":323,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":53}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":323,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":67},"skip":true},{"start":{"line":296,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":43},"end":{"line":302,"column":75},"skip":true},{"start":{"line":302,"column":79},"end":{"line":302,"column":81},"skip":true}]},"25":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true},{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true}]},"26":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true},{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true}]},"27":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":27},"end":{"line":312,"column":43},"skip":true},{"start":{"line":312,"column":47},"end":{"line":312,"column":53},"skip":true}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true},{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-stylelint && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_stylelint */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_stylelint","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught.stack);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_stylelint.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        local.assetsDict['/assets.npmtest_stylelint.rollup.js'] =","            local.assetsDict['/assets.npmtest_stylelint.rollup.js'] ||","            local.fs.readFileSync(","                // buildCustomOrg-hack","                local.npmtest_stylelint.__dirname +","                    '/lib.npmtest_stylelint.js',","                'utf8'","            ).replace((/^#!/), '//');","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":2,"127":2,"128":2,"129":2,"130":1,"133":2,"134":2,"139":2,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"294":1,"302":1,"305":1,"306":1,"309":1,"310":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"320":1,"321":1,"323":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":64}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":52}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":48}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":32}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":42}},"12":{"start":{"line":15,"column":0},"end":{"line":15,"column":25}},"13":{"start":{"line":17,"column":0},"end":{"line":22,"column":1}},"14":{"start":{"line":24,"column":0},"end":{"line":24,"column":21}},"15":{"start":{"line":25,"column":0},"end":{"line":25,"column":17}},"16":{"start":{"line":26,"column":0},"end":{"line":26,"column":27}},"17":{"start":{"line":27,"column":0},"end":{"line":27,"column":31}},"18":{"start":{"line":28,"column":0},"end":{"line":28,"column":39}},"19":{"start":{"line":29,"column":0},"end":{"line":29,"column":34}},"20":{"start":{"line":31,"column":0},"end":{"line":31,"column":20}}},"branchMap":{},"code":["\"use strict\"","","const report = require(\"./utils/report\")","const ruleMessages = require(\"./utils/ruleMessages\")","const validateOptions = require(\"./utils/validateOptions\")","const checkAgainstRule = require(\"./utils/checkAgainstRule\")","const createPlugin = require(\"./createPlugin\")","const createRuleTester = require(\"./testUtils/createRuleTester\")","const createStylelint = require(\"./createStylelint\")","const postcssPlugin = require(\"./postcssPlugin\")","const rules = require(\"./rules\")","const formatters = require(\"./formatters\")","const standalone = require(\"./standalone\")","","const api = postcssPlugin","","api.utils = {","  report,","  ruleMessages,","  validateOptions,","  checkAgainstRule,","}","","api.lint = standalone","api.rules = rules","api.formatters = formatters","api.createPlugin = createPlugin","api.createRuleTester = createRuleTester","api.createLinter = createStylelint","","module.exports = api",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"15":1,"17":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"31":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/report.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/report.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":17},"end":{"line":26,"column":5}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"2":{"start":{"line":18,"column":0},"end":{"line":81,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":27,"column":37}},"4":{"start":{"line":28,"column":2},"end":{"line":28,"column":33}},"5":{"start":{"line":29,"column":2},"end":{"line":29,"column":35}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":29}},"7":{"start":{"line":31,"column":2},"end":{"line":31,"column":29}},"8":{"start":{"line":32,"column":2},"end":{"line":32,"column":31}},"9":{"start":{"line":33,"column":2},"end":{"line":33,"column":29}},"10":{"start":{"line":35,"column":2},"end":{"line":35,"column":43}},"11":{"start":{"line":38,"column":2},"end":{"line":40,"column":3}},"12":{"start":{"line":39,"column":4},"end":{"line":39,"column":10}},"13":{"start":{"line":44,"column":2},"end":{"line":44,"column":59}},"14":{"start":{"line":46,"column":2},"end":{"line":57,"column":3}},"15":{"start":{"line":47,"column":4},"end":{"line":47,"column":99}},"16":{"start":{"line":48,"column":4},"end":{"line":56,"column":5}},"17":{"start":{"line":49,"column":6},"end":{"line":55,"column":7}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":14}},"19":{"start":{"line":59,"column":2},"end":{"line":59,"column":84}},"20":{"start":{"line":61,"column":2},"end":{"line":63,"column":3}},"21":{"start":{"line":62,"column":4},"end":{"line":62,"column":42}},"22":{"start":{"line":65,"column":2},"end":{"line":68,"column":3}},"23":{"start":{"line":69,"column":2},"end":{"line":71,"column":3}},"24":{"start":{"line":70,"column":4},"end":{"line":70,"column":33}},"25":{"start":{"line":72,"column":2},"end":{"line":74,"column":3}},"26":{"start":{"line":73,"column":4},"end":{"line":73,"column":35}},"27":{"start":{"line":75,"column":2},"end":{"line":77,"column":3}},"28":{"start":{"line":76,"column":4},"end":{"line":76,"column":33}},"29":{"start":{"line":79,"column":2},"end":{"line":79,"column":89}},"30":{"start":{"line":80,"column":2},"end":{"line":80,"column":48}}},"branchMap":{"1":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":21},"end":{"line":35,"column":37}},{"start":{"line":35,"column":41},"end":{"line":35,"column":43}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]},"3":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":28}},{"start":{"line":38,"column":32},"end":{"line":38,"column":85}}]},"4":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":20},"end":{"line":44,"column":24}},{"start":{"line":44,"column":28},"end":{"line":44,"column":59}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":46,"column":2}},{"start":{"line":46,"column":2},"end":{"line":46,"column":2}}]},"6":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":37}},{"start":{"line":46,"column":41},"end":{"line":46,"column":73}}]},"7":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":19},"end":{"line":47,"column":60}},{"start":{"line":47,"column":64},"end":{"line":47,"column":99}}]},"8":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"9":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":30}},{"start":{"line":53,"column":35},"end":{"line":53,"column":57}},{"start":{"line":53,"column":61},"end":{"line":53,"column":84}},{"start":{"line":53,"column":90},"end":{"line":53,"column":102}},{"start":{"line":53,"column":106},"end":{"line":53,"column":142}}]},"10":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"11":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":38}},{"start":{"line":61,"column":42},"end":{"line":61,"column":62}}]},"12":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"13":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":2},"end":{"line":72,"column":2}},{"start":{"line":72,"column":2},"end":{"line":72,"column":2}}]},"14":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":2},"end":{"line":75,"column":2}},{"start":{"line":75,"column":2},"end":{"line":75,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const _ = require(\"lodash\")","","/**"," * Report a violation."," *"," * This function accounts for `disabledRanges` attached to the result."," * That is, if the reported violation is within a disabledRange,"," * it is ignored. Otherwise, it is attached to the result as a"," * postcss warning."," *"," * It also accounts for the rule's severity."," *"," * You *must* pass *either* a node or a line number."," */","module.exports = function (violation/*: {","  ruleName: string,","  result: Object,","  message: string,","  node: Object,","  index?: number,","  word?: string,","  line?: number","}*/) {","  const ruleName = violation.ruleName","  const result = violation.result","  const message = violation.message","  const line = violation.line","  const node = violation.node","  const index = violation.index","  const word = violation.word","","  result.stylelint = result.stylelint || {}","","  // In quiet mode, mere warnings are ignored","  if (result.stylelint.quiet && result.stylelint.ruleSeverities[ruleName] !== \"error\") {","    return","  }","","  // If a line is not passed, use the node.positionBy method to get the","  // line number that the complaint pertains to","  const startLine = line || node.positionBy({ index }).line","","  if (result.stylelint.disabledRanges && !result.stylelint.ignoreDisables) {","    const ranges = result.stylelint.disabledRanges[ruleName] || result.stylelint.disabledRanges.all","    for (const range of ranges) {","      if (","      // If the violation is within a disabledRange,","      // and that disabledRange's rules include this one,","      // do not register a warning","      range.start <= startLine && (range.end >= startLine || range.end === undefined) && (!range.rules || range.rules.indexOf(ruleName) !== -1)) {","        return","      }","    }","  }","","  const severity = _.get(result.stylelint, [ \"ruleSeverities\", ruleName ], \"ignore\")","","  if (!result.stylelint.stylelintError && severity === \"error\") {","    result.stylelint.stylelintError = true","  }","","  const warningProperties/*: Object*/ = {","    severity,","    rule: ruleName,","  }","  if (node) {","    warningProperties.node = node","  }","  if (index) {","    warningProperties.index = index","  }","  if (word) {","    warningProperties.word = word","  }","","  const warningMessage = _.get(result.stylelint, [ \"customMessages\", ruleName ], message)","  result.warn(warningMessage, warningProperties)","}",""],"l":{"4":1,"18":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"35":0,"38":0,"39":0,"44":0,"46":0,"47":0,"48":0,"49":0,"54":0,"59":0,"61":0,"62":0,"65":0,"69":0,"70":0,"72":0,"73":0,"75":0,"76":0,"79":0,"80":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/ruleMessages.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/ruleMessages.js","s":{"1":1,"2":175,"3":316,"4":316,"5":87,"6":229,"7":0,"8":316},"b":{"1":[87,229]},"f":{"1":175,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":17},"end":{"line":17,"column":14}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":31},"end":{"line":23,"column":43}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":18,"column":2},"end":{"line":28,"column":8}},"3":{"start":{"line":19,"column":4},"end":{"line":19,"column":43}},"4":{"start":{"line":20,"column":4},"end":{"line":26,"column":5}},"5":{"start":{"line":21,"column":6},"end":{"line":21,"column":61}},"6":{"start":{"line":23,"column":6},"end":{"line":25,"column":7}},"7":{"start":{"line":24,"column":8},"end":{"line":24,"column":68}},"8":{"start":{"line":27,"column":4},"end":{"line":27,"column":22}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Given an object of violation messages, return another"," * that provides the same messages postfixed with the rule"," * that has been violated."," *"," * @param {string} ruleName"," * @param {object} messages - Object whose keys are message identifiers"," *   and values are either message strings or functions that return message strings"," * @return {object} New message object, whose messages will be marked with the rule name"," */","module.exports = function (","  ruleName/*: string*/,","  messages/*: Object*/",")/*: Object*/ {","  return Object.keys(messages).reduce((newMessages, messageId) => {","    const messageText = messages[messageId]","    if (typeof messageText === \"string\") {","      newMessages[messageId] = `${messageText} (${ruleName})`","    } else {","      newMessages[messageId] = function () {","        return `${messageText.apply(null, arguments)} (${ruleName})`","      }","    }","    return newMessages","  }, {})","}",""],"l":{"14":1,"18":175,"19":316,"20":316,"21":87,"23":229,"24":0,"27":316}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/validateOptions.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/validateOptions.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":28,"loc":{"start":{"line":28,"column":17},"end":{"line":31,"column":15}}},"2":{"name":"complain","line":40,"loc":{"start":{"line":40,"column":2},"end":{"line":40,"column":29}}},"3":{"name":"validate","line":51,"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":44}}},"4":{"name":"isValid","line":121,"loc":{"start":{"line":121,"column":0},"end":{"line":121,"column":35}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":48}},"3":{"start":{"line":28,"column":0},"end":{"line":49,"column":1}},"4":{"start":{"line":32,"column":2},"end":{"line":32,"column":21}},"5":{"start":{"line":34,"column":2},"end":{"line":34,"column":59}},"6":{"start":{"line":36,"column":2},"end":{"line":38,"column":4}},"7":{"start":{"line":37,"column":4},"end":{"line":37,"column":51}},"8":{"start":{"line":40,"column":2},"end":{"line":46,"column":3}},"9":{"start":{"line":41,"column":4},"end":{"line":41,"column":20}},"10":{"start":{"line":42,"column":4},"end":{"line":44,"column":6}},"11":{"start":{"line":45,"column":4},"end":{"line":45,"column":51}},"12":{"start":{"line":48,"column":2},"end":{"line":48,"column":17}},"13":{"start":{"line":51,"column":0},"end":{"line":119,"column":1}},"14":{"start":{"line":52,"column":2},"end":{"line":52,"column":32}},"15":{"start":{"line":53,"column":2},"end":{"line":53,"column":28}},"16":{"start":{"line":54,"column":2},"end":{"line":54,"column":32}},"17":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"18":{"start":{"line":57,"column":4},"end":{"line":57,"column":10}},"19":{"start":{"line":60,"column":2},"end":{"line":60,"column":100}},"20":{"start":{"line":62,"column":2},"end":{"line":64,"column":3}},"21":{"start":{"line":63,"column":4},"end":{"line":63,"column":10}},"22":{"start":{"line":66,"column":2},"end":{"line":75,"column":3}},"23":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"24":{"start":{"line":68,"column":6},"end":{"line":68,"column":12}},"25":{"start":{"line":70,"column":4},"end":{"line":70,"column":60}},"26":{"start":{"line":71,"column":4},"end":{"line":71,"column":10}},"27":{"start":{"line":72,"column":9},"end":{"line":75,"column":3}},"28":{"start":{"line":73,"column":4},"end":{"line":73,"column":74}},"29":{"start":{"line":74,"column":4},"end":{"line":74,"column":10}},"30":{"start":{"line":78,"column":2},"end":{"line":83,"column":3}},"31":{"start":{"line":79,"column":4},"end":{"line":81,"column":5}},"32":{"start":{"line":80,"column":6},"end":{"line":80,"column":81}},"33":{"start":{"line":82,"column":4},"end":{"line":82,"column":10}},"34":{"start":{"line":86,"column":2},"end":{"line":94,"column":3}},"35":{"start":{"line":87,"column":4},"end":{"line":92,"column":6}},"36":{"start":{"line":88,"column":6},"end":{"line":90,"column":7}},"37":{"start":{"line":89,"column":8},"end":{"line":89,"column":14}},"38":{"start":{"line":91,"column":6},"end":{"line":91,"column":68}},"39":{"start":{"line":93,"column":4},"end":{"line":93,"column":10}},"40":{"start":{"line":97,"column":2},"end":{"line":100,"column":3}},"41":{"start":{"line":98,"column":4},"end":{"line":98,"column":111}},"42":{"start":{"line":99,"column":4},"end":{"line":99,"column":10}},"43":{"start":{"line":102,"column":2},"end":{"line":118,"column":4}},"44":{"start":{"line":103,"column":4},"end":{"line":105,"column":5}},"45":{"start":{"line":104,"column":6},"end":{"line":104,"column":12}},"46":{"start":{"line":107,"column":4},"end":{"line":110,"column":5}},"47":{"start":{"line":108,"column":6},"end":{"line":108,"column":76}},"48":{"start":{"line":109,"column":6},"end":{"line":109,"column":12}},"49":{"start":{"line":112,"column":4},"end":{"line":112,"column":49}},"50":{"start":{"line":112,"column":49},"end":{"line":117,"column":6}},"51":{"start":{"line":113,"column":6},"end":{"line":115,"column":7}},"52":{"start":{"line":114,"column":8},"end":{"line":114,"column":14}},"53":{"start":{"line":116,"column":6},"end":{"line":116,"column":87}},"54":{"start":{"line":121,"column":0},"end":{"line":132,"column":1}},"55":{"start":{"line":122,"column":2},"end":{"line":122,"column":42}},"56":{"start":{"line":123,"column":2},"end":{"line":131,"column":3}},"57":{"start":{"line":124,"column":4},"end":{"line":124,"column":39}},"58":{"start":{"line":125,"column":4},"end":{"line":127,"column":5}},"59":{"start":{"line":126,"column":6},"end":{"line":126,"column":17}},"60":{"start":{"line":128,"column":4},"end":{"line":130,"column":5}},"61":{"start":{"line":129,"column":6},"end":{"line":129,"column":17}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"2":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":6},"end":{"line":56,"column":21}},{"start":{"line":56,"column":25},"end":{"line":56,"column":50}}]},"3":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":26},"end":{"line":60,"column":48}},{"start":{"line":60,"column":52},"end":{"line":60,"column":75}},{"start":{"line":60,"column":79},"end":{"line":60,"column":100}}]},"4":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":2},"end":{"line":62,"column":2}},{"start":{"line":62,"column":2},"end":{"line":62,"column":2}}]},"5":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":21}},{"start":{"line":62,"column":25},"end":{"line":62,"column":40}}]},"6":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"7":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"8":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":23}},{"start":{"line":67,"column":27},"end":{"line":67,"column":35}}]},"9":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":9},"end":{"line":72,"column":9}},{"start":{"line":72,"column":9},"end":{"line":72,"column":9}}]},"10":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":2},"end":{"line":78,"column":2}},{"start":{"line":78,"column":2},"end":{"line":78,"column":2}}]},"11":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"12":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":2},"end":{"line":86,"column":2}},{"start":{"line":86,"column":2},"end":{"line":86,"column":2}}]},"13":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":6},"end":{"line":88,"column":6}},{"start":{"line":88,"column":6},"end":{"line":88,"column":6}}]},"14":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":2},"end":{"line":97,"column":2}},{"start":{"line":97,"column":2},"end":{"line":97,"column":2}}]},"15":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":4},"end":{"line":103,"column":4}},{"start":{"line":103,"column":4},"end":{"line":103,"column":4}}]},"16":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"17":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":113,"column":6}},{"start":{"line":113,"column":6},"end":{"line":113,"column":6}}]},"18":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":4},"end":{"line":125,"column":4}},{"start":{"line":125,"column":4},"end":{"line":125,"column":4}}]},"19":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":41}},{"start":{"line":125,"column":45},"end":{"line":125,"column":64}}]},"20":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]}},"code":["/* @flow */","\"use strict\"","","const _ = require(\"lodash\")","","const ignoredOptions = [ \"severity\", \"message\" ]","","/**"," * Validate a rule's options."," *"," * See existing rules for examples."," *"," * @param {Result} result - postcss result"," * @param {string} ruleName"," * @param {...object} ...optionDescriptions - Each optionDescription can"," *   have the following properties:"," *   \t- `actual` (required): the actual passed option value or object."," *   \t- `possible` (required): a schema representation of what values are"," *      valid for those options. `possible` should be an object if the"," *      options are an object, with corresponding keys; if the options are not an"," *      object, `possible` isn't, either. All `possible` value representations"," *      should be **arrays of either values or functions**. Values are === checked"," *      against `actual`. Functions are fed `actual` as an argument and their"," *      return value is interpreted: truthy = valid, falsy = invalid."," *    - `optional` (optional): If this is `true`, `actual` can be undefined."," * @return {boolean} Whether or not the options are valid (true = valid)"," */","module.exports = function (","  result/*: Object*/,","  ruleName/*: string*/",")/*: boolean*/ {","  let noErrors = true","","  const optionDescriptions = Array.from(arguments).slice(2)","","  optionDescriptions.forEach(optionDescription => {","    validate(optionDescription, ruleName, complain)","  })","","  function complain(message) {","    noErrors = false","    result.warn(message, {","      stylelintType: \"invalidOption\",","    })","    _.set(result, \"stylelint.stylelintError\", true)","  }","","  return noErrors","}","","function validate(opts, ruleName, complain) {","  const possible = opts.possible","  const actual = opts.actual","  const optional = opts.optional","","  if (actual === null || _.isEqual(actual, [null])) {","    return","  }","","  const nothingPossible = possible === undefined || Array.isArray(possible) && possible.length === 0","","  if (nothingPossible && actual === true) {","    return","  }","","  if (actual === undefined) {","    if (nothingPossible || optional) {","      return","    }","    complain(`Expected option value for rule \"${ruleName}\"`)","    return","  } else if (nothingPossible) {","    complain(`Unexpected option value \"${actual}\" for rule \"${ruleName}\"`)","    return","  }","","  // If `possible` is a function ...","  if (_.isFunction(possible)) {","    if (!possible(actual)) {","      complain(`Invalid option \"${JSON.stringify(actual)}\" for rule ${ruleName}`)","    }","    return","  }","","  // If `possible` is an array instead of an object ...","  if (!_.isPlainObject(possible)) {","    [].concat(actual).forEach(a => {","      if (isValid(possible, a)) {","        return","      }","      complain(`Invalid option value \"${a}\" for rule \"${ruleName}\"`)","    })","    return","  }","","  // If possible is an object ...","  if (!_.isPlainObject(actual)) {","    complain(`Invalid option value ${JSON.stringify(actual)} for rule \"${ruleName}\": ` + \"should be an object\")","    return","  }","","  Object.keys(actual).forEach(optionName => {","    if (ignoredOptions.indexOf(optionName) !== -1) {","      return","    }","","    if (!possible[optionName]) {","      complain(`Invalid option name \"${optionName}\" for rule \"${ruleName}\"`)","      return","    }","","    const actualOptionValue = actual[optionName];[].concat(actualOptionValue).forEach(a => {","      if (isValid(possible[optionName], a)) {","        return","      }","      complain(`Invalid value \"${a}\" for option \"${optionName}\" of rule \"${ruleName}\"`)","    })","  })","}","","function isValid(possible, actual) {","  const possibleList = [].concat(possible)","  for (let i = 0, l = possibleList.length; i < l; i++) {","    const possibility = possibleList[i]","    if (typeof possibility === \"function\" && possibility(actual)) {","      return true","    }","    if (actual === possibility) {","      return true","    }","  }","}",""],"l":{"4":1,"6":1,"28":1,"32":0,"34":0,"36":0,"37":0,"40":1,"41":0,"42":0,"45":0,"48":0,"51":1,"52":0,"53":0,"54":0,"56":0,"57":0,"60":0,"62":0,"63":0,"66":0,"67":0,"68":0,"70":0,"71":0,"72":0,"73":0,"74":0,"78":0,"79":0,"80":0,"82":0,"86":0,"87":0,"88":0,"89":0,"91":0,"93":0,"97":0,"98":0,"99":0,"102":0,"103":0,"104":0,"107":0,"108":0,"109":0,"112":0,"113":0,"114":0,"116":0,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"128":0,"129":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/checkAgainstRule.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/checkAgainstRule.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":17,"column":2}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":65}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":33}},"4":{"start":{"line":10,"column":0},"end":{"line":31,"column":1}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":133}},"6":{"start":{"line":18,"column":16},"end":{"line":18,"column":133}},"7":{"start":{"line":19,"column":2},"end":{"line":19,"column":72}},"8":{"start":{"line":19,"column":17},"end":{"line":19,"column":72}},"9":{"start":{"line":20,"column":2},"end":{"line":20,"column":89}},"10":{"start":{"line":20,"column":25},"end":{"line":20,"column":89}},"11":{"start":{"line":21,"column":2},"end":{"line":21,"column":92}},"12":{"start":{"line":21,"column":32},"end":{"line":21,"column":92}},"13":{"start":{"line":22,"column":2},"end":{"line":22,"column":97}},"14":{"start":{"line":22,"column":29},"end":{"line":22,"column":97}},"15":{"start":{"line":23,"column":2},"end":{"line":23,"column":81}},"16":{"start":{"line":23,"column":21},"end":{"line":23,"column":81}},"17":{"start":{"line":25,"column":2},"end":{"line":25,"column":80}},"18":{"start":{"line":26,"column":2},"end":{"line":26,"column":27}},"19":{"start":{"line":26,"column":19},"end":{"line":26,"column":26}},"20":{"start":{"line":28,"column":2},"end":{"line":28,"column":39}},"21":{"start":{"line":29,"column":2},"end":{"line":29,"column":83}},"22":{"start":{"line":30,"column":2},"end":{"line":30,"column":47}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"4":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"5":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"6":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":2},"end":{"line":23,"column":2}},{"start":{"line":23,"column":2},"end":{"line":23,"column":2}}]},"7":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const Result = require(\"postcss/lib/result\")","const normalizeRuleSettings = require(\"../normalizeRuleSettings\")","const rules = require(\"../rules\")","","// Useful for third-party code (e.g. plugins) to run a PostCSS Root","// against a specific rule and do something with the warnings","module.exports = function (","  options/*: {","    ruleName: string,","    ruleSettings: stylelint$configRuleSettings,","    root: Object,","  }*/,","  callback/*: Function*/",") {","  if (!options) throw new Error(\"checkAgainstRule requires an options object with 'ruleName', 'ruleSettings', and 'root' properties\")","  if (!callback) throw new Error(\"checkAgainstRule requires a callback\")","  if (!options.ruleName) throw new Error(\"checkAgainstRule requires a 'ruleName' option\")","  if (!rules[options.ruleName]) throw new Error(`Rule '${options.ruleName}' does not exist`)","  if (!options.ruleSettings) throw new Error(\"checkAgainstRule requires a 'ruleSettings' option\")","  if (!options.root) throw new Error(\"checkAgainstRule requires a 'root' option\")","","  const settings = normalizeRuleSettings(options.ruleSettings, options.ruleName)","  if (!settings) { return }","","  const tmpPostcssResult = new Result()","  rules[options.ruleName](settings[0], settings[1])(options.root, tmpPostcssResult)","  tmpPostcssResult.warnings().forEach(callback)","}",""],"l":{"4":1,"5":1,"6":1,"10":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"25":0,"26":0,"28":0,"29":0,"30":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/normalizeRuleSettings.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/normalizeRuleSettings.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":17},"end":{"line":24,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"3":{"start":{"line":18,"column":0},"end":{"line":69,"column":1}},"4":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"5":{"start":{"line":26,"column":4},"end":{"line":26,"column":15}},"6":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"7":{"start":{"line":30,"column":4},"end":{"line":30,"column":24}},"8":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"9":{"start":{"line":35,"column":4},"end":{"line":35,"column":15}},"10":{"start":{"line":39,"column":2},"end":{"line":46,"column":3}},"11":{"start":{"line":40,"column":4},"end":{"line":42,"column":5}},"12":{"start":{"line":41,"column":6},"end":{"line":41,"column":24}},"13":{"start":{"line":43,"column":4},"end":{"line":45,"column":5}},"14":{"start":{"line":44,"column":6},"end":{"line":44,"column":26}},"15":{"start":{"line":48,"column":2},"end":{"line":51,"column":3}},"16":{"start":{"line":49,"column":4},"end":{"line":49,"column":32}},"17":{"start":{"line":50,"column":4},"end":{"line":50,"column":58}},"18":{"start":{"line":53,"column":2},"end":{"line":55,"column":3}},"19":{"start":{"line":54,"column":4},"end":{"line":54,"column":22}},"20":{"start":{"line":60,"column":2},"end":{"line":62,"column":3}},"21":{"start":{"line":61,"column":4},"end":{"line":61,"column":22}},"22":{"start":{"line":64,"column":2},"end":{"line":66,"column":3}},"23":{"start":{"line":65,"column":4},"end":{"line":65,"column":22}},"24":{"start":{"line":68,"column":2},"end":{"line":68,"column":22}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"4":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"5":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"6":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"7":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]},"8":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":2},"end":{"line":53,"column":2}},{"start":{"line":53,"column":2},"end":{"line":53,"column":2}}]},"9":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"10":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":30}},{"start":{"line":60,"column":34},"end":{"line":60,"column":63}}]},"11":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":2},"end":{"line":64,"column":2}},{"start":{"line":64,"column":2},"end":{"line":64,"column":2}}]},"12":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":30}},{"start":{"line":64,"column":34},"end":{"line":64,"column":66}},{"start":{"line":64,"column":70},"end":{"line":64,"column":101}}]}},"code":["/* @flow */","\"use strict\"","const _ = require(\"lodash\")","const rules = require(\"./rules\")","","// Rule settings can take a number of forms, e.g.","// a. \"rule-name\": null","// b. \"rule-name\": [null, ...]","// c. \"rule-name\": primaryOption","// d. \"rule-name\": [primaryOption]","// e. \"rule-name\": [primaryOption, secondaryOption]","// Where primaryOption can be anything: primitive, Object, or Array.","//","// This function normalizes all the possibilities into the","// standard form: [primaryOption, secondaryOption]","// Except in the cases with null, a & b, in which case","// null is returned","module.exports = function (","  rawSettings/*: stylelint$configRuleSettings*/,","  ruleName/*: string*/,","  // If primaryOptionArray is not provided, we try to get it from the","  // rules themselves, which will not work for plugins","  primaryOptionArray/*:: ?: boolean*/",")/*: [any, Object] | Array<any | [any, Object]> | null*/ {","  if (rawSettings === null) {","    return null","  }","","  if (!Array.isArray(rawSettings)) {","    return [rawSettings]","  }","  // Everything below is an array ...","","  if (rawSettings[0] === null) {","    return null","  }","","  // This cursed rule needs a special case","  if (ruleName === \"declaration-block-properties-order\") {","    if (rawSettings[0] === \"alphabetical\") {","      return rawSettings","    }","    if (typeof rawSettings[0] === \"string\") {","      return [rawSettings]","    }","  }","","  if (primaryOptionArray === undefined) {","    const rule = rules[ruleName]","    primaryOptionArray = _.get(rule, \"primaryOptionArray\")","  }","","  if (!primaryOptionArray) {","    return rawSettings","  }","  // Everything below is a rule that CAN have an array for a primary option ...","  // (they might also have something else, e.g. rule-properties-order can","  // have the string \"alphabetical\")","","  if (rawSettings.length === 1 && Array.isArray(rawSettings[0])) {","    return rawSettings","  }","","  if (rawSettings.length === 2 && !_.isPlainObject(rawSettings[0]) && _.isPlainObject(rawSettings[1])) {","    return rawSettings","  }","","  return [rawSettings]","}",""],"l":{"3":1,"4":1,"18":1,"25":0,"26":0,"29":0,"30":0,"34":0,"35":0,"39":0,"40":0,"41":0,"43":0,"44":0,"48":0,"49":0,"50":0,"53":0,"54":0,"60":0,"61":0,"64":0,"65":0,"68":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":53}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":70}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":78}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":66}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":55}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":66}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":80}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":54}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":91}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":84}},"13":{"start":{"line":15,"column":0},"end":{"line":15,"column":86}},"14":{"start":{"line":16,"column":0},"end":{"line":16,"column":80}},"15":{"start":{"line":17,"column":0},"end":{"line":17,"column":82}},"16":{"start":{"line":18,"column":0},"end":{"line":18,"column":48}},"17":{"start":{"line":19,"column":0},"end":{"line":19,"column":59}},"18":{"start":{"line":20,"column":0},"end":{"line":20,"column":84}},"19":{"start":{"line":21,"column":0},"end":{"line":21,"column":86}},"20":{"start":{"line":22,"column":0},"end":{"line":22,"column":80}},"21":{"start":{"line":23,"column":0},"end":{"line":23,"column":82}},"22":{"start":{"line":24,"column":0},"end":{"line":24,"column":48}},"23":{"start":{"line":25,"column":0},"end":{"line":25,"column":52}},"24":{"start":{"line":26,"column":0},"end":{"line":26,"column":43}},"25":{"start":{"line":27,"column":0},"end":{"line":27,"column":44}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":59}},"27":{"start":{"line":29,"column":0},"end":{"line":29,"column":69}},"28":{"start":{"line":30,"column":0},"end":{"line":30,"column":52}},"29":{"start":{"line":31,"column":0},"end":{"line":31,"column":70}},"30":{"start":{"line":32,"column":0},"end":{"line":32,"column":64}},"31":{"start":{"line":33,"column":0},"end":{"line":33,"column":60}},"32":{"start":{"line":34,"column":0},"end":{"line":34,"column":84}},"33":{"start":{"line":35,"column":0},"end":{"line":35,"column":80}},"34":{"start":{"line":36,"column":0},"end":{"line":36,"column":66}},"35":{"start":{"line":37,"column":0},"end":{"line":37,"column":75}},"36":{"start":{"line":38,"column":0},"end":{"line":38,"column":77}},"37":{"start":{"line":39,"column":0},"end":{"line":39,"column":100}},"38":{"start":{"line":40,"column":0},"end":{"line":40,"column":96}},"39":{"start":{"line":41,"column":0},"end":{"line":41,"column":117}},"40":{"start":{"line":42,"column":0},"end":{"line":42,"column":115}},"41":{"start":{"line":43,"column":0},"end":{"line":43,"column":87}},"42":{"start":{"line":44,"column":0},"end":{"line":44,"column":100}},"43":{"start":{"line":45,"column":0},"end":{"line":45,"column":102}},"44":{"start":{"line":46,"column":0},"end":{"line":46,"column":96}},"45":{"start":{"line":47,"column":0},"end":{"line":47,"column":98}},"46":{"start":{"line":48,"column":0},"end":{"line":48,"column":109}},"47":{"start":{"line":49,"column":0},"end":{"line":49,"column":91}},"48":{"start":{"line":50,"column":0},"end":{"line":50,"column":81}},"49":{"start":{"line":51,"column":0},"end":{"line":51,"column":77}},"50":{"start":{"line":52,"column":0},"end":{"line":52,"column":79}},"51":{"start":{"line":53,"column":0},"end":{"line":53,"column":77}},"52":{"start":{"line":54,"column":0},"end":{"line":54,"column":68}},"53":{"start":{"line":55,"column":0},"end":{"line":55,"column":89}},"54":{"start":{"line":56,"column":0},"end":{"line":56,"column":89}},"55":{"start":{"line":57,"column":0},"end":{"line":57,"column":91}},"56":{"start":{"line":58,"column":0},"end":{"line":58,"column":91}},"57":{"start":{"line":59,"column":0},"end":{"line":59,"column":65}},"58":{"start":{"line":60,"column":0},"end":{"line":60,"column":78}},"59":{"start":{"line":61,"column":0},"end":{"line":61,"column":60}},"60":{"start":{"line":62,"column":0},"end":{"line":62,"column":57}},"61":{"start":{"line":63,"column":0},"end":{"line":63,"column":86}},"62":{"start":{"line":64,"column":0},"end":{"line":64,"column":75}},"63":{"start":{"line":65,"column":0},"end":{"line":65,"column":77}},"64":{"start":{"line":66,"column":0},"end":{"line":66,"column":71}},"65":{"start":{"line":67,"column":0},"end":{"line":67,"column":73}},"66":{"start":{"line":68,"column":0},"end":{"line":68,"column":115}},"67":{"start":{"line":69,"column":0},"end":{"line":69,"column":67}},"68":{"start":{"line":70,"column":0},"end":{"line":70,"column":56}},"69":{"start":{"line":71,"column":0},"end":{"line":71,"column":89}},"70":{"start":{"line":72,"column":0},"end":{"line":72,"column":85}},"71":{"start":{"line":73,"column":0},"end":{"line":73,"column":63}},"72":{"start":{"line":74,"column":0},"end":{"line":74,"column":80}},"73":{"start":{"line":75,"column":0},"end":{"line":75,"column":58}},"74":{"start":{"line":76,"column":0},"end":{"line":76,"column":77}},"75":{"start":{"line":77,"column":0},"end":{"line":77,"column":57}},"76":{"start":{"line":78,"column":0},"end":{"line":78,"column":70}},"77":{"start":{"line":79,"column":0},"end":{"line":79,"column":44}},"78":{"start":{"line":80,"column":0},"end":{"line":80,"column":85}},"79":{"start":{"line":81,"column":0},"end":{"line":81,"column":57}},"80":{"start":{"line":82,"column":0},"end":{"line":82,"column":50}},"81":{"start":{"line":83,"column":0},"end":{"line":83,"column":50}},"82":{"start":{"line":84,"column":0},"end":{"line":84,"column":54}},"83":{"start":{"line":85,"column":0},"end":{"line":85,"column":80}},"84":{"start":{"line":86,"column":0},"end":{"line":86,"column":82}},"85":{"start":{"line":87,"column":0},"end":{"line":87,"column":75}},"86":{"start":{"line":88,"column":0},"end":{"line":88,"column":65}},"87":{"start":{"line":89,"column":0},"end":{"line":89,"column":76}},"88":{"start":{"line":90,"column":0},"end":{"line":90,"column":87}},"89":{"start":{"line":91,"column":0},"end":{"line":91,"column":75}},"90":{"start":{"line":92,"column":0},"end":{"line":92,"column":90}},"91":{"start":{"line":93,"column":0},"end":{"line":93,"column":94}},"92":{"start":{"line":94,"column":0},"end":{"line":94,"column":97}},"93":{"start":{"line":95,"column":0},"end":{"line":95,"column":99}},"94":{"start":{"line":96,"column":0},"end":{"line":96,"column":89}},"95":{"start":{"line":97,"column":0},"end":{"line":97,"column":91}},"96":{"start":{"line":98,"column":0},"end":{"line":98,"column":85}},"97":{"start":{"line":99,"column":0},"end":{"line":99,"column":87}},"98":{"start":{"line":100,"column":0},"end":{"line":100,"column":52}},"99":{"start":{"line":101,"column":0},"end":{"line":101,"column":70}},"100":{"start":{"line":102,"column":0},"end":{"line":102,"column":64}},"101":{"start":{"line":103,"column":0},"end":{"line":103,"column":50}},"102":{"start":{"line":104,"column":0},"end":{"line":104,"column":54}},"103":{"start":{"line":105,"column":0},"end":{"line":105,"column":58}},"104":{"start":{"line":106,"column":0},"end":{"line":106,"column":74}},"105":{"start":{"line":107,"column":0},"end":{"line":107,"column":82}},"106":{"start":{"line":108,"column":0},"end":{"line":108,"column":81}},"107":{"start":{"line":109,"column":0},"end":{"line":109,"column":79}},"108":{"start":{"line":110,"column":0},"end":{"line":110,"column":62}},"109":{"start":{"line":111,"column":0},"end":{"line":111,"column":58}},"110":{"start":{"line":112,"column":0},"end":{"line":112,"column":60}},"111":{"start":{"line":113,"column":0},"end":{"line":113,"column":67}},"112":{"start":{"line":114,"column":0},"end":{"line":114,"column":57}},"113":{"start":{"line":115,"column":0},"end":{"line":115,"column":47}},"114":{"start":{"line":116,"column":0},"end":{"line":116,"column":58}},"115":{"start":{"line":117,"column":0},"end":{"line":117,"column":69}},"116":{"start":{"line":118,"column":0},"end":{"line":118,"column":57}},"117":{"start":{"line":119,"column":0},"end":{"line":119,"column":73}},"118":{"start":{"line":120,"column":0},"end":{"line":120,"column":63}},"119":{"start":{"line":121,"column":0},"end":{"line":121,"column":76}},"120":{"start":{"line":122,"column":0},"end":{"line":122,"column":83}},"121":{"start":{"line":123,"column":0},"end":{"line":123,"column":98}},"122":{"start":{"line":124,"column":0},"end":{"line":124,"column":93}},"123":{"start":{"line":125,"column":0},"end":{"line":125,"column":96}},"124":{"start":{"line":126,"column":0},"end":{"line":126,"column":98}},"125":{"start":{"line":127,"column":0},"end":{"line":127,"column":93}},"126":{"start":{"line":128,"column":0},"end":{"line":128,"column":70}},"127":{"start":{"line":129,"column":0},"end":{"line":129,"column":64}},"128":{"start":{"line":130,"column":0},"end":{"line":130,"column":81}},"129":{"start":{"line":131,"column":0},"end":{"line":131,"column":83}},"130":{"start":{"line":132,"column":0},"end":{"line":132,"column":103}},"131":{"start":{"line":133,"column":0},"end":{"line":133,"column":58}},"132":{"start":{"line":134,"column":0},"end":{"line":134,"column":84}},"133":{"start":{"line":135,"column":0},"end":{"line":135,"column":86}},"134":{"start":{"line":136,"column":0},"end":{"line":136,"column":80}},"135":{"start":{"line":137,"column":0},"end":{"line":137,"column":82}},"136":{"start":{"line":138,"column":0},"end":{"line":138,"column":81}},"137":{"start":{"line":139,"column":0},"end":{"line":139,"column":67}},"138":{"start":{"line":140,"column":0},"end":{"line":140,"column":68}},"139":{"start":{"line":141,"column":0},"end":{"line":141,"column":66}},"140":{"start":{"line":142,"column":0},"end":{"line":142,"column":62}},"141":{"start":{"line":143,"column":0},"end":{"line":143,"column":64}},"142":{"start":{"line":144,"column":0},"end":{"line":144,"column":54}},"143":{"start":{"line":145,"column":0},"end":{"line":145,"column":48}},"144":{"start":{"line":146,"column":0},"end":{"line":146,"column":73}},"145":{"start":{"line":147,"column":0},"end":{"line":147,"column":52}},"146":{"start":{"line":148,"column":0},"end":{"line":148,"column":62}},"147":{"start":{"line":149,"column":0},"end":{"line":149,"column":69}},"148":{"start":{"line":150,"column":0},"end":{"line":150,"column":81}},"149":{"start":{"line":151,"column":0},"end":{"line":151,"column":71}},"150":{"start":{"line":152,"column":0},"end":{"line":152,"column":82}},"151":{"start":{"line":153,"column":0},"end":{"line":153,"column":109}},"152":{"start":{"line":154,"column":0},"end":{"line":154,"column":81}},"153":{"start":{"line":155,"column":0},"end":{"line":155,"column":75}},"154":{"start":{"line":156,"column":0},"end":{"line":156,"column":94}},"155":{"start":{"line":157,"column":0},"end":{"line":157,"column":86}},"156":{"start":{"line":158,"column":0},"end":{"line":158,"column":75}},"157":{"start":{"line":159,"column":0},"end":{"line":159,"column":56}},"158":{"start":{"line":160,"column":0},"end":{"line":160,"column":67}},"159":{"start":{"line":161,"column":0},"end":{"line":161,"column":94}},"160":{"start":{"line":162,"column":0},"end":{"line":162,"column":54}},"161":{"start":{"line":163,"column":0},"end":{"line":163,"column":47}},"162":{"start":{"line":164,"column":0},"end":{"line":164,"column":68}},"163":{"start":{"line":165,"column":0},"end":{"line":165,"column":62}},"164":{"start":{"line":166,"column":0},"end":{"line":166,"column":62}},"165":{"start":{"line":167,"column":0},"end":{"line":167,"column":49}},"166":{"start":{"line":168,"column":0},"end":{"line":168,"column":39}},"167":{"start":{"line":169,"column":0},"end":{"line":169,"column":50}},"168":{"start":{"line":170,"column":0},"end":{"line":170,"column":49}},"169":{"start":{"line":171,"column":0},"end":{"line":171,"column":56}},"170":{"start":{"line":172,"column":0},"end":{"line":172,"column":78}},"171":{"start":{"line":173,"column":0},"end":{"line":173,"column":80}},"172":{"start":{"line":174,"column":0},"end":{"line":174,"column":74}},"173":{"start":{"line":175,"column":0},"end":{"line":175,"column":76}},"174":{"start":{"line":176,"column":0},"end":{"line":176,"column":70}},"175":{"start":{"line":177,"column":0},"end":{"line":177,"column":63}},"176":{"start":{"line":179,"column":0},"end":{"line":355,"column":1}}},"branchMap":{},"code":["\"use strict\"","","const atRuleBlacklist = require(\"./at-rule-blacklist\")","const atRuleEmptyLineBefore = require(\"./at-rule-empty-line-before\")","const atRuleNameCase = require(\"./at-rule-name-case\")","const atRuleNameNewlineAfter = require(\"./at-rule-name-newline-after\")","const atRuleSemicolonSpaceBefore = require(\"./at-rule-semicolon-space-before\")","const atRuleNameSpaceAfter = require(\"./at-rule-name-space-after\")","const atRuleNoUnknown = require(\"./at-rule-no-unknown\")","const atRuleNoVendorPrefix = require(\"./at-rule-no-vendor-prefix\")","const atRuleSemicolonNewlineAfter = require(\"./at-rule-semicolon-newline-after\")","const atRuleWhitelist = require(\"./at-rule-whitelist\")","const blockClosingBraceEmptyLineBefore = require(\"./block-closing-brace-empty-line-before\")","const blockClosingBraceNewlineAfter = require(\"./block-closing-brace-newline-after\")","const blockClosingBraceNewlineBefore = require(\"./block-closing-brace-newline-before\")","const blockClosingBraceSpaceAfter = require(\"./block-closing-brace-space-after\")","const blockClosingBraceSpaceBefore = require(\"./block-closing-brace-space-before\")","const blockNoEmpty = require(\"./block-no-empty\")","const blockNoSingleLine = require(\"./block-no-single-line\")","const blockOpeningBraceNewlineAfter = require(\"./block-opening-brace-newline-after\")","const blockOpeningBraceNewlineBefore = require(\"./block-opening-brace-newline-before\")","const blockOpeningBraceSpaceAfter = require(\"./block-opening-brace-space-after\")","const blockOpeningBraceSpaceBefore = require(\"./block-opening-brace-space-before\")","const colorHexCase = require(\"./color-hex-case\")","const colorHexLength = require(\"./color-hex-length\")","const colorNamed = require(\"./color-named\")","const colorNoHex = require(\"./color-no-hex\")","const colorNoInvalidHex = require(\"./color-no-invalid-hex\")","const commentEmptyLineBefore = require(\"./comment-empty-line-before\")","const commentNoEmpty = require(\"./comment-no-empty\")","const commentWhitespaceInside = require(\"./comment-whitespace-inside\")","const commentWordBlacklist = require(\"./comment-word-blacklist\")","const customMediaPattern = require(\"./custom-media-pattern\")","const customPropertyEmptyLineBefore = require(\"./custom-property-empty-line-before\")","const customPropertyNoOutsideRoot = require(\"./custom-property-no-outside-root\")","const customPropertyPattern = require(\"./custom-property-pattern\")","const declarationBangSpaceAfter = require(\"./declaration-bang-space-after\")","const declarationBangSpaceBefore = require(\"./declaration-bang-space-before\")","const declarationBlockNoDuplicateProperties = require(\"./declaration-block-no-duplicate-properties\")","const declarationBlockNoIgnoredProperties = require(\"./declaration-block-no-ignored-properties\")","const declarationBlockNoRedundantLonghandProperties = require(\"./declaration-block-no-redundant-longhand-properties\")","const declarationBlockNoShorthandPropertyOverrides = require(\"./declaration-block-no-shorthand-property-overrides\")","const declarationBlockPropertiesOrder = require(\"./declaration-block-properties-order\")","const declarationBlockSemicolonNewlineAfter = require(\"./declaration-block-semicolon-newline-after\")","const declarationBlockSemicolonNewlineBefore = require(\"./declaration-block-semicolon-newline-before\")","const declarationBlockSemicolonSpaceAfter = require(\"./declaration-block-semicolon-space-after\")","const declarationBlockSemicolonSpaceBefore = require(\"./declaration-block-semicolon-space-before\")","const declarationBlockSingleLineMaxDeclarations = require(\"./declaration-block-single-line-max-declarations\")","const declarationBlockTrailingSemicolon = require(\"./declaration-block-trailing-semicolon\")","const declarationColonNewlineAfter = require(\"./declaration-colon-newline-after\")","const declarationColonSpaceAfter = require(\"./declaration-colon-space-after\")","const declarationColonSpaceBefore = require(\"./declaration-colon-space-before\")","const declarationEmptyLineBefore = require(\"./declaration-empty-line-before\")","const declarationNoImportant = require(\"./declaration-no-important\")","const declarationPropertyUnitBlacklist = require(\"./declaration-property-unit-blacklist\")","const declarationPropertyUnitWhitelist = require(\"./declaration-property-unit-whitelist\")","const declarationPropertyValueBlacklist = require(\"./declaration-property-value-blacklist\")","const declarationPropertyValueWhitelist = require(\"./declaration-property-value-whitelist\")","const fontFamilyNameQuotes = require(\"./font-family-name-quotes\")","const fontFamilyNoDuplicateNames = require(\"./font-family-no-duplicate-names\")","const fontWeightNotation = require(\"./font-weight-notation\")","const functionBlacklist = require(\"./function-blacklist\")","const functionCalcNoUnspacedOperator = require(\"./function-calc-no-unspaced-operator\")","const functionCommaNewlineAfter = require(\"./function-comma-newline-after\")","const functionCommaNewlineBefore = require(\"./function-comma-newline-before\")","const functionCommaSpaceAfter = require(\"./function-comma-space-after\")","const functionCommaSpaceBefore = require(\"./function-comma-space-before\")","const functionLinearGradientNoNonstandardDirection = require(\"./function-linear-gradient-no-nonstandard-direction\")","const functionMaxEmptyLines = require(\"./function-max-empty-lines\")","const functionNameCase = require(\"./function-name-case\")","const functionParenthesesNewlineInside = require(\"./function-parentheses-newline-inside\")","const functionParenthesesSpaceInside = require(\"./function-parentheses-space-inside\")","const functionUrlDataUris = require(\"./function-url-data-uris\")","const functionUrlNoSchemeRelative = require(\"./function-url-no-scheme-relative\")","const functionUrlQuotes = require(\"./function-url-quotes\")","const functionUrlSchemeWhitelist = require(\"./function-url-scheme-whitelist\")","const functionWhitelist = require(\"./function-whitelist\")","const functionWhitespaceAfter = require(\"./function-whitespace-after\")","const indentation = require(\"./indentation\")","const keyframeDeclarationNoImportant = require(\"./keyframe-declaration-no-important\")","const lengthZeroNoUnit = require(\"./length-zero-no-unit\")","const maxEmptyLines = require(\"./max-empty-lines\")","const maxLineLength = require(\"./max-line-length\")","const maxNestingDepth = require(\"./max-nesting-depth\")","const mediaFeatureColonSpaceAfter = require(\"./media-feature-colon-space-after\")","const mediaFeatureColonSpaceBefore = require(\"./media-feature-colon-space-before\")","const mediaFeatureNameBlacklist = require(\"./media-feature-name-blacklist\")","const mediaFeatureNameCase = require(\"./media-feature-name-case\")","const mediaFeatureNameNoUnknown = require(\"./media-feature-name-no-unknown\")","const mediaFeatureNameNoVendorPrefix = require(\"./media-feature-name-no-vendor-prefix\")","const mediaFeatureNameWhitelist = require(\"./media-feature-name-whitelist\")","const mediaFeatureNoMissingPunctuation = require(\"./media-feature-no-missing-punctuation\")","const mediaFeatureParenthesesSpaceInside = require(\"./media-feature-parentheses-space-inside\")","const mediaFeatureRangeOperatorSpaceAfter = require(\"./media-feature-range-operator-space-after\")","const mediaFeatureRangeOperatorSpaceBefore = require(\"./media-feature-range-operator-space-before\")","const mediaQueryListCommaNewlineAfter = require(\"./media-query-list-comma-newline-after\")","const mediaQueryListCommaNewlineBefore = require(\"./media-query-list-comma-newline-before\")","const mediaQueryListCommaSpaceAfter = require(\"./media-query-list-comma-space-after\")","const mediaQueryListCommaSpaceBefore = require(\"./media-query-list-comma-space-before\")","const noBrowserHacks = require(\"./no-browser-hacks\")","const noDescendingSpecificity = require(\"./no-descending-specificity\")","const noDuplicateSelectors = require(\"./no-duplicate-selectors\")","const noEmptySource = require(\"./no-empty-source\")","const noEolWhitespace = require(\"./no-eol-whitespace\")","const noExtraSemicolons = require(\"./no-extra-semicolons\")","const noIndistinguishableColors = require(\"./no-indistinguishable-colors\")","const noInvalidDoubleSlashComments = require(\"./no-invalid-double-slash-comments\")","const noMissingEndOfSourceNewline = require(\"./no-missing-end-of-source-newline\")","const noSupportedBrowserFeatures = require(\"./no-unsupported-browser-features\")","const noUnknownAnimations = require(\"./no-unknown-animations\")","const numberLeadingZero = require(\"./number-leading-zero\")","const numberMaxPrecision = require(\"./number-max-precision\")","const numberNoTrailingZeros = require(\"./number-no-trailing-zeros\")","const propertyBlacklist = require(\"./property-blacklist\")","const propertyCase = require(\"./property-case\")","const propertyNoUnknown = require(\"./property-no-unknown\")","const propertyNoVendorPrefix = require(\"./property-no-vendor-prefix\")","const propertyWhitelist = require(\"./property-whitelist\")","const rootNoStandardProperties = require(\"./root-no-standard-properties\")","const ruleEmptyLineBefore = require(\"./rule-empty-line-before\")","const ruleNestedEmptyLineBefore = require(\"./rule-nested-empty-line-before\")","const ruleNonNestedEmptyLineBefore = require(\"./rule-non-nested-empty-line-before\")","const selectorAttributeBracketsSpaceInside = require(\"./selector-attribute-brackets-space-inside\")","const selectorAttributeOperatorBlacklist = require(\"./selector-attribute-operator-blacklist\")","const selectorAttributeOperatorSpaceAfter = require(\"./selector-attribute-operator-space-after\")","const selectorAttributeOperatorSpaceBefore = require(\"./selector-attribute-operator-space-before\")","const selectorAttributeOperatorWhitelist = require(\"./selector-attribute-operator-whitelist\")","const selectorAttributeQuotes = require(\"./selector-attribute-quotes\")","const selectorClassPattern = require(\"./selector-class-pattern\")","const selectorCombinatorSpaceAfter = require(\"./selector-combinator-space-after\")","const selectorCombinatorSpaceBefore = require(\"./selector-combinator-space-before\")","const selectorDescendantCombinatorNoNonSpace = require(\"./selector-descendant-combinator-no-non-space\")","const selectorIdPattern = require(\"./selector-id-pattern\")","const selectorListCommaNewlineAfter = require(\"./selector-list-comma-newline-after\")","const selectorListCommaNewlineBefore = require(\"./selector-list-comma-newline-before\")","const selectorListCommaSpaceAfter = require(\"./selector-list-comma-space-after\")","const selectorListCommaSpaceBefore = require(\"./selector-list-comma-space-before\")","const selectorMaxCompoundSelectors = require(\"./selector-max-compound-selectors\")","const selectorMaxEmptyLines = require(\"./selector-max-empty-lines\")","const selectorMaxSpecificity = require(\"./selector-max-specificity\")","const selectorNestedPattern = require(\"./selector-nested-pattern\")","const selectorNoAttribute = require(\"./selector-no-attribute\")","const selectorNoCombinator = require(\"./selector-no-combinator\")","const selectorNoEmpty = require(\"./selector-no-empty\")","const selectorNoId = require(\"./selector-no-id\")","const selectorNoQualifyingType = require(\"./selector-no-qualifying-type\")","const selectorNoType = require(\"./selector-no-type\")","const selectorNoUniversal = require(\"./selector-no-universal\")","const selectorNoVendorPrefix = require(\"./selector-no-vendor-prefix\")","const selectorPseudoClassBlacklist = require(\"./selector-pseudo-class-blacklist\")","const selectorPseudoClassCase = require(\"./selector-pseudo-class-case\")","const selectorPseudoClassNoUnknown = require(\"./selector-pseudo-class-no-unknown\")","const selectorPseudoClassParenthesesSpaceInside = require(\"./selector-pseudo-class-parentheses-space-inside\")","const selectorPseudoClassWhitelist = require(\"./selector-pseudo-class-whitelist\")","const selectorPseudoElementCase = require(\"./selector-pseudo-element-case\")","const selectorPseudoElementColonNotation = require(\"./selector-pseudo-element-colon-notation\")","const selectorPseudoElementNoUnknown = require(\"./selector-pseudo-element-no-unknown\")","const selectorRootNoComposition = require(\"./selector-root-no-composition\")","const selectorTypeCase = require(\"./selector-type-case\")","const selectorTypeNoUnknown = require(\"./selector-type-no-unknown\")","const shorthandPropertyNoRedundantValues = require(\"./shorthand-property-no-redundant-values\")","const stringNoNewline = require(\"./string-no-newline\")","const stringQuotes = require(\"./string-quotes\")","const stylelintDisableReason = require(\"./stylelint-disable-reason\")","const timeMinMilliseconds = require(\"./time-min-milliseconds\")","const timeNoImperceptible = require(\"./time-no-imperceptible\")","const unitBlacklist = require(\"./unit-blacklist\")","const unitCase = require(\"./unit-case\")","const unitNoUnknown = require(\"./unit-no-unknown\")","const unitWhitelist = require(\"./unit-whitelist\")","const valueKeywordCase = require(\"./value-keyword-case\")","const valueListCommaNewlineAfter = require(\"./value-list-comma-newline-after\")","const valueListCommaNewlineBefore = require(\"./value-list-comma-newline-before\")","const valueListCommaSpaceAfter = require(\"./value-list-comma-space-after\")","const valueListCommaSpaceBefore = require(\"./value-list-comma-space-before\")","const valueListMaxEmptyLines = require(\"./value-list-max-empty-lines\")","const valueNoVendorPrefix = require(\"./value-no-vendor-prefix\")","","module.exports = {","  \"at-rule-blacklist\": atRuleBlacklist,","  \"at-rule-empty-line-before\": atRuleEmptyLineBefore,","  \"at-rule-name-case\": atRuleNameCase,","  \"at-rule-name-newline-after\": atRuleNameNewlineAfter,","  \"at-rule-semicolon-space-before\": atRuleSemicolonSpaceBefore,","  \"at-rule-name-space-after\": atRuleNameSpaceAfter,","  \"at-rule-no-unknown\": atRuleNoUnknown,","  \"at-rule-no-vendor-prefix\": atRuleNoVendorPrefix,","  \"at-rule-semicolon-newline-after\": atRuleSemicolonNewlineAfter,","  \"at-rule-whitelist\": atRuleWhitelist,","  \"block-closing-brace-empty-line-before\": blockClosingBraceEmptyLineBefore,","  \"block-closing-brace-newline-after\": blockClosingBraceNewlineAfter,","  \"block-closing-brace-newline-before\": blockClosingBraceNewlineBefore,","  \"block-closing-brace-space-after\": blockClosingBraceSpaceAfter,","  \"block-closing-brace-space-before\": blockClosingBraceSpaceBefore,","  \"block-no-empty\": blockNoEmpty,","  \"block-no-single-line\": blockNoSingleLine,","  \"block-opening-brace-newline-after\": blockOpeningBraceNewlineAfter,","  \"block-opening-brace-newline-before\": blockOpeningBraceNewlineBefore,","  \"block-opening-brace-space-after\": blockOpeningBraceSpaceAfter,","  \"block-opening-brace-space-before\": blockOpeningBraceSpaceBefore,","  \"color-hex-case\": colorHexCase,","  \"color-hex-length\": colorHexLength,","  \"color-named\": colorNamed,","  \"color-no-hex\": colorNoHex,","  \"color-no-invalid-hex\": colorNoInvalidHex,","  \"comment-empty-line-before\": commentEmptyLineBefore,","  \"comment-no-empty\": commentNoEmpty,","  \"comment-whitespace-inside\": commentWhitespaceInside,","  \"comment-word-blacklist\": commentWordBlacklist,","  \"custom-media-pattern\": customMediaPattern,","  \"custom-property-empty-line-before\": customPropertyEmptyLineBefore,","  \"custom-property-no-outside-root\": customPropertyNoOutsideRoot,","  \"custom-property-pattern\": customPropertyPattern,","  \"declaration-bang-space-after\": declarationBangSpaceAfter,","  \"declaration-bang-space-before\": declarationBangSpaceBefore,","  \"declaration-block-no-duplicate-properties\": declarationBlockNoDuplicateProperties,","  \"declaration-block-no-ignored-properties\": declarationBlockNoIgnoredProperties,","  \"declaration-block-no-redundant-longhand-properties\": declarationBlockNoRedundantLonghandProperties,","  \"declaration-block-no-shorthand-property-overrides\": declarationBlockNoShorthandPropertyOverrides,","  \"declaration-block-properties-order\": declarationBlockPropertiesOrder,","  \"declaration-block-semicolon-newline-after\": declarationBlockSemicolonNewlineAfter,","  \"declaration-block-semicolon-newline-before\": declarationBlockSemicolonNewlineBefore,","  \"declaration-block-semicolon-space-after\": declarationBlockSemicolonSpaceAfter,","  \"declaration-block-semicolon-space-before\": declarationBlockSemicolonSpaceBefore,","  \"declaration-block-single-line-max-declarations\": declarationBlockSingleLineMaxDeclarations,","  \"declaration-block-trailing-semicolon\": declarationBlockTrailingSemicolon,","  \"declaration-colon-newline-after\": declarationColonNewlineAfter,","  \"declaration-colon-space-after\": declarationColonSpaceAfter,","  \"declaration-colon-space-before\": declarationColonSpaceBefore,","  \"declaration-empty-line-before\": declarationEmptyLineBefore,","  \"declaration-no-important\": declarationNoImportant,","  \"declaration-property-unit-blacklist\": declarationPropertyUnitBlacklist,","  \"declaration-property-unit-whitelist\": declarationPropertyUnitWhitelist,","  \"declaration-property-value-blacklist\": declarationPropertyValueBlacklist,","  \"declaration-property-value-whitelist\": declarationPropertyValueWhitelist,","  \"font-family-name-quotes\": fontFamilyNameQuotes,","  \"font-family-no-duplicate-names\": fontFamilyNoDuplicateNames,","  \"font-weight-notation\": fontWeightNotation,","  \"function-blacklist\": functionBlacklist,","  \"function-calc-no-unspaced-operator\": functionCalcNoUnspacedOperator,","  \"function-comma-newline-after\": functionCommaNewlineAfter,","  \"function-comma-newline-before\": functionCommaNewlineBefore,","  \"function-comma-space-after\": functionCommaSpaceAfter,","  \"function-comma-space-before\": functionCommaSpaceBefore,","  \"function-linear-gradient-no-nonstandard-direction\": functionLinearGradientNoNonstandardDirection,","  \"function-max-empty-lines\": functionMaxEmptyLines,","  \"function-name-case\": functionNameCase,","  \"function-parentheses-newline-inside\": functionParenthesesNewlineInside,","  \"function-parentheses-space-inside\": functionParenthesesSpaceInside,","  \"function-url-data-uris\": functionUrlDataUris,","  \"function-url-no-scheme-relative\": functionUrlNoSchemeRelative,","  \"function-url-quotes\": functionUrlQuotes,","  \"function-url-scheme-whitelist\": functionUrlSchemeWhitelist,","  \"function-whitelist\": functionWhitelist,","  \"function-whitespace-after\": functionWhitespaceAfter,","  \"indentation\": indentation, // eslint-disable-line object-shorthand","  \"keyframe-declaration-no-important\": keyframeDeclarationNoImportant,","  \"length-zero-no-unit\": lengthZeroNoUnit,","  \"max-empty-lines\": maxEmptyLines,","  \"max-line-length\": maxLineLength,","  \"max-nesting-depth\": maxNestingDepth,","  \"media-feature-colon-space-after\": mediaFeatureColonSpaceAfter,","  \"media-feature-colon-space-before\": mediaFeatureColonSpaceBefore,","  \"media-feature-name-blacklist\": mediaFeatureNameBlacklist,","  \"media-feature-name-case\": mediaFeatureNameCase,","  \"media-feature-name-no-unknown\": mediaFeatureNameNoUnknown,","  \"media-feature-name-no-vendor-prefix\": mediaFeatureNameNoVendorPrefix,","  \"media-feature-name-whitelist\": mediaFeatureNameWhitelist,","  \"media-feature-no-missing-punctuation\": mediaFeatureNoMissingPunctuation,","  \"media-feature-parentheses-space-inside\": mediaFeatureParenthesesSpaceInside,","  \"media-feature-range-operator-space-after\": mediaFeatureRangeOperatorSpaceAfter,","  \"media-feature-range-operator-space-before\": mediaFeatureRangeOperatorSpaceBefore,","  \"media-query-list-comma-newline-after\": mediaQueryListCommaNewlineAfter,","  \"media-query-list-comma-newline-before\": mediaQueryListCommaNewlineBefore,","  \"media-query-list-comma-space-after\": mediaQueryListCommaSpaceAfter,","  \"media-query-list-comma-space-before\": mediaQueryListCommaSpaceBefore,","  \"no-browser-hacks\": noBrowserHacks,","  \"no-descending-specificity\": noDescendingSpecificity,","  \"no-duplicate-selectors\": noDuplicateSelectors,","  \"no-empty-source\": noEmptySource,","  \"no-eol-whitespace\": noEolWhitespace,","  \"no-extra-semicolons\": noExtraSemicolons,","  \"no-indistinguishable-colors\": noIndistinguishableColors,","  \"no-invalid-double-slash-comments\": noInvalidDoubleSlashComments,","  \"no-missing-end-of-source-newline\": noMissingEndOfSourceNewline,","  \"no-unknown-animations\": noUnknownAnimations,","  \"no-unsupported-browser-features\": noSupportedBrowserFeatures,","  \"number-leading-zero\": numberLeadingZero,","  \"number-max-precision\": numberMaxPrecision,","  \"number-no-trailing-zeros\": numberNoTrailingZeros,","  \"property-blacklist\": propertyBlacklist,","  \"property-case\": propertyCase,","  \"property-no-unknown\": propertyNoUnknown,","  \"property-no-vendor-prefix\": propertyNoVendorPrefix,","  \"property-whitelist\": propertyWhitelist,","  \"root-no-standard-properties\": rootNoStandardProperties,","  \"rule-empty-line-before\": ruleEmptyLineBefore,","  \"rule-nested-empty-line-before\": ruleNestedEmptyLineBefore,","  \"rule-non-nested-empty-line-before\": ruleNonNestedEmptyLineBefore,","  \"selector-attribute-brackets-space-inside\": selectorAttributeBracketsSpaceInside,","  \"selector-attribute-operator-blacklist\": selectorAttributeOperatorBlacklist,","  \"selector-attribute-operator-space-after\": selectorAttributeOperatorSpaceAfter,","  \"selector-attribute-operator-space-before\": selectorAttributeOperatorSpaceBefore,","  \"selector-attribute-operator-whitelist\": selectorAttributeOperatorWhitelist,","  \"selector-attribute-quotes\": selectorAttributeQuotes,","  \"selector-class-pattern\": selectorClassPattern,","  \"selector-combinator-space-after\": selectorCombinatorSpaceAfter,","  \"selector-combinator-space-before\": selectorCombinatorSpaceBefore,","  \"selector-descendant-combinator-no-non-space\": selectorDescendantCombinatorNoNonSpace,","  \"selector-id-pattern\": selectorIdPattern,","  \"selector-list-comma-newline-after\": selectorListCommaNewlineAfter,","  \"selector-list-comma-newline-before\": selectorListCommaNewlineBefore,","  \"selector-list-comma-space-after\": selectorListCommaSpaceAfter,","  \"selector-list-comma-space-before\": selectorListCommaSpaceBefore,","  \"selector-max-compound-selectors\": selectorMaxCompoundSelectors,","  \"selector-max-empty-lines\": selectorMaxEmptyLines,","  \"selector-max-specificity\": selectorMaxSpecificity,","  \"selector-nested-pattern\": selectorNestedPattern,","  \"selector-no-attribute\": selectorNoAttribute,","  \"selector-no-empty\": selectorNoEmpty,","  \"selector-no-combinator\": selectorNoCombinator,","  \"selector-no-id\": selectorNoId,","  \"selector-no-qualifying-type\": selectorNoQualifyingType,","  \"selector-no-type\": selectorNoType,","  \"selector-no-universal\": selectorNoUniversal,","  \"selector-no-vendor-prefix\": selectorNoVendorPrefix,","  \"selector-pseudo-class-blacklist\": selectorPseudoClassBlacklist,","  \"selector-pseudo-class-case\": selectorPseudoClassCase,","  \"selector-pseudo-class-no-unknown\": selectorPseudoClassNoUnknown,","  \"selector-pseudo-class-parentheses-space-inside\": selectorPseudoClassParenthesesSpaceInside,","  \"selector-pseudo-class-whitelist\": selectorPseudoClassWhitelist,","  \"selector-pseudo-element-case\": selectorPseudoElementCase,","  \"selector-pseudo-element-colon-notation\": selectorPseudoElementColonNotation,","  \"selector-pseudo-element-no-unknown\": selectorPseudoElementNoUnknown,","  \"selector-root-no-composition\": selectorRootNoComposition,","  \"selector-type-case\": selectorTypeCase,","  \"selector-type-no-unknown\": selectorTypeNoUnknown,","  \"shorthand-property-no-redundant-values\": shorthandPropertyNoRedundantValues,","  \"string-no-newline\": stringNoNewline,","  \"string-quotes\": stringQuotes,","  \"stylelint-disable-reason\": stylelintDisableReason,","  \"time-min-milliseconds\": timeMinMilliseconds,","  \"time-no-imperceptible\": timeNoImperceptible,","  \"unit-blacklist\": unitBlacklist,","  \"unit-case\": unitCase,","  \"unit-no-unknown\": unitNoUnknown,","  \"unit-whitelist\": unitWhitelist,","  \"value-keyword-case\": valueKeywordCase,","  \"value-list-comma-newline-after\": valueListCommaNewlineAfter,","  \"value-list-comma-newline-before\": valueListCommaNewlineBefore,","  \"value-list-comma-space-after\": valueListCommaSpaceAfter,","  \"value-list-comma-space-before\": valueListCommaSpaceBefore,","  \"value-list-max-empty-lines\": valueListMaxEmptyLines,","  \"value-no-vendor-prefix\": valueNoVendorPrefix,","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"179":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":1,"23":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":20},"end":{"line":12,"column":50}},"9":{"start":{"line":15,"column":0},"end":{"line":42,"column":1}},"10":{"start":{"line":17,"column":2},"end":{"line":17,"column":45}},"11":{"start":{"line":18,"column":2},"end":{"line":41,"column":3}},"12":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"13":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"14":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"15":{"start":{"line":27,"column":4},"end":{"line":40,"column":6}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":30}},"17":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":14}},"19":{"start":{"line":34,"column":6},"end":{"line":39,"column":8}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":30}},"21":{"start":{"line":46,"column":0},"end":{"line":46,"column":24}},"22":{"start":{"line":47,"column":0},"end":{"line":47,"column":24}},"23":{"start":{"line":48,"column":0},"end":{"line":48,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"at-rule-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: name => `Unexpected at-rule \"${name}\"`,","})","","const rule = function (blacklistInput) {","  // To allow for just a string as a parameter (not only arrays of strings)","  const blacklist = [].concat(blacklistInput)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      const name = atRule.name","","      if (blacklist.indexOf(postcss.vendor.unprefixed(name).toLowerCase()) === -1) {","        return","      }","","      report({","        message: messages.rejected(name),","        node: atRule,","        result,","        ruleName,","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"17":0,"18":0,"19":0,"23":0,"24":0,"27":0,"28":0,"30":0,"31":0,"34":0,"44":1,"46":1,"47":1,"48":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-empty-line-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-empty-line-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":1,"45":0,"46":1,"47":0,"48":1,"49":0,"50":1,"51":0,"52":1,"53":1,"54":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0],"23":[0,0,0,0,0],"24":[0,0,0],"25":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":45}}},"2":{"name":"isAfterComment","line":167,"loc":{"start":{"line":167,"column":6},"end":{"line":167,"column":32}}},"3":{"name":"isBlocklessAfterBlockless","line":172,"loc":{"start":{"line":172,"column":6},"end":{"line":172,"column":43}}},"4":{"name":"isBlocklessAfterSameNameBlockless","line":179,"loc":{"start":{"line":179,"column":6},"end":{"line":179,"column":51}}},"5":{"name":"isAfterSameName","line":187,"loc":{"start":{"line":187,"column":6},"end":{"line":187,"column":33}}},"6":{"name":"isFirstNested","line":193,"loc":{"start":{"line":193,"column":6},"end":{"line":193,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":44}},"9":{"start":{"line":13,"column":0},"end":{"line":16,"column":2}},"10":{"start":{"line":18,"column":0},"end":{"line":199,"column":1}},"11":{"start":{"line":19,"column":2},"end":{"line":198,"column":3}},"12":{"start":{"line":20,"column":4},"end":{"line":49,"column":6}},"13":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"14":{"start":{"line":51,"column":6},"end":{"line":51,"column":12}},"15":{"start":{"line":54,"column":4},"end":{"line":65,"column":5}},"16":{"start":{"line":58,"column":6},"end":{"line":64,"column":8}},"17":{"start":{"line":67,"column":4},"end":{"line":78,"column":5}},"18":{"start":{"line":71,"column":6},"end":{"line":77,"column":8}},"19":{"start":{"line":80,"column":4},"end":{"line":197,"column":6}},"20":{"start":{"line":82,"column":6},"end":{"line":84,"column":7}},"21":{"start":{"line":83,"column":8},"end":{"line":83,"column":14}},"22":{"start":{"line":87,"column":6},"end":{"line":89,"column":7}},"23":{"start":{"line":88,"column":8},"end":{"line":88,"column":14}},"24":{"start":{"line":92,"column":6},"end":{"line":99,"column":7}},"25":{"start":{"line":98,"column":8},"end":{"line":98,"column":14}},"26":{"start":{"line":101,"column":6},"end":{"line":101,"column":45}},"27":{"start":{"line":102,"column":6},"end":{"line":102,"column":40}},"28":{"start":{"line":106,"column":6},"end":{"line":111,"column":7}},"29":{"start":{"line":110,"column":8},"end":{"line":110,"column":14}},"30":{"start":{"line":114,"column":6},"end":{"line":121,"column":7}},"31":{"start":{"line":120,"column":8},"end":{"line":120,"column":14}},"32":{"start":{"line":124,"column":6},"end":{"line":129,"column":7}},"33":{"start":{"line":128,"column":8},"end":{"line":128,"column":14}},"34":{"start":{"line":131,"column":6},"end":{"line":131,"column":65}},"35":{"start":{"line":132,"column":6},"end":{"line":134,"column":15}},"36":{"start":{"line":137,"column":6},"end":{"line":154,"column":7}},"37":{"start":{"line":153,"column":8},"end":{"line":153,"column":54}},"38":{"start":{"line":157,"column":6},"end":{"line":159,"column":7}},"39":{"start":{"line":158,"column":8},"end":{"line":158,"column":14}},"40":{"start":{"line":161,"column":6},"end":{"line":163,"column":27}},"41":{"start":{"line":165,"column":6},"end":{"line":165,"column":57}},"42":{"start":{"line":167,"column":6},"end":{"line":170,"column":7}},"43":{"start":{"line":168,"column":8},"end":{"line":169,"column":44}},"44":{"start":{"line":172,"column":6},"end":{"line":177,"column":7}},"45":{"start":{"line":173,"column":8},"end":{"line":176,"column":30}},"46":{"start":{"line":179,"column":6},"end":{"line":185,"column":7}},"47":{"start":{"line":180,"column":8},"end":{"line":184,"column":45}},"48":{"start":{"line":187,"column":6},"end":{"line":191,"column":7}},"49":{"start":{"line":188,"column":8},"end":{"line":190,"column":46}},"50":{"start":{"line":193,"column":6},"end":{"line":196,"column":7}},"51":{"start":{"line":194,"column":8},"end":{"line":195,"column":43}},"52":{"start":{"line":201,"column":0},"end":{"line":201,"column":24}},"53":{"start":{"line":202,"column":0},"end":{"line":202,"column":24}},"54":{"start":{"line":203,"column":0},"end":{"line":203,"column":21}}},"branchMap":{"1":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"2":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"3":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":53}},{"start":{"line":56,"column":9},"end":{"line":56,"column":56}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"5":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":58}},{"start":{"line":69,"column":9},"end":{"line":69,"column":61}}]},"6":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":6},"end":{"line":82,"column":6}},{"start":{"line":82,"column":6},"end":{"line":82,"column":6}}]},"7":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":6},"end":{"line":87,"column":6}},{"start":{"line":87,"column":6},"end":{"line":87,"column":6}}]},"8":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":6},"end":{"line":92,"column":6}},{"start":{"line":92,"column":6},"end":{"line":92,"column":6}}]},"9":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":60}},{"start":{"line":94,"column":11},"end":{"line":94,"column":28}},{"start":{"line":95,"column":11},"end":{"line":95,"column":73}},{"start":{"line":96,"column":11},"end":{"line":96,"column":28}}]},"10":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":6},"end":{"line":106,"column":6}},{"start":{"line":106,"column":6},"end":{"line":106,"column":6}}]},"11":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":8},"end":{"line":107,"column":80}},{"start":{"line":108,"column":11},"end":{"line":108,"column":46}}]},"12":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]},"13":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":55}},{"start":{"line":116,"column":11},"end":{"line":116,"column":19}},{"start":{"line":117,"column":11},"end":{"line":117,"column":60}},{"start":{"line":118,"column":11},"end":{"line":118,"column":19}}]},"14":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":6},"end":{"line":124,"column":6}},{"start":{"line":124,"column":6},"end":{"line":124,"column":6}}]},"15":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":58}},{"start":{"line":126,"column":11},"end":{"line":126,"column":27}}]},"16":{"line":132,"type":"cond-expr","locations":[{"start":{"line":133,"column":10},"end":{"line":133,"column":14}},{"start":{"line":134,"column":10},"end":{"line":134,"column":15}}]},"17":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":6},"end":{"line":137,"column":6}},{"start":{"line":137,"column":6},"end":{"line":137,"column":6}}]},"18":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":8},"end":{"line":138,"column":60}},{"start":{"line":139,"column":11},"end":{"line":139,"column":28}},{"start":{"line":140,"column":11},"end":{"line":140,"column":58}},{"start":{"line":141,"column":11},"end":{"line":141,"column":19}},{"start":{"line":142,"column":11},"end":{"line":142,"column":60}},{"start":{"line":143,"column":11},"end":{"line":143,"column":19}},{"start":{"line":144,"column":11},"end":{"line":144,"column":60}},{"start":{"line":145,"column":11},"end":{"line":145,"column":26}},{"start":{"line":146,"column":11},"end":{"line":146,"column":63}},{"start":{"line":147,"column":11},"end":{"line":147,"column":38}},{"start":{"line":148,"column":11},"end":{"line":148,"column":73}},{"start":{"line":149,"column":11},"end":{"line":149,"column":38}},{"start":{"line":150,"column":11},"end":{"line":150,"column":83}},{"start":{"line":151,"column":11},"end":{"line":151,"column":46}}]},"19":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":6},"end":{"line":157,"column":6}},{"start":{"line":157,"column":6},"end":{"line":157,"column":6}}]},"20":{"line":161,"type":"cond-expr","locations":[{"start":{"line":162,"column":10},"end":{"line":162,"column":27}},{"start":{"line":163,"column":10},"end":{"line":163,"column":27}}]},"21":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":15},"end":{"line":168,"column":27}},{"start":{"line":169,"column":13},"end":{"line":169,"column":44}}]},"22":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":15},"end":{"line":173,"column":27}},{"start":{"line":174,"column":13},"end":{"line":174,"column":43}},{"start":{"line":175,"column":13},"end":{"line":175,"column":36}},{"start":{"line":176,"column":13},"end":{"line":176,"column":30}}]},"23":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":15},"end":{"line":180,"column":32}},{"start":{"line":181,"column":13},"end":{"line":181,"column":25}},{"start":{"line":182,"column":13},"end":{"line":182,"column":36}},{"start":{"line":183,"column":13},"end":{"line":183,"column":43}},{"start":{"line":184,"column":13},"end":{"line":184,"column":45}}]},"24":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":15},"end":{"line":188,"column":27}},{"start":{"line":189,"column":13},"end":{"line":189,"column":43}},{"start":{"line":190,"column":13},"end":{"line":190,"column":46}}]},"25":{"line":194,"type":"binary-expr","locations":[{"start":{"line":194,"column":15},"end":{"line":194,"column":23}},{"start":{"line":195,"column":13},"end":{"line":195,"column":43}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyLine = require(\"../../utils/hasEmptyLine\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"at-rule-empty-line-before\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected empty line before at-rule\",","  rejected: \"Unexpected empty line before at-rule\",","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    }, {","      actual: options,","      possible: {","        except: [","          \"after-same-name\",","          \"all-nested\",","          \"inside-block\",","          \"blockless-after-same-name-blockless\",","          \"blockless-group\",","          \"blockless-after-blockless\",","          \"first-nested\",","        ],","        ignore: [","          \"after-comment\",","          \"all-nested\",","          \"inside-block\",","          \"blockless-after-same-name-blockless\",","          \"blockless-group\",","          \"blockless-after-blockless\",","        ],","        ignoreAtRules: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    if (","      optionsMatches(options, \"ignore\", \"all-nested\")","      || optionsMatches(options, \"except\", \"all-nested\")","    ) {","      result.warn((","        \"'at-rule-empty-line-before\\'s' \\\"all-nested\\\" option has been deprecated and in 8.0 will be removed. \" +","        \"Instead use the \\\"inside-block\\\" option.\"","      ), {","        stylelintType: \"deprecation\",","        stylelintReference: \"https://stylelint.io/user-guide/rules/at-rule-empty-line-before/\",","      })","    }","","    if (","      optionsMatches(options, \"ignore\", \"blockless-group\")","      || optionsMatches(options, \"except\", \"blockless-group\")","    ) {","      result.warn((","        \"'at-rule-empty-line-before\\'s' \\\"blockless-group\\\" option has been deprecated and in 8.0 will be removed. \" +","        \"Instead use the \\\"blockless-after-blockless\\\" option.\"","      ), {","        stylelintType: \"deprecation\",","        stylelintReference: \"https://stylelint.io/user-guide/rules/at-rule-empty-line-before/\",","      })","    }","","    root.walkAtRules(atRule => {","      // Ignore the first node","      if (atRule === root.first) {","        return","      }","","      // Return early if at-rule is to be ignored","      if (optionsMatches(options, \"ignoreAtRules\", atRule.name)) {","        return","      }","","      // Optionally ignore the expectation if the node is blockless","      if (","        optionsMatches(options, \"ignore\", \"blockless-group\")","        && !hasBlock(atRule)","        || optionsMatches(options, \"ignore\", \"blockless-after-blockless\")","        && !hasBlock(atRule)","      ) {","        return","      }","","      const isNested = atRule.parent !== root","      const previousNode = atRule.prev()","","      // Optionally ignore the expection if the node is blockless","      // and following another blockless at-rule with the same name","      if (","        optionsMatches(options, \"ignore\", \"blockless-after-same-name-blockless\")","        && isBlocklessAfterSameNameBlockless()","      ) {","        return","      }","","      // Optionally ignore the expectation if the node is inside a block","      if (","        optionsMatches(options, \"ignore\", \"all-nested\")","        && isNested","        || optionsMatches(options, \"ignore\", \"inside-block\")","        && isNested","      ) {","        return","      }","","      // Optionally ignore the expectation if a comment precedes this node","      if (","        optionsMatches(options, \"ignore\", \"after-comment\")","        && isAfterComment()","      ) {","        return","      }","","      const hasEmptyLineBefore = hasEmptyLine(atRule.raws.before)","      let expectEmptyLineBefore = expectation === \"always\"","        ? true","        : false","","      // Optionally reverse the expectation if any exceptions apply","      if (","        optionsMatches(options, \"except\", \"after-same-name\")","        && isAfterSameName()","        || optionsMatches(options, \"except\", \"all-nested\")","        && isNested","        || optionsMatches(options, \"except\", \"inside-block\")","        && isNested","        || optionsMatches(options, \"except\", \"first-nested\")","        && isFirstNested()","        || optionsMatches(options, \"except\", \"blockless-group\")","        && isBlocklessAfterBlockless()","        || optionsMatches(options, \"except\", \"blockless-after-blockless\")","        && isBlocklessAfterBlockless()","        || optionsMatches(options, \"except\", \"blockless-after-same-name-blockless\")","        && isBlocklessAfterSameNameBlockless()","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Return if the expectation is met","      if (expectEmptyLineBefore === hasEmptyLineBefore) {","        return","      }","","      const message = expectEmptyLineBefore","        ? messages.expected","        : messages.rejected","","      report({ message, node: atRule, result, ruleName })","","      function isAfterComment() {","        return previousNode","          && previousNode.type === \"comment\"","      }","","      function isBlocklessAfterBlockless() {","        return previousNode","          && previousNode.type === \"atrule\"","          && !hasBlock(previousNode)","          && !hasBlock(atRule)","      }","","      function isBlocklessAfterSameNameBlockless() {","        return !hasBlock(atRule)","          && previousNode","          && !hasBlock(previousNode)","          && previousNode.type === \"atrule\"","          && previousNode.name == atRule.name","      }","","      function isAfterSameName() {","        return previousNode","          && previousNode.type === \"atrule\"","          && previousNode.name === atRule.name","      }","","      function isFirstNested() {","        return isNested","          && atRule === atRule.parent.first","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"18":1,"19":0,"20":0,"50":0,"51":0,"54":0,"58":0,"67":0,"71":0,"80":0,"82":0,"83":0,"87":0,"88":0,"92":0,"98":0,"101":0,"102":0,"106":0,"110":0,"114":0,"120":0,"124":0,"128":0,"131":0,"132":0,"137":0,"153":0,"157":0,"158":0,"161":0,"165":0,"167":1,"168":0,"172":1,"173":0,"179":1,"180":0,"187":1,"188":0,"193":1,"194":0,"201":1,"202":1,"203":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasBlock.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasBlock.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":12,"column":15}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":14,"column":1}},"2":{"start":{"line":13,"column":2},"end":{"line":13,"column":38}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Check if a statement has an block (empty or otherwise)."," *"," * @param {Rule|AtRule} statement - postcss rule or at-rule node"," * @return {boolean} True if `statement` has a block (empty or otherwise)"," */","module.exports = function (","  statement/*: postcss$rule | postcss$atRule*/",")/*: boolean*/ {","  return statement.nodes !== undefined","}",""],"l":{"10":1,"13":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasEmptyLine.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasEmptyLine.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":64}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":10,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":57}},"3":{"start":{"line":8,"column":45},"end":{"line":8,"column":57}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}}},"branchMap":{"1":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":2},"end":{"line":8,"column":2}},{"start":{"line":8,"column":2},"end":{"line":8,"column":2}}]},"2":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":6},"end":{"line":8,"column":19}},{"start":{"line":8,"column":23},"end":{"line":8,"column":43}}]},"3":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":9},"end":{"line":9,"column":38}},{"start":{"line":9,"column":42},"end":{"line":9,"column":73}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check if a string contains at least one empty line"," */","module.exports = function (string/*:: ?: string*/)/*: boolean*/ {","  if (string === \"\" || string === undefined) return false","  return string.indexOf(\"\\n\\n\") !== -1 || string.indexOf(\"\\n\\r\\n\") !== -1","}",""],"l":{"7":1,"8":0,"9":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/optionsMatches.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/optionsMatches.js","s":{"1":1,"2":1,"3":0},"b":{"1":[0,0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"optionsMatches","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":14,"column":15}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":64}},"2":{"start":{"line":10,"column":0},"end":{"line":16,"column":1}},"3":{"start":{"line":15,"column":2},"end":{"line":15,"column":143}}},"branchMap":{"1":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":12},"end":{"line":15,"column":19}},{"start":{"line":15,"column":23},"end":{"line":15,"column":44}},{"start":{"line":15,"column":48},"end":{"line":15,"column":73}},{"start":{"line":15,"column":77},"end":{"line":15,"column":142}}]}},"code":["/* @flow */","\"use strict\"","","const matchesStringOrRegExp = require(\"./matchesStringOrRegExp\")","","/**"," * Check if an options object's propertyName contains a user-defined string or"," * regex that matches the passed in input."," */","module.exports = function optionsMatches(","  options/*: Object*/,","  propertyName/*: string*/,","  input/*: string*/",")/*: boolean*/ {","  return !!(options && options[propertyName] && typeof input === \"string\" && matchesStringOrRegExp(input.toLowerCase(), options[propertyName]))","}",""],"l":{"4":1,"10":1,"15":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/matchesStringOrRegExp.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/matchesStringOrRegExp.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"matchesStringOrRegExp","line":12,"loc":{"start":{"line":12,"column":17},"end":{"line":15,"column":49}}},"2":{"name":"testAgainstStringOrArray","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":53}}},"3":{"name":"testAgainstString","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":46}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":28,"column":1}},"2":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"3":{"start":{"line":17,"column":4},"end":{"line":17,"column":54}},"4":{"start":{"line":20,"column":2},"end":{"line":25,"column":3}},"5":{"start":{"line":21,"column":4},"end":{"line":21,"column":70}},"6":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"7":{"start":{"line":23,"column":6},"end":{"line":23,"column":23}},"8":{"start":{"line":27,"column":2},"end":{"line":27,"column":14}},"9":{"start":{"line":30,"column":0},"end":{"line":42,"column":1}},"10":{"start":{"line":31,"column":2},"end":{"line":33,"column":3}},"11":{"start":{"line":32,"column":4},"end":{"line":32,"column":47}},"12":{"start":{"line":35,"column":2},"end":{"line":40,"column":3}},"13":{"start":{"line":36,"column":4},"end":{"line":36,"column":63}},"14":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"15":{"start":{"line":38,"column":6},"end":{"line":38,"column":23}},"16":{"start":{"line":41,"column":2},"end":{"line":41,"column":14}},"17":{"start":{"line":44,"column":0},"end":{"line":53,"column":1}},"18":{"start":{"line":45,"column":2},"end":{"line":45,"column":94}},"19":{"start":{"line":47,"column":2},"end":{"line":50,"column":3}},"20":{"start":{"line":48,"column":4},"end":{"line":48,"column":72}},"21":{"start":{"line":49,"column":4},"end":{"line":49,"column":71}},"22":{"start":{"line":52,"column":2},"end":{"line":52,"column":77}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"5":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":28},"end":{"line":45,"column":49}},{"start":{"line":45,"column":53},"end":{"line":45,"column":94}}]},"6":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"7":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":26},"end":{"line":49,"column":63}},{"start":{"line":49,"column":66},"end":{"line":49,"column":71}}]},"8":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":32},"end":{"line":52,"column":69}},{"start":{"line":52,"column":72},"end":{"line":52,"column":77}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Compares a string to a second value that, if it fits a certain convention,"," * is converted to a regular expression before the comparison."," * If it doesn't fit the convention, then two strings are compared."," *"," * Any strings starting and ending with `/` are interpreted"," * as regular expressions."," */","module.exports = function matchesStringOrRegExp(","  input/*: string | Array<string>*/,","  comparison/*: string | Array<string>*/",")/*: false | { match: string, pattern: string}*/ {","  if (!Array.isArray(input)) {","    return testAgainstStringOrArray(input, comparison)","  }","","  for (const inputItem of input) {","    const testResult = testAgainstStringOrArray(inputItem, comparison)","    if (testResult) {","      return testResult","    }","  }","","  return false","}","","function testAgainstStringOrArray(value, comparison) {","  if (!Array.isArray(comparison)) {","    return testAgainstString(value, comparison)","  }","","  for (const comparisonItem of comparison) {","    const testResult = testAgainstString(value, comparisonItem)","    if (testResult) {","      return testResult","    }","  }","  return false","}","","function testAgainstString(value, comparison) {","  const comparisonIsRegex = comparison[0] === \"/\" && comparison[comparison.length - 1] === \"/\"","","  if (comparisonIsRegex) {","    const valueMatches = new RegExp(comparison.slice(1, -1)).test(value)","    return valueMatches ? { match: value, pattern: comparison } : false","  }","","  return value === comparison ? { match: value, pattern: comparison } : false","}",""],"l":{"12":1,"16":0,"17":0,"20":0,"21":0,"22":0,"23":0,"27":0,"30":1,"31":0,"32":0,"35":0,"36":0,"37":0,"38":0,"41":0,"44":1,"45":0,"47":0,"48":0,"49":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-name-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-name-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":10,"column":34},"end":{"line":10,"column":76}},"7":{"start":{"line":13,"column":0},"end":{"line":45,"column":1}},"8":{"start":{"line":14,"column":2},"end":{"line":44,"column":3}},"9":{"start":{"line":15,"column":4},"end":{"line":21,"column":6}},"10":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"11":{"start":{"line":23,"column":6},"end":{"line":23,"column":12}},"12":{"start":{"line":26,"column":4},"end":{"line":43,"column":6}},"13":{"start":{"line":27,"column":6},"end":{"line":27,"column":30}},"14":{"start":{"line":29,"column":6},"end":{"line":31,"column":28}},"15":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"16":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"17":{"start":{"line":37,"column":6},"end":{"line":42,"column":8}},"18":{"start":{"line":47,"column":0},"end":{"line":47,"column":24}},"19":{"start":{"line":48,"column":0},"end":{"line":48,"column":24}},"20":{"start":{"line":49,"column":0},"end":{"line":49,"column":21}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":29,"type":"cond-expr","locations":[{"start":{"line":30,"column":10},"end":{"line":30,"column":28}},{"start":{"line":31,"column":10},"end":{"line":31,"column":28}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"at-rule-name-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      const name = atRule.name","","      const expectedName = expectation === \"lower\"","        ? name.toLowerCase()","        : name.toUpperCase()","","      if (name === expectedName) {","        return","      }","","      report({","        message: messages.expected(name, expectedName),","        node: atRule,","        ruleName,","        result,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"10":0,"13":1,"14":0,"15":0,"22":0,"23":0,"26":0,"27":0,"29":0,"33":0,"34":0,"37":0,"47":1,"48":1,"49":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-name-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-name-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":67}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":66}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":45}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":11,"column":25},"end":{"line":11,"column":74}},"8":{"start":{"line":14,"column":0},"end":{"line":35,"column":1}},"9":{"start":{"line":15,"column":2},"end":{"line":15,"column":69}},"10":{"start":{"line":16,"column":2},"end":{"line":34,"column":3}},"11":{"start":{"line":17,"column":4},"end":{"line":23,"column":6}},"12":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"13":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"14":{"start":{"line":28,"column":4},"end":{"line":33,"column":6}},"15":{"start":{"line":37,"column":0},"end":{"line":37,"column":24}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]}},"code":["\"use strict\"","","const atRuleNameSpaceChecker = require(\"../atRuleNameSpaceChecker\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"at-rule-name-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: name => `Expected newline after at-rule name \\\"${name}\\\"`,","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    atRuleNameSpaceChecker({","      root,","      result,","      locationChecker: checker.afterOneOnly,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"14":1,"15":0,"16":0,"17":0,"24":0,"25":0,"28":0,"37":1,"38":1,"39":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/atRuleNameSpaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/atRuleNameSpaceChecker.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":17},"end":{"line":6,"column":36}}},"2":{"name":"checkColon","line":15,"loc":{"start":{"line":15,"column":2},"end":{"line":15,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":73}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":41}},"3":{"start":{"line":6,"column":0},"end":{"line":29,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":13,"column":4}},"5":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"6":{"start":{"line":9,"column":6},"end":{"line":9,"column":12}},"7":{"start":{"line":12,"column":4},"end":{"line":12,"column":109}},"8":{"start":{"line":15,"column":2},"end":{"line":28,"column":3}},"9":{"start":{"line":16,"column":4},"end":{"line":27,"column":6}},"10":{"start":{"line":19,"column":16},"end":{"line":25,"column":8}}},"branchMap":{"1":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":8,"column":4}},{"start":{"line":8,"column":4},"end":{"line":8,"column":4}}]},"2":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":34},"end":{"line":12,"column":55}},{"start":{"line":12,"column":59},"end":{"line":12,"column":61}}]}},"code":["\"use strict\"","","const isStandardSyntaxAtRule = require(\"../utils/isStandardSyntaxAtRule\")","const report = require(\"../utils/report\")","","module.exports = function (options) {","  options.root.walkAtRules(atRule => {","    if (!isStandardSyntaxAtRule(atRule)) {","      return","    }","","    checkColon(`@${atRule.name}${(atRule.raws.afterName || \"\")}${atRule.params}`, atRule.name.length, atRule)","  })","","  function checkColon(source, index, node) {","    options.locationChecker({","      source,","      index,","      err: m => report({","        message: m,","        node,","        index,","        result: options.result,","        ruleName: options.checkedRuleName,","      }),","      errTarget: `@${node.name}`,","    })","  }","}",""],"l":{"3":1,"4":1,"6":1,"7":0,"8":0,"9":0,"12":0,"15":1,"16":0,"19":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxAtRule.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxAtRule.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":68}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":22,"column":1}},"2":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":16}},"4":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":16}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":13}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":6},"end":{"line":12,"column":19}},{"start":{"line":12,"column":23},"end":{"line":12,"column":43}}]},"3":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]},"4":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":6},"end":{"line":17,"column":19}},{"start":{"line":17,"column":23},"end":{"line":17,"column":51}},{"start":{"line":17,"column":55},"end":{"line":17,"column":79}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a at-rule is standard"," *"," * @param {atRule} postcss at-rule node"," * @return {boolean} If `true`, the declaration is standard"," */","module.exports = function (atRule/*: postcss$atRule*/)/*: boolean*/ {","  // Ignore scss `@content` inside mixins","  if (!atRule.nodes && atRule.params === \"\") {","    return false","  }","","  // Ignore detached ruleset `@detached-ruleset: { background: red; }; .top { @detached-ruleset(); }`","  if (!atRule.nodes && atRule.raws.afterName === \"\" && atRule.params[0] === \"(\") {","    return false","  }","","  return true","}",""],"l":{"10":1,"12":0,"13":0,"17":0,"18":0,"21":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/whitespaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/whitespaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":1,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":1,"106":0,"107":1,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":1,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":17},"end":{"line":45,"column":4}}},"2":{"name":"before","line":76,"loc":{"start":{"line":76,"column":2},"end":{"line":76,"column":24}}},"3":{"name":"after","line":128,"loc":{"start":{"line":128,"column":2},"end":{"line":128,"column":23}}},"4":{"name":"beforeAllowingIndentation","line":173,"loc":{"start":{"line":173,"column":2},"end":{"line":173,"column":42}}},"5":{"name":"expectBefore","line":177,"loc":{"start":{"line":177,"column":2},"end":{"line":177,"column":26}}},"6":{"name":"expectBeforeAllowingIndentation","line":205,"loc":{"start":{"line":205,"column":2},"end":{"line":205,"column":45}}},"7":{"name":"(anonymous_7)","line":212,"loc":{"start":{"line":212,"column":25},"end":{"line":212,"column":37}}},"8":{"name":"rejectBefore","line":228,"loc":{"start":{"line":228,"column":2},"end":{"line":228,"column":26}}},"9":{"name":"afterOneOnly","line":241,"loc":{"start":{"line":241,"column":2},"end":{"line":241,"column":29}}},"10":{"name":"expectAfter","line":245,"loc":{"start":{"line":245,"column":2},"end":{"line":245,"column":25}}},"11":{"name":"rejectAfter","line":283,"loc":{"start":{"line":283,"column":2},"end":{"line":283,"column":25}}},"12":{"name":"isValue","line":304,"loc":{"start":{"line":304,"column":0},"end":{"line":304,"column":20}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":58}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":46}},"4":{"start":{"line":35,"column":0},"end":{"line":302,"column":1}},"5":{"start":{"line":49,"column":2},"end":{"line":49,"column":16}},"6":{"start":{"line":76,"column":2},"end":{"line":120,"column":3}},"7":{"start":{"line":77,"column":4},"end":{"line":77,"column":30}},"8":{"start":{"line":78,"column":4},"end":{"line":78,"column":28}},"9":{"start":{"line":79,"column":4},"end":{"line":79,"column":24}},"10":{"start":{"line":80,"column":4},"end":{"line":80,"column":36}},"11":{"start":{"line":81,"column":4},"end":{"line":81,"column":42}},"12":{"start":{"line":82,"column":4},"end":{"line":82,"column":81}},"13":{"start":{"line":83,"column":4},"end":{"line":83,"column":96}},"14":{"start":{"line":85,"column":4},"end":{"line":85,"column":81}},"15":{"start":{"line":86,"column":4},"end":{"line":119,"column":5}},"16":{"start":{"line":88,"column":8},"end":{"line":88,"column":22}},"17":{"start":{"line":89,"column":8},"end":{"line":89,"column":13}},"18":{"start":{"line":91,"column":8},"end":{"line":91,"column":22}},"19":{"start":{"line":92,"column":8},"end":{"line":92,"column":13}},"20":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"21":{"start":{"line":95,"column":10},"end":{"line":95,"column":16}},"22":{"start":{"line":97,"column":8},"end":{"line":97,"column":55}},"23":{"start":{"line":98,"column":8},"end":{"line":98,"column":13}},"24":{"start":{"line":100,"column":8},"end":{"line":102,"column":9}},"25":{"start":{"line":101,"column":10},"end":{"line":101,"column":16}},"26":{"start":{"line":103,"column":8},"end":{"line":103,"column":55}},"27":{"start":{"line":104,"column":8},"end":{"line":104,"column":13}},"28":{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},"29":{"start":{"line":107,"column":10},"end":{"line":107,"column":16}},"30":{"start":{"line":109,"column":8},"end":{"line":109,"column":54}},"31":{"start":{"line":110,"column":8},"end":{"line":110,"column":13}},"32":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"33":{"start":{"line":113,"column":10},"end":{"line":113,"column":16}},"34":{"start":{"line":115,"column":8},"end":{"line":115,"column":54}},"35":{"start":{"line":116,"column":8},"end":{"line":116,"column":13}},"36":{"start":{"line":118,"column":8},"end":{"line":118,"column":72}},"37":{"start":{"line":128,"column":2},"end":{"line":171,"column":3}},"38":{"start":{"line":129,"column":4},"end":{"line":129,"column":30}},"39":{"start":{"line":130,"column":4},"end":{"line":130,"column":28}},"40":{"start":{"line":131,"column":4},"end":{"line":131,"column":24}},"41":{"start":{"line":132,"column":4},"end":{"line":132,"column":36}},"42":{"start":{"line":133,"column":4},"end":{"line":133,"column":42}},"43":{"start":{"line":134,"column":4},"end":{"line":134,"column":81}},"44":{"start":{"line":136,"column":4},"end":{"line":136,"column":63}},"45":{"start":{"line":137,"column":4},"end":{"line":170,"column":5}},"46":{"start":{"line":139,"column":8},"end":{"line":139,"column":21}},"47":{"start":{"line":140,"column":8},"end":{"line":140,"column":13}},"48":{"start":{"line":142,"column":8},"end":{"line":142,"column":21}},"49":{"start":{"line":143,"column":8},"end":{"line":143,"column":13}},"50":{"start":{"line":145,"column":8},"end":{"line":147,"column":9}},"51":{"start":{"line":146,"column":10},"end":{"line":146,"column":16}},"52":{"start":{"line":148,"column":8},"end":{"line":148,"column":53}},"53":{"start":{"line":149,"column":8},"end":{"line":149,"column":13}},"54":{"start":{"line":151,"column":8},"end":{"line":153,"column":9}},"55":{"start":{"line":152,"column":10},"end":{"line":152,"column":16}},"56":{"start":{"line":154,"column":8},"end":{"line":154,"column":53}},"57":{"start":{"line":155,"column":8},"end":{"line":155,"column":13}},"58":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"59":{"start":{"line":158,"column":10},"end":{"line":158,"column":16}},"60":{"start":{"line":160,"column":8},"end":{"line":160,"column":52}},"61":{"start":{"line":161,"column":8},"end":{"line":161,"column":13}},"62":{"start":{"line":163,"column":8},"end":{"line":165,"column":9}},"63":{"start":{"line":164,"column":10},"end":{"line":164,"column":16}},"64":{"start":{"line":166,"column":8},"end":{"line":166,"column":52}},"65":{"start":{"line":167,"column":8},"end":{"line":167,"column":13}},"66":{"start":{"line":169,"column":8},"end":{"line":169,"column":72}},"67":{"start":{"line":173,"column":2},"end":{"line":175,"column":3}},"68":{"start":{"line":174,"column":4},"end":{"line":174,"column":62}},"69":{"start":{"line":177,"column":2},"end":{"line":203,"column":3}},"70":{"start":{"line":178,"column":4},"end":{"line":178,"column":115}},"71":{"start":{"line":180,"column":4},"end":{"line":183,"column":5}},"72":{"start":{"line":181,"column":6},"end":{"line":181,"column":50}},"73":{"start":{"line":182,"column":6},"end":{"line":182,"column":12}},"74":{"start":{"line":185,"column":4},"end":{"line":185,"column":34}},"75":{"start":{"line":186,"column":4},"end":{"line":187,"column":31}},"76":{"start":{"line":189,"column":4},"end":{"line":189,"column":43}},"77":{"start":{"line":190,"column":4},"end":{"line":190,"column":44}},"78":{"start":{"line":192,"column":4},"end":{"line":194,"column":5}},"79":{"start":{"line":193,"column":6},"end":{"line":193,"column":12}},"80":{"start":{"line":196,"column":4},"end":{"line":200,"column":5}},"81":{"start":{"line":197,"column":6},"end":{"line":199,"column":7}},"82":{"start":{"line":198,"column":8},"end":{"line":198,"column":14}},"83":{"start":{"line":202,"column":4},"end":{"line":202,"column":92}},"84":{"start":{"line":205,"column":2},"end":{"line":226,"column":3}},"85":{"start":{"line":206,"column":4},"end":{"line":206,"column":115}},"86":{"start":{"line":207,"column":4},"end":{"line":207,"column":35}},"87":{"start":{"line":208,"column":4},"end":{"line":210,"column":28}},"88":{"start":{"line":212,"column":4},"end":{"line":216,"column":7}},"89":{"start":{"line":213,"column":6},"end":{"line":215,"column":7}},"90":{"start":{"line":214,"column":8},"end":{"line":214,"column":19}},"91":{"start":{"line":217,"column":4},"end":{"line":217,"column":21}},"92":{"start":{"line":218,"column":4},"end":{"line":225,"column":5}},"93":{"start":{"line":219,"column":6},"end":{"line":222,"column":7}},"94":{"start":{"line":220,"column":8},"end":{"line":220,"column":11}},"95":{"start":{"line":221,"column":8},"end":{"line":221,"column":16}},"96":{"start":{"line":223,"column":6},"end":{"line":223,"column":83}},"97":{"start":{"line":224,"column":6},"end":{"line":224,"column":12}},"98":{"start":{"line":228,"column":2},"end":{"line":239,"column":3}},"99":{"start":{"line":229,"column":4},"end":{"line":229,"column":115}},"100":{"start":{"line":230,"column":4},"end":{"line":230,"column":35}},"101":{"start":{"line":231,"column":4},"end":{"line":232,"column":32}},"102":{"start":{"line":234,"column":4},"end":{"line":234,"column":43}},"103":{"start":{"line":236,"column":4},"end":{"line":238,"column":5}},"104":{"start":{"line":237,"column":6},"end":{"line":237,"column":94}},"105":{"start":{"line":241,"column":2},"end":{"line":243,"column":3}},"106":{"start":{"line":242,"column":4},"end":{"line":242,"column":56}},"107":{"start":{"line":245,"column":2},"end":{"line":281,"column":3}},"108":{"start":{"line":246,"column":4},"end":{"line":246,"column":114}},"109":{"start":{"line":247,"column":4},"end":{"line":247,"column":35}},"110":{"start":{"line":248,"column":4},"end":{"line":249,"column":32}},"111":{"start":{"line":251,"column":4},"end":{"line":251,"column":42}},"112":{"start":{"line":252,"column":4},"end":{"line":252,"column":43}},"113":{"start":{"line":254,"column":4},"end":{"line":256,"column":5}},"114":{"start":{"line":255,"column":6},"end":{"line":255,"column":12}},"115":{"start":{"line":258,"column":4},"end":{"line":272,"column":5}},"116":{"start":{"line":260,"column":6},"end":{"line":264,"column":7}},"117":{"start":{"line":261,"column":8},"end":{"line":263,"column":9}},"118":{"start":{"line":262,"column":10},"end":{"line":262,"column":16}},"119":{"start":{"line":267,"column":6},"end":{"line":271,"column":7}},"120":{"start":{"line":268,"column":8},"end":{"line":270,"column":9}},"121":{"start":{"line":269,"column":10},"end":{"line":269,"column":16}},"122":{"start":{"line":274,"column":4},"end":{"line":278,"column":5}},"123":{"start":{"line":275,"column":6},"end":{"line":277,"column":7}},"124":{"start":{"line":276,"column":8},"end":{"line":276,"column":14}},"125":{"start":{"line":280,"column":4},"end":{"line":280,"column":92}},"126":{"start":{"line":283,"column":2},"end":{"line":294,"column":3}},"127":{"start":{"line":284,"column":4},"end":{"line":284,"column":114}},"128":{"start":{"line":285,"column":4},"end":{"line":285,"column":35}},"129":{"start":{"line":286,"column":4},"end":{"line":287,"column":32}},"130":{"start":{"line":289,"column":4},"end":{"line":289,"column":42}},"131":{"start":{"line":291,"column":4},"end":{"line":293,"column":5}},"132":{"start":{"line":292,"column":6},"end":{"line":292,"column":94}},"133":{"start":{"line":296,"column":2},"end":{"line":301,"column":3}},"134":{"start":{"line":304,"column":0},"end":{"line":306,"column":1}},"135":{"start":{"line":305,"column":2},"end":{"line":305,"column":38}}},"branchMap":{"1":{"line":82,"type":"cond-expr","locations":[{"start":{"line":82,"column":57},"end":{"line":82,"column":62}},{"start":{"line":82,"column":65},"end":{"line":82,"column":81}}]},"2":{"line":83,"type":"cond-expr","locations":[{"start":{"line":83,"column":67},"end":{"line":83,"column":72}},{"start":{"line":83,"column":75},"end":{"line":83,"column":96}}]},"3":{"line":86,"type":"switch","locations":[{"start":{"line":87,"column":6},"end":{"line":89,"column":13}},{"start":{"line":90,"column":6},"end":{"line":92,"column":13}},{"start":{"line":93,"column":6},"end":{"line":98,"column":13}},{"start":{"line":99,"column":6},"end":{"line":104,"column":13}},{"start":{"line":105,"column":6},"end":{"line":110,"column":13}},{"start":{"line":111,"column":6},"end":{"line":116,"column":13}},{"start":{"line":117,"column":6},"end":{"line":118,"column":72}}]},"4":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"5":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":32},"end":{"line":94,"column":44}},{"start":{"line":94,"column":48},"end":{"line":94,"column":54}}]},"6":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":8},"end":{"line":100,"column":8}},{"start":{"line":100,"column":8},"end":{"line":100,"column":8}}]},"7":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":32},"end":{"line":100,"column":44}},{"start":{"line":100,"column":48},"end":{"line":100,"column":54}}]},"8":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":8}},{"start":{"line":106,"column":8},"end":{"line":106,"column":8}}]},"9":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":31},"end":{"line":106,"column":43}},{"start":{"line":106,"column":47},"end":{"line":106,"column":53}}]},"10":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":112,"column":8}},{"start":{"line":112,"column":8},"end":{"line":112,"column":8}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":31},"end":{"line":112,"column":43}},{"start":{"line":112,"column":47},"end":{"line":112,"column":53}}]},"12":{"line":134,"type":"cond-expr","locations":[{"start":{"line":134,"column":57},"end":{"line":134,"column":62}},{"start":{"line":134,"column":65},"end":{"line":134,"column":81}}]},"13":{"line":137,"type":"switch","locations":[{"start":{"line":138,"column":6},"end":{"line":140,"column":13}},{"start":{"line":141,"column":6},"end":{"line":143,"column":13}},{"start":{"line":144,"column":6},"end":{"line":149,"column":13}},{"start":{"line":150,"column":6},"end":{"line":155,"column":13}},{"start":{"line":156,"column":6},"end":{"line":161,"column":13}},{"start":{"line":162,"column":6},"end":{"line":167,"column":13}},{"start":{"line":168,"column":6},"end":{"line":169,"column":72}}]},"14":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":8},"end":{"line":145,"column":8}},{"start":{"line":145,"column":8},"end":{"line":145,"column":8}}]},"15":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":32},"end":{"line":145,"column":44}},{"start":{"line":145,"column":48},"end":{"line":145,"column":54}}]},"16":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":8},"end":{"line":151,"column":8}},{"start":{"line":151,"column":8},"end":{"line":151,"column":8}}]},"17":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":32},"end":{"line":151,"column":44}},{"start":{"line":151,"column":48},"end":{"line":151,"column":54}}]},"18":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":157,"column":8}},{"start":{"line":157,"column":8},"end":{"line":157,"column":8}}]},"19":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":31},"end":{"line":157,"column":43}},{"start":{"line":157,"column":47},"end":{"line":157,"column":53}}]},"20":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":8},"end":{"line":163,"column":8}},{"start":{"line":163,"column":8},"end":{"line":163,"column":8}}]},"21":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":31},"end":{"line":163,"column":43}},{"start":{"line":163,"column":47},"end":{"line":163,"column":53}}]},"22":{"line":178,"type":"cond-expr","locations":[{"start":{"line":178,"column":77},"end":{"line":178,"column":89}},{"start":{"line":178,"column":92},"end":{"line":178,"column":115}}]},"23":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":24},"end":{"line":178,"column":44}},{"start":{"line":178,"column":48},"end":{"line":178,"column":74}}]},"24":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":4},"end":{"line":180,"column":4}},{"start":{"line":180,"column":4},"end":{"line":180,"column":4}}]},"25":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":192,"column":4}},{"start":{"line":192,"column":4},"end":{"line":192,"column":4}}]},"26":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":4},"end":{"line":196,"column":4}},{"start":{"line":196,"column":4},"end":{"line":196,"column":4}}]},"27":{"line":196,"type":"binary-expr","locations":[{"start":{"line":196,"column":8},"end":{"line":196,"column":36}},{"start":{"line":196,"column":40},"end":{"line":196,"column":61}}]},"28":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":6},"end":{"line":197,"column":6}},{"start":{"line":197,"column":6},"end":{"line":197,"column":6}}]},"29":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":10},"end":{"line":197,"column":32}},{"start":{"line":197,"column":36},"end":{"line":197,"column":65}}]},"30":{"line":202,"type":"cond-expr","locations":[{"start":{"line":202,"column":54},"end":{"line":202,"column":74}},{"start":{"line":202,"column":77},"end":{"line":202,"column":90}}]},"31":{"line":206,"type":"cond-expr","locations":[{"start":{"line":206,"column":77},"end":{"line":206,"column":89}},{"start":{"line":206,"column":92},"end":{"line":206,"column":115}}]},"32":{"line":206,"type":"binary-expr","locations":[{"start":{"line":206,"column":24},"end":{"line":206,"column":44}},{"start":{"line":206,"column":48},"end":{"line":206,"column":74}}]},"33":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":6},"end":{"line":213,"column":6}},{"start":{"line":213,"column":6},"end":{"line":213,"column":6}}]},"34":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":6},"end":{"line":219,"column":6}},{"start":{"line":219,"column":6},"end":{"line":219,"column":6}}]},"35":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":10},"end":{"line":219,"column":28}},{"start":{"line":219,"column":32},"end":{"line":219,"column":49}}]},"36":{"line":223,"type":"cond-expr","locations":[{"start":{"line":223,"column":45},"end":{"line":223,"column":65}},{"start":{"line":223,"column":68},"end":{"line":223,"column":81}}]},"37":{"line":229,"type":"cond-expr","locations":[{"start":{"line":229,"column":77},"end":{"line":229,"column":89}},{"start":{"line":229,"column":92},"end":{"line":229,"column":115}}]},"38":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":24},"end":{"line":229,"column":44}},{"start":{"line":229,"column":48},"end":{"line":229,"column":74}}]},"39":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":4},"end":{"line":236,"column":4}},{"start":{"line":236,"column":4},"end":{"line":236,"column":4}}]},"40":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":8},"end":{"line":236,"column":30}},{"start":{"line":236,"column":34},"end":{"line":236,"column":61}}]},"41":{"line":237,"type":"cond-expr","locations":[{"start":{"line":237,"column":56},"end":{"line":237,"column":76}},{"start":{"line":237,"column":79},"end":{"line":237,"column":92}}]},"42":{"line":246,"type":"cond-expr","locations":[{"start":{"line":246,"column":77},"end":{"line":246,"column":89}},{"start":{"line":246,"column":92},"end":{"line":246,"column":114}}]},"43":{"line":246,"type":"binary-expr","locations":[{"start":{"line":246,"column":24},"end":{"line":246,"column":44}},{"start":{"line":246,"column":48},"end":{"line":246,"column":74}}]},"44":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":4},"end":{"line":254,"column":4}},{"start":{"line":254,"column":4},"end":{"line":254,"column":4}}]},"45":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":4},"end":{"line":258,"column":4}},{"start":{"line":258,"column":4},"end":{"line":258,"column":4}}]},"46":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":6},"end":{"line":260,"column":6}},{"start":{"line":260,"column":6},"end":{"line":260,"column":6}}]},"47":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":10},"end":{"line":260,"column":31}},{"start":{"line":260,"column":35},"end":{"line":260,"column":57}}]},"48":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":8},"end":{"line":261,"column":8}},{"start":{"line":261,"column":8},"end":{"line":261,"column":8}}]},"49":{"line":261,"type":"binary-expr","locations":[{"start":{"line":261,"column":12},"end":{"line":261,"column":34}},{"start":{"line":261,"column":38},"end":{"line":261,"column":70}}]},"50":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":6},"end":{"line":267,"column":6}},{"start":{"line":267,"column":6},"end":{"line":267,"column":6}}]},"51":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":8},"end":{"line":268,"column":8}},{"start":{"line":268,"column":8},"end":{"line":268,"column":8}}]},"52":{"line":268,"type":"binary-expr","locations":[{"start":{"line":268,"column":12},"end":{"line":268,"column":34}},{"start":{"line":268,"column":38},"end":{"line":268,"column":66}}]},"53":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":4},"end":{"line":274,"column":4}},{"start":{"line":274,"column":4},"end":{"line":274,"column":4}}]},"54":{"line":274,"type":"binary-expr","locations":[{"start":{"line":274,"column":8},"end":{"line":274,"column":36}},{"start":{"line":274,"column":40},"end":{"line":274,"column":60}}]},"55":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":6},"end":{"line":275,"column":6}},{"start":{"line":275,"column":6},"end":{"line":275,"column":6}}]},"56":{"line":275,"type":"binary-expr","locations":[{"start":{"line":275,"column":10},"end":{"line":275,"column":32}},{"start":{"line":275,"column":36},"end":{"line":275,"column":64}}]},"57":{"line":280,"type":"cond-expr","locations":[{"start":{"line":280,"column":54},"end":{"line":280,"column":74}},{"start":{"line":280,"column":77},"end":{"line":280,"column":90}}]},"58":{"line":284,"type":"cond-expr","locations":[{"start":{"line":284,"column":77},"end":{"line":284,"column":89}},{"start":{"line":284,"column":92},"end":{"line":284,"column":114}}]},"59":{"line":284,"type":"binary-expr","locations":[{"start":{"line":284,"column":24},"end":{"line":284,"column":44}},{"start":{"line":284,"column":48},"end":{"line":284,"column":74}}]},"60":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":4},"end":{"line":291,"column":4}},{"start":{"line":291,"column":4},"end":{"line":291,"column":4}}]},"61":{"line":291,"type":"binary-expr","locations":[{"start":{"line":291,"column":8},"end":{"line":291,"column":29}},{"start":{"line":291,"column":33},"end":{"line":291,"column":59}}]},"62":{"line":292,"type":"cond-expr","locations":[{"start":{"line":292,"column":56},"end":{"line":292,"column":76}},{"start":{"line":292,"column":79},"end":{"line":292,"column":92}}]},"63":{"line":305,"type":"binary-expr","locations":[{"start":{"line":305,"column":9},"end":{"line":305,"column":24}},{"start":{"line":305,"column":28},"end":{"line":305,"column":38}}]}},"code":["\"use strict\"","","const configurationError = require(\"./configurationError\")","const isSingleLineString = require(\"./isSingleLineString\")","const isWhitespace = require(\"./isWhitespace\")","","/**"," * Create a whitespaceChecker, which exposes the following functions:"," * - `before()`"," * - `beforeAllowingIndentation()`"," * - `after()`"," * - `afterOneOnly()`"," *"," * @param {\"space\"|\"newline\"} targetWhitespace - This is a keyword instead"," *   of the actual character (e.g. \" \") in order to accommodate"," *   different styles of newline (\"\\n\" vs \"\\r\\n\")"," * @param {"," *     \"always\"|\"never\""," *     |\"always-single-line\"|\"always-multi-line\""," *     | \"never-single-line\"|\"never-multi-line\""," *   } expectation"," * @param {object} messages - An object of message functions;"," *   calling `before*()` or `after*()` and the `expectation` that is passed"," *   determines which message functions are required"," * @param {function} [messages.exectedBefore]"," * @param {function} [messages.rejectedBefore]"," * @param {function} [messages.expectedAfter]"," * @param {function} [messages.rejectedAfter]"," * @param {function} [messages.expectedBeforeSingleLine]"," * @param {function} [messages.rejectedBeforeSingleLine]"," * @param {function} [messages.expectedBeforeMultiLine]"," * @param {function} [messages.rejectedBeforeMultiLine]"," * @return {object} The checker, with its exposed checking functions"," */","module.exports = function (","  targetWhitespace/*: \"space\" | \"newline\"*/,","  expectation/*: \"always\" | \"never\" | \"always-single-line\"","    | \"always-multi-line\" | \"never-single-line\"|\"never-multi-line\"*/,","  messages/*: Object*/",")/*: {","  before: Function,","  beforeAllowingIndentation: Function,","  after: Function,","  afterOneOnly: Function","}*/ {","  // Keep track of active arguments in order to avoid passing","  // too much stuff around, making signatures long and confusing.","  // This variable gets reset anytime a checking function is called.","  let activeArgs","","  /**","   * Check for whitespace *before* a character.","   *","   * @param {object} args - Named arguments object","   * @param {string} args.source - The source string","   * @param {number} args.index - The index of the character to check before","   * @param {function} args.err - If a violation is found, this callback","   *   will be invoked with the relevant warning message.","   *   Typically this callback will report() the violation.","   * @param {function} args.errTarget - If a violation is found, this string","   *   will be sent to the relevant warning message.","   * @param {string} [args.lineCheckStr] - Single- and multi-line checkers","   *   will use this string to determine whether they should proceed,","   *   i.e. if this string is one line only, single-line checkers will check,","   *   multi-line checkers will ignore.","   *   If none is passed, they will use `source`.","   * @param {boolean} [args.onlyOneChar=false] - Only check *one* character before.","   *   By default, \"always-*\" checks will look for the `targetWhitespace` one","   *   before and then ensure there is no whitespace two before. This option","   *   bypasses that second check.","   * @param {boolean} [args.allowIndentation=false] - Allow arbitrary indentation","   *   between the `targetWhitespace` (almost definitely a newline) and the `index`.","   *   With this option, the checker will see if a newline *begins* the whitespace before","   *   the `index`.","   */","  function before(args) {","    const source = args.source","    const index = args.index","    const err = args.err","    const errTarget = args.errTarget","    const lineCheckStr = args.lineCheckStr","    const onlyOneChar = args.onlyOneChar === undefined ? false : args.onlyOneChar","    const allowIndentation = args.allowIndentation === undefined ? false : args.allowIndentation","","    activeArgs = { source, index, err, errTarget, onlyOneChar, allowIndentation }","    switch (expectation) {","      case \"always\":","        expectBefore()","        break","      case \"never\":","        rejectBefore()","        break","      case \"always-single-line\":","        if (!isSingleLineString(lineCheckStr || source)) {","          return","        }","        expectBefore(messages.expectedBeforeSingleLine)","        break","      case \"never-single-line\":","        if (!isSingleLineString(lineCheckStr || source)) {","          return","        }","        rejectBefore(messages.rejectedBeforeSingleLine)","        break","      case \"always-multi-line\":","        if (isSingleLineString(lineCheckStr || source)) {","          return","        }","        expectBefore(messages.expectedBeforeMultiLine)","        break","      case \"never-multi-line\":","        if (isSingleLineString(lineCheckStr || source)) {","          return","        }","        rejectBefore(messages.rejectedBeforeMultiLine)","        break","      default:","        throw configurationError(`Unknown expectation \"${expectation}\"`)","    }","  }","","  /**","   * Check for whitespace *after* a character.","   *","   * Parameters are pretty much the same as for `before()`, above, just substitute","   * the word \"after\" for \"before\".","   */","  function after(args) {","    const source = args.source","    const index = args.index","    const err = args.err","    const errTarget = args.errTarget","    const lineCheckStr = args.lineCheckStr","    const onlyOneChar = args.onlyOneChar === undefined ? false : args.onlyOneChar","","    activeArgs = { source, index, err, errTarget, onlyOneChar }","    switch (expectation) {","      case \"always\":","        expectAfter()","        break","      case \"never\":","        rejectAfter()","        break","      case \"always-single-line\":","        if (!isSingleLineString(lineCheckStr || source)) {","          return","        }","        expectAfter(messages.expectedAfterSingleLine)","        break","      case \"never-single-line\":","        if (!isSingleLineString(lineCheckStr || source)) {","          return","        }","        rejectAfter(messages.rejectedAfterSingleLine)","        break","      case \"always-multi-line\":","        if (isSingleLineString(lineCheckStr || source)) {","          return","        }","        expectAfter(messages.expectedAfterMultiLine)","        break","      case \"never-multi-line\":","        if (isSingleLineString(lineCheckStr || source)) {","          return","        }","        rejectAfter(messages.rejectedAfterMultiLine)","        break","      default:","        throw configurationError(`Unknown expectation \"${expectation}\"`)","    }","  }","","  function beforeAllowingIndentation(obj) {","    before(Object.assign({}, obj, { allowIndentation: true }))","  }","","  function expectBefore() {","    const messageFunc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : messages.expectedBefore","","    if (activeArgs.allowIndentation) {","      expectBeforeAllowingIndentation(messageFunc)","      return","    }","","    const _activeArgs = activeArgs","    const source = _activeArgs.source,","      index = _activeArgs.index","","    const oneCharBefore = source[index - 1]","    const twoCharsBefore = source[index - 2]","","    if (!isValue(oneCharBefore)) {","      return","    }","","    if (targetWhitespace === \"space\" && oneCharBefore === \" \") {","      if (activeArgs.onlyOneChar || !isWhitespace(twoCharsBefore)) {","        return","      }","    }","","    activeArgs.err(messageFunc(activeArgs.errTarget ? activeArgs.errTarget : source[index]))","  }","","  function expectBeforeAllowingIndentation() {","    const messageFunc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : messages.expectedBefore","    const _activeArgs2 = activeArgs","    const source = _activeArgs2.source,","      index = _activeArgs2.index,","      err = _activeArgs2.err","","    const expectedChar = function () {","      if (targetWhitespace === \"newline\") {","        return \"\\n\"","      }","    }()","    let i = index - 1","    while (source[i] !== expectedChar) {","      if (source[i] === \"\\t\" || source[i] === \" \") {","        i--","        continue","      }","      err(messageFunc(activeArgs.errTarget ? activeArgs.errTarget : source[index]))","      return","    }","  }","","  function rejectBefore() {","    const messageFunc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : messages.rejectedBefore","    const _activeArgs3 = activeArgs","    const source = _activeArgs3.source,","      index = _activeArgs3.index","","    const oneCharBefore = source[index - 1]","","    if (isValue(oneCharBefore) && isWhitespace(oneCharBefore)) {","      activeArgs.err(messageFunc(activeArgs.errTarget ? activeArgs.errTarget : source[index]))","    }","  }","","  function afterOneOnly(obj) {","    after(Object.assign({}, obj, { onlyOneChar: true }))","  }","","  function expectAfter() {","    const messageFunc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : messages.expectedAfter","    const _activeArgs4 = activeArgs","    const source = _activeArgs4.source,","      index = _activeArgs4.index","","    const oneCharAfter = source[index + 1]","    const twoCharsAfter = source[index + 2]","","    if (!isValue(oneCharAfter)) {","      return","    }","","    if (targetWhitespace === \"newline\") {","      // If index is followed by a Windows CR-LF ...","      if (oneCharAfter === \"\\r\" && twoCharsAfter === \"\\n\") {","        if (activeArgs.onlyOneChar || !isWhitespace(source[index + 3])) {","          return","        }","      }","","      // If index is followed by a Unix LF ...","      if (oneCharAfter === \"\\n\") {","        if (activeArgs.onlyOneChar || !isWhitespace(twoCharsAfter)) {","          return","        }","      }","    }","","    if (targetWhitespace === \"space\" && oneCharAfter === \" \") {","      if (activeArgs.onlyOneChar || !isWhitespace(twoCharsAfter)) {","        return","      }","    }","","    activeArgs.err(messageFunc(activeArgs.errTarget ? activeArgs.errTarget : source[index]))","  }","","  function rejectAfter() {","    const messageFunc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : messages.rejectedAfter","    const _activeArgs5 = activeArgs","    const source = _activeArgs5.source,","      index = _activeArgs5.index","","    const oneCharAfter = source[index + 1]","","    if (isValue(oneCharAfter) && isWhitespace(oneCharAfter)) {","      activeArgs.err(messageFunc(activeArgs.errTarget ? activeArgs.errTarget : source[index]))","    }","  }","","  return {","    before,","    beforeAllowingIndentation,","    after,","    afterOneOnly,","  }","}","","function isValue(x) {","  return x !== undefined && x !== null","}",""],"l":{"3":1,"4":1,"5":1,"35":1,"49":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"85":0,"86":0,"88":0,"89":0,"91":0,"92":0,"94":0,"95":0,"97":0,"98":0,"100":0,"101":0,"103":0,"104":0,"106":0,"107":0,"109":0,"110":0,"112":0,"113":0,"115":0,"116":0,"118":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"136":0,"137":0,"139":0,"140":0,"142":0,"143":0,"145":0,"146":0,"148":0,"149":0,"151":0,"152":0,"154":0,"155":0,"157":0,"158":0,"160":0,"161":0,"163":0,"164":0,"166":0,"167":0,"169":0,"173":1,"174":0,"177":1,"178":0,"180":0,"181":0,"182":0,"185":0,"186":0,"189":0,"190":0,"192":0,"193":0,"196":0,"197":0,"198":0,"202":0,"205":1,"206":0,"207":0,"208":0,"212":0,"213":0,"214":0,"217":0,"218":0,"219":0,"220":0,"221":0,"223":0,"224":0,"228":1,"229":0,"230":0,"231":0,"234":0,"236":0,"237":0,"241":1,"242":0,"245":1,"246":0,"247":0,"248":0,"251":0,"252":0,"254":0,"255":0,"258":0,"260":0,"261":0,"262":0,"267":0,"268":0,"269":0,"274":0,"275":0,"276":0,"280":0,"283":1,"284":0,"285":0,"286":0,"289":0,"291":0,"292":0,"296":0,"304":1,"305":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/configurationError.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/configurationError.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":58}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":11,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":41}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":15}},"4":{"start":{"line":10,"column":2},"end":{"line":10,"column":12}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Create configurationError from text and set CLI exit code"," */","module.exports = function (text/*: string */)/* Object */ {","  const err/*: Object*/ = new Error(text)","  err.code = 78","  return err","}",""],"l":{"7":1,"8":0,"9":0,"10":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isSingleLineString.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isSingleLineString.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":59}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":13,"column":1}},"2":{"start":{"line":12,"column":2},"end":{"line":12,"column":30}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Check if a string is a single line (i.e. does not contain"," * any newline characters)."," *"," * @param {string} input"," * @return {boolean}"," */","module.exports = function (input/*: string*/)/*: boolean*/ {","  return !/[\\n\\r]/.test(input)","}",""],"l":{"11":1,"12":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isWhitespace.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isWhitespace.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":58}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":9,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":61}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Check if a character is whitespace."," */","module.exports = function (char/*: string*/)/*: boolean*/ {","  return [ \" \", \"\\n\", \"\\t\", \"\\r\", \"\\f\" ].indexOf(char) !== -1","}",""],"l":{"7":1,"8":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-semicolon-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-semicolon-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":66}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"8":{"start":{"line":12,"column":0},"end":{"line":15,"column":2}},"9":{"start":{"line":13,"column":24},"end":{"line":13,"column":60}},"10":{"start":{"line":14,"column":24},"end":{"line":14,"column":60}},"11":{"start":{"line":17,"column":0},"end":{"line":53,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":20,"column":2},"end":{"line":52,"column":3}},"14":{"start":{"line":21,"column":4},"end":{"line":27,"column":6}},"15":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"16":{"start":{"line":29,"column":6},"end":{"line":29,"column":12}},"17":{"start":{"line":32,"column":4},"end":{"line":51,"column":6}},"18":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"19":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"20":{"start":{"line":36,"column":6},"end":{"line":36,"column":46}},"21":{"start":{"line":38,"column":6},"end":{"line":50,"column":8}},"22":{"start":{"line":42,"column":10},"end":{"line":48,"column":12}},"23":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"24":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"25":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]}},"code":["\"use strict\"","","const hasBlock = require(\"../../utils/hasBlock\")","const rawNodeString = require(\"../../utils/rawNodeString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"at-rule-semicolon-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\";\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\";\\\"\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      if (hasBlock(atRule)) {","        return","      }","      const nodeString = rawNodeString(atRule)","","      checker.before({","        source: nodeString,","        index: nodeString.length,","        err: m => {","          report({","            message: m,","            node: atRule,","            index: nodeString.length - 1,","            result,","            ruleName,","          })","        },","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"14":0,"17":1,"18":0,"20":0,"21":0,"28":0,"29":0,"32":0,"33":0,"34":0,"36":0,"38":0,"42":0,"55":1,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/rawNodeString.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/rawNodeString.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":57}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":14,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":17}},"3":{"start":{"line":9,"column":2},"end":{"line":11,"column":3}},"4":{"start":{"line":10,"column":4},"end":{"line":10,"column":30}},"5":{"start":{"line":12,"column":2},"end":{"line":12,"column":27}},"6":{"start":{"line":13,"column":2},"end":{"line":13,"column":15}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":2},"end":{"line":9,"column":2}},{"start":{"line":9,"column":2},"end":{"line":9,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Stringify PostCSS node including its raw \"before\" string."," */","module.exports = function (node/*: Object*/)/*: string*/ {","  let result = \"\"","  if (node.raws.before) {","    result += node.raws.before","  }","  result += node.toString()","  return result","}",""],"l":{"7":1,"8":0,"9":0,"10":0,"12":0,"13":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-name-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-name-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":67}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":66}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":11,"column":25},"end":{"line":11,"column":79}},"8":{"start":{"line":14,"column":0},"end":{"line":35,"column":1}},"9":{"start":{"line":15,"column":2},"end":{"line":15,"column":67}},"10":{"start":{"line":16,"column":2},"end":{"line":34,"column":3}},"11":{"start":{"line":17,"column":4},"end":{"line":23,"column":6}},"12":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"13":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"14":{"start":{"line":28,"column":4},"end":{"line":33,"column":6}},"15":{"start":{"line":37,"column":0},"end":{"line":37,"column":24}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]}},"code":["\"use strict\"","","const atRuleNameSpaceChecker = require(\"../atRuleNameSpaceChecker\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"at-rule-name-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: name => `Expected single space after at-rule name \\\"${name}\\\"`,","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    atRuleNameSpaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"14":1,"15":0,"16":0,"17":0,"24":0,"25":0,"28":0,"37":1,"38":1,"39":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-no-unknown/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-no-unknown/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":60}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":37}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":22},"end":{"line":14,"column":62}},"11":{"start":{"line":17,"column":0},"end":{"line":54,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":53,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":31,"column":4},"end":{"line":52,"column":6}},"17":{"start":{"line":32,"column":6},"end":{"line":32,"column":30}},"18":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"19":{"start":{"line":36,"column":8},"end":{"line":36,"column":14}},"20":{"start":{"line":39,"column":6},"end":{"line":44,"column":7}},"21":{"start":{"line":43,"column":8},"end":{"line":43,"column":14}},"22":{"start":{"line":46,"column":6},"end":{"line":51,"column":8}},"23":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"24":{"start":{"line":57,"column":0},"end":{"line":57,"column":24}},"25":{"start":{"line":58,"column":0},"end":{"line":58,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"4":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":35}},{"start":{"line":41,"column":11},"end":{"line":41,"column":54}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const keywordSets = require(\"../../reference/keywordSets\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const postcss = require(\"postcss\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"at-rule-no-unknown\"","","const messages = ruleMessages(ruleName, {","  rejected: atRule => `Unexpected unknown at-rule \"${atRule}\"`,","})","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignoreAtRules: [_.isString],","      },","      optional: true,","    })","","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      const name = atRule.name","","      // Return early if at-rule is to be ignored","      if (optionsMatches(options, \"ignoreAtRules\", atRule.name)) {","        return","      }","","      if (","        postcss.vendor.prefix(name)","        || keywordSets.atRules.has(name.toLowerCase())","      ) {","        return","      }","","      report({","        message: messages.rejected(`@${name}`),","        node: atRule,","        ruleName,","        result,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"27":0,"28":0,"31":0,"32":0,"35":0,"36":0,"39":0,"43":0,"46":0,"56":1,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/keywordSets.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/keywordSets.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":27,"56":27,"57":70,"58":1},"b":{},"f":{"1":27},"fnMap":{"1":{"name":"uniteSets","line":612,"loc":{"start":{"line":612,"column":0},"end":{"line":612,"column":21}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":22}},"3":{"start":{"line":7,"column":0},"end":{"line":25,"column":2}},"4":{"start":{"line":27,"column":0},"end":{"line":49,"column":2}},"5":{"start":{"line":51,"column":0},"end":{"line":51,"column":82}},"6":{"start":{"line":53,"column":0},"end":{"line":60,"column":2}},"7":{"start":{"line":62,"column":0},"end":{"line":74,"column":2}},"8":{"start":{"line":76,"column":0},"end":{"line":80,"column":2}},"9":{"start":{"line":82,"column":0},"end":{"line":88,"column":2}},"10":{"start":{"line":90,"column":0},"end":{"line":93,"column":2}},"11":{"start":{"line":95,"column":0},"end":{"line":95,"column":58}},"12":{"start":{"line":97,"column":0},"end":{"line":107,"column":2}},"13":{"start":{"line":109,"column":0},"end":{"line":114,"column":1}},"14":{"start":{"line":116,"column":0},"end":{"line":118,"column":1}},"15":{"start":{"line":120,"column":0},"end":{"line":130,"column":2}},"16":{"start":{"line":132,"column":0},"end":{"line":132,"column":67}},"17":{"start":{"line":134,"column":0},"end":{"line":139,"column":2}},"18":{"start":{"line":141,"column":0},"end":{"line":146,"column":2}},"19":{"start":{"line":148,"column":0},"end":{"line":151,"column":2}},"20":{"start":{"line":154,"column":0},"end":{"line":162,"column":1}},"21":{"start":{"line":165,"column":0},"end":{"line":170,"column":2}},"22":{"start":{"line":173,"column":0},"end":{"line":187,"column":2}},"23":{"start":{"line":189,"column":0},"end":{"line":192,"column":1}},"24":{"start":{"line":194,"column":0},"end":{"line":201,"column":2}},"25":{"start":{"line":203,"column":0},"end":{"line":206,"column":2}},"26":{"start":{"line":208,"column":0},"end":{"line":255,"column":2}},"27":{"start":{"line":257,"column":0},"end":{"line":265,"column":2}},"28":{"start":{"line":267,"column":0},"end":{"line":279,"column":2}},"29":{"start":{"line":281,"column":0},"end":{"line":285,"column":1}},"30":{"start":{"line":287,"column":0},"end":{"line":290,"column":2}},"31":{"start":{"line":292,"column":0},"end":{"line":297,"column":2}},"32":{"start":{"line":299,"column":0},"end":{"line":302,"column":1}},"33":{"start":{"line":304,"column":0},"end":{"line":316,"column":2}},"34":{"start":{"line":319,"column":0},"end":{"line":319,"column":85}},"35":{"start":{"line":321,"column":0},"end":{"line":321,"column":81}},"36":{"start":{"line":323,"column":0},"end":{"line":326,"column":2}},"37":{"start":{"line":328,"column":0},"end":{"line":331,"column":2}},"38":{"start":{"line":333,"column":0},"end":{"line":336,"column":2}},"39":{"start":{"line":339,"column":0},"end":{"line":403,"column":2}},"40":{"start":{"line":405,"column":0},"end":{"line":408,"column":2}},"41":{"start":{"line":410,"column":0},"end":{"line":410,"column":83}},"42":{"start":{"line":412,"column":0},"end":{"line":417,"column":1}},"43":{"start":{"line":419,"column":0},"end":{"line":423,"column":2}},"44":{"start":{"line":425,"column":0},"end":{"line":462,"column":2}},"45":{"start":{"line":464,"column":0},"end":{"line":473,"column":2}},"46":{"start":{"line":475,"column":0},"end":{"line":485,"column":2}},"47":{"start":{"line":487,"column":0},"end":{"line":487,"column":81}},"48":{"start":{"line":489,"column":0},"end":{"line":497,"column":1}},"49":{"start":{"line":499,"column":0},"end":{"line":502,"column":2}},"50":{"start":{"line":505,"column":0},"end":{"line":528,"column":2}},"51":{"start":{"line":531,"column":0},"end":{"line":541,"column":2}},"52":{"start":{"line":544,"column":0},"end":{"line":578,"column":2}},"53":{"start":{"line":581,"column":0},"end":{"line":610,"column":2}},"54":{"start":{"line":612,"column":0},"end":{"line":618,"column":1}},"55":{"start":{"line":613,"column":2},"end":{"line":613,"column":36}},"56":{"start":{"line":615,"column":2},"end":{"line":617,"column":9}},"57":{"start":{"line":616,"column":4},"end":{"line":616,"column":40}},"58":{"start":{"line":620,"column":0},"end":{"line":620,"column":28}}},"branchMap":{},"code":["\"use strict\"","","const _ = require(\"lodash\")","","const keywordSets = {}","","keywordSets.nonLengthUnits = new Set([","  // Relative length units","  \"%\",","  // Time length units","  \"s\",","  \"ms\",","  // Angle","  \"deg\",","  \"grad\",","  \"turn\",","  \"rad\",","  // Frequency","  \"Hz\",","  \"kHz\",","  // Resolution","  \"dpi\",","  \"dpcm\",","  \"dppx\",","])","","keywordSets.lengthUnits = new Set([","  // Relative length units","  \"em\",","  \"ex\",","  \"ch\",","  \"rem\",","  // Viewport-percentage lengths","  \"vh\",","  \"vw\",","  \"vmin\",","  \"vmax\",","  \"vm\",","  // Absolute length units","  \"px\",","  \"mm\",","  \"cm\",","  \"in\",","  \"pt\",","  \"pc\",","  \"q\",","  // Flexible length units","  \"fr\",","])","","keywordSets.units = uniteSets(keywordSets.nonLengthUnits, keywordSets.lengthUnits)","","keywordSets.colorFunctionNames = new Set([","  \"rgb\",","  \"rgba\",","  \"hsl\",","  \"hsla\",","  \"hwb\",","  \"gray\",","])","","keywordSets.camelCaseFunctionNames = new Set([","  \"translateX\",","  \"translateY\",","  \"translateZ\",","  \"scaleX\",","  \"scaleY\",","  \"scaleZ\",","  \"rotateX\",","  \"rotateY\",","  \"rotateZ\",","  \"skewX\",","  \"skewY\",","])","","keywordSets.basicKeywords = new Set([","  \"initial\",","  \"inherit\",","  \"unset\",","])","","keywordSets.fontFamilyKeywords = uniteSets(keywordSets.basicKeywords, [","  \"serif\",","  \"sans-serif\",","  \"cursive\",","  \"fantasy\",","  \"monospace\",","])","","keywordSets.fontWeightRelativeKeywords = new Set([","  \"bolder\",","  \"lighter\",","])","","keywordSets.fontWeightAbsoluteKeywords = new Set([\"bold\"])","","keywordSets.fontWeightNumericKeywords = new Set([","  \"100\",","  \"200\",","  \"300\",","  \"400\",","  \"500\",","  \"600\",","  \"700\",","  \"800\",","  \"900\",","])","","keywordSets.fontWeightKeywords = uniteSets(","  keywordSets.basicKeywords,","  keywordSets.fontWeightRelativeKeywords,","  keywordSets.fontWeightAbsoluteKeywords,","  keywordSets.fontWeightNumericKeywords",")","","keywordSets.animationNameKeywords = uniteSets(keywordSets.basicKeywords,","  [\"none\"]",")","","keywordSets.animationTimingFunctionKeywords = uniteSets(keywordSets.basicKeywords, [","  \"linear\",","  \"ease\",","  \"ease-in\",","  \"ease-in-out\",","  \"ease-out\",","  \"step-start\",","  \"step-end\",","  \"steps\",","  \"cubic-bezier\",","])","","keywordSets.animationIterationCountKeywords = new Set([\"infinite\"])","","keywordSets.animationDirectionKeywords = uniteSets(keywordSets.basicKeywords, [","  \"normal\",","  \"reverse\",","  \"alternate\",","  \"alternate-reverse\",","])","","keywordSets.animationFillModeKeywords = new Set([","  \"none\",","  \"forwards\",","  \"backwards\",","  \"both\",","])","","keywordSets.animationPlayStateKeywords = uniteSets(keywordSets.basicKeywords, [","  \"running\",","  \"paused\",","])","","// cf. https://developer.mozilla.org/en-US/docs/Web/CSS/animation","keywordSets.animationShorthandKeywords = uniteSets(","  keywordSets.basicKeywords,","  keywordSets.animationNameKeywords,","  keywordSets.animationTimingFunctionKeywords,","  keywordSets.animationIterationCountKeywords,","  keywordSets.animationDirectionKeywords,","  keywordSets.animationFillModeKeywords,","  keywordSets.animationPlayStateKeywords",")","","// These are the ones that can have single-colon notation","keywordSets.levelOneAndTwoPseudoElements = new Set([","  \"before\",","  \"after\",","  \"first-line\",","  \"first-letter\",","])","","// These are the ones that require double-colon notation","keywordSets.levelThreePseudoElements = new Set([","  \"before\",","  \"after\",","  \"first-line\",","  \"first-letter\",","  \"selection\",","  \"spelling-error\",","  \"grammar-error\",","  \"backdrop\",","  \"marker\",","  \"placeholder\",","  \"shadow\",","  \"slotted\",","  \"content\",","])","","keywordSets.pseudoElements = uniteSets(","  keywordSets.levelOneAndTwoPseudoElements,","  keywordSets.levelThreePseudoElements",")","","keywordSets.aNPlusBNotationPseudoClasses = new Set([","  \"nth-child\",","  \"nth-column\",","  \"nth-last-child\",","  \"nth-last-column\",","  \"nth-last-of-type\",","  \"nth-of-type\",","])","","keywordSets.linguisticPseudoClasses = new Set([","  \"dir\",","  \"lang\",","])","","keywordSets.otherPseudoClasses = new Set([","  \"active\",","  \"any-link\",","  \"blank\",","  \"checked\",","  \"contains\",","  \"current\",","  \"default\",","  \"disabled\",","  \"drop\",","  \"empty\",","  \"enabled\",","  \"first-child\",","  \"first-of-type\",","  \"focus\",","  \"focus-within\",","  \"fullscreen\",","  \"future\",","  \"has\",","  \"host\",","  \"host-context\",","  \"hover\",","  \"indeterminate\",","  \"in-range\",","  \"invalid\",","  \"last-child\",","  \"last-of-type\",","  \"link\",","  \"matches\",","  \"not\",","  \"only-child\",","  \"only-of-type\",","  \"optional\",","  \"out-of-range\",","  \"past\",","  \"placeholder-shown\",","  \"read-only\",","  \"read-write\",","  \"required\",","  \"root\",","  \"scope\",","  \"target\",","  \"user-error\",","  \"user-invalid\",","  \"val\",","  \"valid\",","  \"visited\",","])","","keywordSets.webkitProprietaryPseudoElements = new Set([","  \"scrollbar\",","  \"scrollbar-button\",","  \"scrollbar-track\",","  \"scrollbar-track-piece\",","  \"scrollbar-thumb\",","  \"scrollbar-corner\",","  \"resize\",","])","","keywordSets.webkitProprietaryPseudoClasses = new Set([","  \"horizontal\",","  \"vertical\",","  \"decrement\",","  \"increment\",","  \"start\",","  \"end\",","  \"double-button\",","  \"single-button\",","  \"no-button\",","  \"corner-present\",","  \"window-inactive\",","])","","keywordSets.pseudoClasses = uniteSets(","  keywordSets.aNPlusBNotationPseudoClasses,","  keywordSets.linguisticPseudoClasses,","  keywordSets.otherPseudoClasses",")","","keywordSets.shorthandTimeProperties = new Set([","  \"transition\",","  \"animation\",","])","","keywordSets.longhandTimeProperties = new Set([","  \"transition-duration\",","  \"transition-delay\",","  \"animation-duration\",","  \"animation-delay\",","])","","keywordSets.timeProperties = uniteSets(","  keywordSets.shorthandTimeProperties,","  keywordSets.longhandTimeProperties",")","","keywordSets.camelCaseKeywords = new Set([","  \"optimizeSpeed\",","  \"optimizeQuality\",","  \"optimizeLegibility\",","  \"geometricPrecision\",","  \"currentColor\",","  \"crispEdges\",","  \"visiblePainted\",","  \"visibleFill\",","  \"visibleStroke\",","  \"sRGB\",","  \"linearRGB\",","])","","// https://developer.mozilla.org/docs/Web/CSS/counter-increment","keywordSets.counterIncrementKeywords = uniteSets(keywordSets.basicKeywords, [\"none\"])","","keywordSets.counterResetKeywords = uniteSets(keywordSets.basicKeywords, [\"none\"])","","keywordSets.gridRowKeywords = uniteSets(keywordSets.basicKeywords, [","  \"auto\",","  \"span\",","])","","keywordSets.gridColumnKeywords = uniteSets(keywordSets.basicKeywords, [","  \"auto\",","  \"span\",","])","","keywordSets.gridAreaKeywords = uniteSets(keywordSets.basicKeywords, [","  \"auto\",","  \"span\",","])","","// https://developer.mozilla.org/ru/docs/Web/CSS/list-style-type","keywordSets.listStyleTypeKeywords = uniteSets(keywordSets.basicKeywords, [","  \"none\",","  \"disc\",","  \"circle\",","  \"square\",","  \"decimal\",","  \"cjk-decimal\",","  \"decimal-leading-zero\",","  \"lower-roman\",","  \"upper-roman\",","  \"lower-greek\",","  \"lower-alpha\",","  \"lower-latin\",","  \"upper-alpha\",","  \"upper-latin\",","  \"arabic-indic\",","  \"armenian\",","  \"bengali\",","  \"cambodian\",","  \"cjk-earthly-branch\",","  \"cjk-ideographic\",","  \"devanagari\",","  \"ethiopic-numeric\",","  \"georgian\",","  \"gujarati\",","  \"gurmukhi\",","  \"hebrew\",","  \"hiragana\",","  \"hiragana-iroha\",","  \"japanese-formal\",","  \"japanese-informal\",","  \"kannada\",","  \"katakana\",","  \"katakana-iroha\",","  \"khmer\",","  \"korean-hangul-formal\",","  \"korean-hanja-formal\",","  \"korean-hanja-informal\",","  \"lao\",","  \"lower-armenian\",","  \"malayalam\",","  \"mongolian\",","  \"myanmar\",","  \"oriya\",","  \"persian\",","  \"simp-chinese-formal\",","  \"simp-chinese-informal\",","  \"tamil\",","  \"telugu\",","  \"thai\",","  \"tibetan\",","  \"trad-chinese-formal\",","  \"trad-chinese-informal\",","  \"upper-armenian\",","  \"disclosure-open\",","  \"disclosure-closed\",","  // Non-standard extensions (without prefixe)","  \"ethiopic-halehame\",","  \"ethiopic-halehame-am\",","  \"ethiopic-halehame-ti-er\",","  \"ethiopic-halehame-ti-et\",","  \"hangul\",","  \"hangul-consonant\",","  \"urdu\",","])","","keywordSets.listStylePositionKeywords = uniteSets(keywordSets.basicKeywords, [","  \"inside\",","  \"outside\",","])","","keywordSets.listStyleImageKeywords = uniteSets(keywordSets.basicKeywords, [\"none\"])","","keywordSets.listStyleShorthandKeywords = uniteSets(","  keywordSets.basicKeywords,","  keywordSets.listStyleTypeKeywords,","  keywordSets.listStylePositionKeywords,","  keywordSets.listStyleImageKeywords",")","","keywordSets.fontStyleKeywords = uniteSets(keywordSets.basicKeywords, [","  \"normal\",","  \"italic\",","  \"oblique\",","])","","keywordSets.fontVariantKeywords = uniteSets(keywordSets.basicKeywords, [","  \"normal\",","  \"none\",","  \"historical-forms\",","  \"none\",","  \"common-ligatures\",","  \"no-common-ligatures\",","  \"discretionary-ligatures\",","  \"no-discretionary-ligatures\",","  \"historical-ligatures\",","  \"no-historical-ligatures\",","  \"contextual\",","  \"no-contextual\",","  \"small-caps\",","  \"small-caps\",","  \"all-small-caps\",","  \"petite-caps\",","  \"all-petite-caps\",","  \"unicase\",","  \"titling-caps\",","  \"lining-nums\",","  \"oldstyle-nums\",","  \"proportional-nums\",","  \"tabular-nums\",","  \"diagonal-fractions\",","  \"stacked-fractions\",","  \"ordinal\",","  \"slashed-zero\",","  \"jis78\",","  \"jis83\",","  \"jis90\",","  \"jis04\",","  \"simplified\",","  \"traditional\",","  \"full-width\",","  \"proportional-width\",","  \"ruby\",","])","","keywordSets.fontStretchKeywords = uniteSets(keywordSets.basicKeywords, [","  \"semi-condensed\",","  \"condensed\",","  \"extra-condensed\",","  \"ultra-condensed\",","  \"semi-expanded\",","  \"expanded\",","  \"extra-expanded\",","  \"ultra-expanded\",","])","","keywordSets.fontSizeKeywords = uniteSets(keywordSets.basicKeywords, [","  \"xx-small\",","  \"x-small\",","  \"small\",","  \"medium\",","  \"large\",","  \"x-large\",","  \"xx-large\",","  \"larger\",","  \"smaller\",","])","","keywordSets.lineHeightKeywords = uniteSets(keywordSets.basicKeywords, [\"normal\"])","","keywordSets.fontShorthandKeywords = uniteSets(","  keywordSets.basicKeywords,","  keywordSets.fontStyleKeywords,","  keywordSets.fontVariantKeywords,","  keywordSets.fontWeightKeywords,","  keywordSets.fontStretchKeywords,","  keywordSets.fontSizeKeywords,","  keywordSets.lineHeightKeywords, keywordSets.fontFamilyKeywords",")","","keywordSets.keyframeSelectorKeywords = new Set([","  \"from\",","  \"to\",","])","","// https://developer.mozilla.org/en/docs/Web/CSS/At-rule","keywordSets.atRules = new Set([","  \"apply\",","  \"annotation\",","  \"character-variant\",","  \"charset\",","  \"counter-style\",","  \"custom-media\",","  \"custom-selector\",","  \"document\",","  \"font-face\",","  \"font-feature-values\",","  \"import\",","  \"keyframes\",","  \"media\",","  \"namespace\",","  \"nest\",","  \"ornaments\",","  \"page\",","  \"styleset\",","  \"stylistic\",","  \"supports\",","  \"swash\",","  \"viewport\",","])","","// https://drafts.csswg.org/mediaqueries/#descdef-media-update","keywordSets.deprecatedMediaFeatureNames = new Set([","  \"device-aspect-ratio\",","  \"device-height\",","  \"device-width\",","  \"max-device-aspect-ratio\",","  \"max-device-height\",","  \"max-device-width\",","  \"min-device-aspect-ratio\",","  \"min-device-height\",","  \"min-device-width\",","])","","// https://drafts.csswg.org/mediaqueries/#descdef-media-update","keywordSets.mediaFeatureNames = uniteSets(keywordSets.deprecatedMediaFeatureNames, [","  \"any-hover\",","  \"any-pointer\",","  \"aspect-ratio\",","  \"color\",","  \"color-gamut\",","  \"color-index\",","  \"grid\",","  \"height\",","  \"hover\",","  \"max-aspect-ratio\",","  \"max-color\",","  \"max-color-index\",","  \"max-height\",","  \"max-monochrome\",","  \"max-resolution\",","  \"max-width\",","  \"min-aspect-ratio\",","  \"min-color\",","  \"min-color-index\",","  \"min-height\",","  \"min-monochrome\",","  \"min-resolution\",","  \"min-width\",","  \"monochrome\",","  \"orientation\",","  \"overflow-block\",","  \"overflow-inline\",","  \"pointer\",","  \"resolution\",","  \"scan\",","  \"scripting\",","  \"update\",","  \"width\",","])","","// https://www.w3.org/TR/CSS22/ui.html#system-colors","keywordSets.systemColors = new Set([","  \"activeborder\",","  \"activecaption\",","  \"appworkspace\",","  \"background\",","  \"buttonface\",","  \"buttonhighlight\",","  \"buttonshadow\",","  \"buttontext\",","  \"captiontext\",","  \"graytext\",","  \"highlight\",","  \"highlighttext\",","  \"inactiveborder\",","  \"inactivecaption\",","  \"inactivecaptiontext\",","  \"infobackground\",","  \"infotext\",","  \"menu\",","  \"menutext\",","  \"scrollbar\",","  \"threeddarkshadow\",","  \"threedface\",","  \"threedhighlight\",","  \"threedlightshadow\",","  \"threedshadow\",","  \"window\",","  \"windowframe\",","  \"windowtext\",","])","","function uniteSets() {","  const sets = Array.from(arguments)","","  return new Set(sets.reduce((result, set) => {","    return result.concat(_.toArray(set))","  }, []))","}","","module.exports = keywordSets",""],"l":{"3":1,"5":1,"7":1,"27":1,"51":1,"53":1,"62":1,"76":1,"82":1,"90":1,"95":1,"97":1,"109":1,"116":1,"120":1,"132":1,"134":1,"141":1,"148":1,"154":1,"165":1,"173":1,"189":1,"194":1,"203":1,"208":1,"257":1,"267":1,"281":1,"287":1,"292":1,"299":1,"304":1,"319":1,"321":1,"323":1,"328":1,"333":1,"339":1,"405":1,"410":1,"412":1,"419":1,"425":1,"464":1,"475":1,"487":1,"489":1,"499":1,"505":1,"531":1,"544":1,"581":1,"612":1,"613":27,"615":27,"616":70,"620":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-no-vendor-prefix/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":31}}},"2":{"name":"(anonymous_2)","line":16,"loc":{"start":{"line":16,"column":9},"end":{"line":16,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":76}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":17},"end":{"line":12,"column":61}},"9":{"start":{"line":15,"column":0},"end":{"line":45,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":44,"column":3}},"11":{"start":{"line":17,"column":4},"end":{"line":17,"column":70}},"12":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"13":{"start":{"line":19,"column":6},"end":{"line":19,"column":12}},"14":{"start":{"line":22,"column":4},"end":{"line":43,"column":6}},"15":{"start":{"line":23,"column":6},"end":{"line":25,"column":7}},"16":{"start":{"line":24,"column":8},"end":{"line":24,"column":14}},"17":{"start":{"line":27,"column":6},"end":{"line":27,"column":30}},"18":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"19":{"start":{"line":30,"column":8},"end":{"line":30,"column":14}},"20":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"21":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"22":{"start":{"line":37,"column":6},"end":{"line":42,"column":8}},"23":{"start":{"line":47,"column":0},"end":{"line":47,"column":24}},"24":{"start":{"line":48,"column":0},"end":{"line":48,"column":24}},"25":{"start":{"line":49,"column":0},"end":{"line":49,"column":21}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":6},"end":{"line":23,"column":6}},{"start":{"line":23,"column":6},"end":{"line":23,"column":6}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"4":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]}},"code":["\"use strict\"","","const isAutoprefixable = require(\"../../utils/isAutoprefixable\")","const isStandardSyntaxAtRule = require(\"../../utils/isStandardSyntaxAtRule\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"at-rule-no-vendor-prefix\"","","const messages = ruleMessages(ruleName, {","  rejected: p => `Unexpected vendor-prefixed at-rule \"@${p}\"`,","})","","const rule = function (actual) {","  return function (root, result) {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      if (!isStandardSyntaxAtRule(atRule)) {","        return","      }","","      const name = atRule.name","","      if (name[0] !== \"-\") {","        return","      }","","      if (!isAutoprefixable.atRuleName(name)) {","        return","      }","","      report({","        message: messages.rejected(name),","        node: atRule,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"16":0,"17":0,"18":0,"19":0,"22":0,"23":0,"24":0,"27":0,"29":0,"30":0,"33":0,"34":0,"37":0,"47":1,"48":1,"49":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isAutoprefixable.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isAutoprefixable.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":12},"end":{"line":25,"column":50}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":10},"end":{"line":29,"column":48}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":18},"end":{"line":35,"column":56}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":10},"end":{"line":39,"column":48}}},"5":{"name":"(anonymous_5)","line":43,"loc":{"start":{"line":43,"column":15},"end":{"line":43,"column":66}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":53}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"4":{"start":{"line":17,"column":0},"end":{"line":17,"column":103}},"5":{"start":{"line":23,"column":0},"end":{"line":50,"column":1}},"6":{"start":{"line":26,"column":4},"end":{"line":26,"column":58}},"7":{"start":{"line":30,"column":4},"end":{"line":32,"column":6}},"8":{"start":{"line":31,"column":6},"end":{"line":31,"column":62}},"9":{"start":{"line":36,"column":4},"end":{"line":36,"column":72}},"10":{"start":{"line":40,"column":4},"end":{"line":40,"column":84}},"11":{"start":{"line":44,"column":4},"end":{"line":44,"column":118}},"12":{"start":{"line":45,"column":4},"end":{"line":47,"column":6}},"13":{"start":{"line":46,"column":6},"end":{"line":46,"column":54}}},"branchMap":{"1":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":37},"end":{"line":44,"column":72}},{"start":{"line":44,"column":76},"end":{"line":44,"column":118}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":11},"end":{"line":45,"column":35}},{"start":{"line":45,"column":39},"end":{"line":47,"column":6}}]}},"code":["/* @flow */","\"use strict\"","","const Browsers = require(\"autoprefixer/lib/browsers\")","const Prefixes = require(\"autoprefixer/lib/prefixes\")","const autoprefixer = require(\"autoprefixer\")","","/**"," * Use Autoprefixer's secret powers to determine whether or"," * not a certain CSS identifier contains a vendor prefix that"," * Autoprefixer, given the standardized identifier, could add itself."," *"," * Used by `*-no-vendor-prefix-*` rules to find superfluous"," * vendor prefixes."," */","","const prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []))","","/**"," * Most identifier types have to be looked up in a unique way,"," * so we're exposing special functions for each."," */","module.exports = {","","  atRuleName(identifier/*: string*/)/*: boolean*/ {","    return prefixes.remove[`@${identifier.toLowerCase()}`]","  },","","  selector(identifier/*: string*/)/*: boolean*/ {","    return prefixes.remove.selectors.some(selectorObj => {","      return identifier.toLowerCase() === selectorObj.prefixed","    })","  },","","  mediaFeatureName(identifier/*: string*/)/*: boolean*/ {","    return identifier.toLowerCase().indexOf(\"device-pixel-ratio\") !== -1","  },","","  property(identifier/*: string*/)/*: boolean*/ {","    return autoprefixer.data.prefixes[prefixes.unprefixed(identifier.toLowerCase())]","  },","","  propertyValue(prop/*: string*/, value/*: string*/)/*: boolean*/ {","    const possiblePrefixableValues = prefixes.remove[prop.toLowerCase()] && prefixes.remove[prop.toLowerCase()].values","    return possiblePrefixableValues && possiblePrefixableValues.some(valueObj => {","      return value.toLowerCase() === valueObj.prefixed","    })","  },","","}",""],"l":{"4":1,"5":1,"6":1,"17":1,"23":1,"26":0,"30":0,"31":0,"36":0,"40":0,"44":0,"45":0,"46":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-semicolon-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-semicolon-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":1,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":66}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":50}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":23},"end":{"line":14,"column":53}},"11":{"start":{"line":17,"column":0},"end":{"line":59,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":64}},"13":{"start":{"line":20,"column":2},"end":{"line":58,"column":3}},"14":{"start":{"line":21,"column":4},"end":{"line":24,"column":6}},"15":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"16":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"17":{"start":{"line":29,"column":4},"end":{"line":57,"column":6}},"18":{"start":{"line":30,"column":6},"end":{"line":30,"column":36}},"19":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"21":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"22":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"23":{"start":{"line":39,"column":6},"end":{"line":39,"column":54}},"24":{"start":{"line":40,"column":6},"end":{"line":42,"column":7}},"25":{"start":{"line":41,"column":8},"end":{"line":41,"column":14}},"26":{"start":{"line":44,"column":6},"end":{"line":56,"column":8}},"27":{"start":{"line":48,"column":10},"end":{"line":54,"column":12}},"28":{"start":{"line":61,"column":0},"end":{"line":61,"column":24}},"29":{"start":{"line":62,"column":0},"end":{"line":62,"column":24}},"30":{"start":{"line":63,"column":0},"end":{"line":63,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]}},"code":["\"use strict\"","","const hasBlock = require(\"../../utils/hasBlock\")","const nextNonCommentNode = require(\"../../utils/nextNonCommentNode\")","const rawNodeString = require(\"../../utils/rawNodeString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"at-rule-semicolon-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\";\\\"\",","})","","const rule = function (actual) {","  const checker = whitespaceChecker(\"newline\", actual, messages)","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual,","      possible: [\"always\"],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      const nextNode = atRule.next()","      if (!nextNode) {","        return","      }","      if (hasBlock(atRule)) {","        return","      }","","      // Allow an end-of-line comment","      const nodeToCheck = nextNonCommentNode(nextNode)","      if (!nodeToCheck) {","        return","      }","","      checker.afterOneOnly({","        source: rawNodeString(nodeToCheck),","        index: -1,","        err: msg => {","          report({","            message: msg,","            node: atRule,","            index: atRule.toString().length + 1,","            result,","            ruleName,","          })","        },","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"20":0,"21":0,"25":0,"26":0,"29":0,"30":0,"31":0,"32":0,"34":0,"35":0,"39":0,"40":0,"41":0,"44":0,"48":0,"61":1,"62":1,"63":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/nextNonCommentNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/nextNonCommentNode.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"nextNonCommentNode","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":81}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":16,"column":1}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":48}},"3":{"start":{"line":9,"column":37},"end":{"line":9,"column":48}},"4":{"start":{"line":11,"column":2},"end":{"line":13,"column":3}},"5":{"start":{"line":12,"column":4},"end":{"line":12,"column":47}},"6":{"start":{"line":15,"column":2},"end":{"line":15,"column":18}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":2},"end":{"line":9,"column":2}},{"start":{"line":9,"column":2},"end":{"line":9,"column":2}}]},"2":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":6},"end":{"line":9,"column":16}},{"start":{"line":9,"column":20},"end":{"line":9,"column":35}}]},"3":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":2},"end":{"line":11,"column":2}},{"start":{"line":11,"column":2},"end":{"line":11,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Get the next non-comment node in a PostCSS AST"," * at or after a given node."," */","module.exports = function nextNonCommentNode(startNode/*: Object*/)/*: ?Object*/ {","  if (!startNode || !startNode.next) return null","","  if (startNode.type === \"comment\") {","    return nextNonCommentNode(startNode.next())","  }","","  return startNode","}",""],"l":{"8":1,"9":0,"11":0,"12":0,"15":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/at-rule-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":1,"23":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":20},"end":{"line":12,"column":50}},"9":{"start":{"line":15,"column":0},"end":{"line":42,"column":1}},"10":{"start":{"line":17,"column":2},"end":{"line":17,"column":45}},"11":{"start":{"line":18,"column":2},"end":{"line":41,"column":3}},"12":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"13":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"14":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"15":{"start":{"line":27,"column":4},"end":{"line":40,"column":6}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":30}},"17":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":14}},"19":{"start":{"line":34,"column":6},"end":{"line":39,"column":8}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":30}},"21":{"start":{"line":46,"column":0},"end":{"line":46,"column":24}},"22":{"start":{"line":47,"column":0},"end":{"line":47,"column":24}},"23":{"start":{"line":48,"column":0},"end":{"line":48,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"at-rule-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: name => `Unexpected at-rule \"${name}\"`,","})","","const rule = function (whitelistInput) {","  // To allow for just a string as a parameter (not only arrays of strings)","  const whitelist = [].concat(whitelistInput)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      const name = atRule.name","","      if (whitelist.indexOf(postcss.vendor.unprefixed(name).toLowerCase()) !== -1) {","        return","      }","","      report({","        message: messages.rejected(name),","        node: atRule,","        result,","        ruleName,","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"17":0,"18":0,"19":0,"23":0,"24":0,"27":0,"28":0,"30":0,"31":0,"34":0,"44":1,"46":1,"47":1,"48":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-empty-line-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-empty-line-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":36}}},"2":{"name":"check","line":36,"loc":{"start":{"line":36,"column":4},"end":{"line":36,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":68}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":56}},"10":{"start":{"line":14,"column":0},"end":{"line":17,"column":2}},"11":{"start":{"line":19,"column":0},"end":{"line":85,"column":1}},"12":{"start":{"line":20,"column":2},"end":{"line":84,"column":3}},"13":{"start":{"line":21,"column":4},"end":{"line":27,"column":6}},"14":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"15":{"start":{"line":29,"column":6},"end":{"line":29,"column":12}},"16":{"start":{"line":33,"column":4},"end":{"line":33,"column":25}},"17":{"start":{"line":34,"column":4},"end":{"line":34,"column":27}},"18":{"start":{"line":36,"column":4},"end":{"line":83,"column":5}},"19":{"start":{"line":38,"column":6},"end":{"line":43,"column":7}},"20":{"start":{"line":42,"column":8},"end":{"line":42,"column":14}},"21":{"start":{"line":46,"column":6},"end":{"line":46,"column":67}},"22":{"start":{"line":47,"column":6},"end":{"line":49,"column":7}},"23":{"start":{"line":48,"column":8},"end":{"line":48,"column":14}},"24":{"start":{"line":52,"column":6},"end":{"line":52,"column":50}},"25":{"start":{"line":53,"column":6},"end":{"line":53,"column":44}},"26":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"27":{"start":{"line":55,"column":8},"end":{"line":55,"column":18}},"28":{"start":{"line":59,"column":6},"end":{"line":62,"column":17}},"29":{"start":{"line":65,"column":6},"end":{"line":65,"column":53}},"30":{"start":{"line":68,"column":6},"end":{"line":70,"column":7}},"31":{"start":{"line":69,"column":8},"end":{"line":69,"column":14}},"32":{"start":{"line":72,"column":6},"end":{"line":74,"column":27}},"33":{"start":{"line":76,"column":6},"end":{"line":82,"column":8}},"34":{"start":{"line":87,"column":0},"end":{"line":87,"column":24}},"35":{"start":{"line":88,"column":0},"end":{"line":88,"column":24}},"36":{"start":{"line":89,"column":0},"end":{"line":89,"column":21}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":28}},{"start":{"line":40,"column":11},"end":{"line":40,"column":35}}]},"4":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":22},"end":{"line":46,"column":42}},{"start":{"line":46,"column":46},"end":{"line":46,"column":48}}]},"5":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"6":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"7":{"line":59,"type":"cond-expr","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":16}},{"start":{"line":62,"column":12},"end":{"line":62,"column":17}}]},"8":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":36},"end":{"line":59,"column":71}},{"start":{"line":60,"column":11},"end":{"line":60,"column":54}}]},"9":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]},"10":{"line":72,"type":"cond-expr","locations":[{"start":{"line":73,"column":10},"end":{"line":73,"column":27}},{"start":{"line":74,"column":10},"end":{"line":74,"column":27}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const hasEmptyLine = require(\"../../utils/hasEmptyLine\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"block-closing-brace-empty-line-before\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected empty line before closing brace\",","  rejected: \"Unexpected empty line before closing brace\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always-multi-line\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statements: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      // Return early if blockless or has empty block","      if (","        !hasBlock(statement)","        || hasEmptyBlock(statement)","      ) {","        return","      }","","      // Get whitespace after \"\"}\", ignoring extra semicolon","      const before = (statement.raws.after || \"\").replace(/;+/, \"\")","      if (before === undefined) {","        return","      }","","      // Calculate index","      const statementString = statement.toString()","      let index = statementString.length - 1","      if (statementString[index - 1] === \"\\r\") {","        index -= 1","      }","","      // Set expectation","      const expectEmptyLineBefore = expectation === \"always-multi-line\"","        && !isSingleLineString(blockString(statement))","          ? true","          : false","","      // Check for at least one empty line","      const hasEmptyLineBefore = hasEmptyLine(before)","","      // Return if the expectation is met","      if (expectEmptyLineBefore === hasEmptyLineBefore) {","        return","      }","","      const message = expectEmptyLineBefore","        ? messages.expected","        : messages.rejected","","      report({","        message,","        result,","        ruleName,","        node: statement,","        index,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"19":1,"20":0,"21":0,"28":0,"29":0,"33":0,"34":0,"36":1,"38":0,"42":0,"46":0,"47":0,"48":0,"52":0,"53":0,"54":0,"55":0,"59":0,"65":0,"68":0,"69":0,"72":0,"76":0,"87":1,"88":1,"89":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/blockString.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/blockString.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":17},"end":{"line":16,"column":95}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":38}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"4":{"start":{"line":16,"column":0},"end":{"line":21,"column":1}},"5":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":16}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":76}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]}},"code":["/* @flow */","\"use strict\"","const beforeBlockString = require(\"./beforeBlockString\")","const hasBlock = require(\"./hasBlock\")","const rawNodeString = require(\"./rawNodeString\")","","/**"," * Return a CSS statement's block -- the string that starts and `{` and ends with `}`."," *"," * If the statement has no block (e.g. `@import url(foo.css);`),"," * return undefined."," *"," * @param {Rule|AtRule} statement - postcss rule or at-rule node"," * @return {string|undefined}"," */","module.exports = function (statement/*: postcss$rule | postcss$atRule*/)/*: string | boolean*/ {","  if (!hasBlock(statement)) {","    return false","  }","  return rawNodeString(statement).slice(beforeBlockString(statement).length)","}",""],"l":{"3":1,"4":1,"5":1,"16":1,"17":0,"18":0,"20":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/beforeBlockString.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/beforeBlockString.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":3,"loc":{"start":{"line":3,"column":17},"end":{"line":6,"column":14}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":43,"column":1}},"2":{"start":{"line":7,"column":2},"end":{"line":7,"column":25}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":17}},"4":{"start":{"line":10,"column":2},"end":{"line":10,"column":10}},"5":{"start":{"line":11,"column":2},"end":{"line":11,"column":12}},"6":{"start":{"line":13,"column":2},"end":{"line":15,"column":3}},"7":{"start":{"line":14,"column":4},"end":{"line":14,"column":20}},"8":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"9":{"start":{"line":17,"column":4},"end":{"line":17,"column":22}},"10":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"11":{"start":{"line":21,"column":4},"end":{"line":21,"column":17}},"12":{"start":{"line":24,"column":2},"end":{"line":24,"column":46}},"13":{"start":{"line":26,"column":2},"end":{"line":28,"column":3}},"14":{"start":{"line":27,"column":4},"end":{"line":27,"column":20}},"15":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"16":{"start":{"line":30,"column":4},"end":{"line":30,"column":27}},"17":{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},"18":{"start":{"line":33,"column":4},"end":{"line":33,"column":79}},"19":{"start":{"line":36,"column":2},"end":{"line":36,"column":40}},"20":{"start":{"line":38,"column":2},"end":{"line":40,"column":3}},"21":{"start":{"line":39,"column":4},"end":{"line":39,"column":21}},"22":{"start":{"line":42,"column":2},"end":{"line":42,"column":15}}},"branchMap":{"1":{"line":7,"type":"binary-expr","locations":[{"start":{"line":7,"column":12},"end":{"line":7,"column":19}},{"start":{"line":7,"column":23},"end":{"line":7,"column":25}}]},"2":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":2},"end":{"line":13,"column":2}},{"start":{"line":13,"column":2},"end":{"line":13,"column":2}}]},"3":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]},"4":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"5":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":6},"end":{"line":20,"column":11}},{"start":{"line":20,"column":15},"end":{"line":20,"column":22}}]},"6":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":18},"end":{"line":24,"column":39}},{"start":{"line":24,"column":43},"end":{"line":24,"column":45}}]},"7":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"8":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"9":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"10":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":35},"end":{"line":33,"column":56}},{"start":{"line":33,"column":60},"end":{"line":33,"column":62}}]},"11":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]}},"code":["/* @flow */","\"use strict\"","module.exports = function (","  statement/*: Object*/,","  options/*:: ?: Object*/",")/*: string*/ {","  options = options || {}","","  let result = \"\"","  let rule/*: postcss$rule*/","  let atRule/*: postcss$atRule*/","","  if (statement.type === \"rule\") {","    rule = statement","  }","  if (statement.type === \"atrule\") {","    atRule = statement","  }","","  if (!rule && !atRule) {","    return result","  }","","  const before = (statement.raws.before || \"\")","","  if (!options.noRawBefore) {","    result += before","  }","  if (rule) {","    result += rule.selector","  }","  if (atRule) {","    result += \"@\" + atRule.name + (atRule.raws.afterName || \"\") + atRule.params","  }","","  const between = statement.raws.between","","  if (between !== undefined) {","    result += between","  }","","  return result","}",""],"l":{"3":1,"7":0,"9":0,"10":0,"11":0,"13":0,"14":0,"16":0,"17":0,"20":0,"21":0,"24":0,"26":0,"27":0,"29":0,"30":0,"32":0,"33":0,"36":0,"38":0,"39":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasEmptyBlock.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasEmptyBlock.js","s":{"1":1,"2":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":12,"column":15}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":15,"column":1}},"2":{"start":{"line":13,"column":2},"end":{"line":14,"column":33}}},"branchMap":{"1":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":9},"end":{"line":13,"column":38}},{"start":{"line":14,"column":5},"end":{"line":14,"column":33}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check if a statement has an empty block."," *"," * @param {Rule|AtRule} statement - postcss rule or at-rule node"," * @return {boolean} True if the statement has a block and it is empty"," */","module.exports = function (","  statement/*: postcss$rule | postcss$atRule*/",")/*: boolean*/ {","  return statement.nodes !== undefined // has block","  && statement.nodes.length === 0 // and is empty","}",""],"l":{"10":1,"13":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":1,"46":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":13},"end":{"line":23,"column":45}}},"2":{"name":"check","line":50,"loc":{"start":{"line":50,"column":4},"end":{"line":50,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":66}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":52}},"11":{"start":{"line":15,"column":0},"end":{"line":21,"column":2}},"12":{"start":{"line":16,"column":23},"end":{"line":16,"column":53}},"13":{"start":{"line":17,"column":33},"end":{"line":17,"column":86}},"14":{"start":{"line":18,"column":33},"end":{"line":18,"column":91}},"15":{"start":{"line":19,"column":32},"end":{"line":19,"column":84}},"16":{"start":{"line":20,"column":32},"end":{"line":20,"column":89}},"17":{"start":{"line":23,"column":0},"end":{"line":106,"column":1}},"18":{"start":{"line":24,"column":2},"end":{"line":24,"column":69}},"19":{"start":{"line":25,"column":2},"end":{"line":105,"column":3}},"20":{"start":{"line":26,"column":4},"end":{"line":41,"column":6}},"21":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"22":{"start":{"line":43,"column":6},"end":{"line":43,"column":12}},"23":{"start":{"line":47,"column":4},"end":{"line":47,"column":25}},"24":{"start":{"line":48,"column":4},"end":{"line":48,"column":27}},"25":{"start":{"line":50,"column":4},"end":{"line":104,"column":5}},"26":{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},"27":{"start":{"line":52,"column":8},"end":{"line":52,"column":14}},"28":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"29":{"start":{"line":55,"column":8},"end":{"line":55,"column":14}},"30":{"start":{"line":58,"column":6},"end":{"line":58,"column":39}},"31":{"start":{"line":59,"column":6},"end":{"line":61,"column":7}},"32":{"start":{"line":60,"column":8},"end":{"line":60,"column":14}},"33":{"start":{"line":64,"column":6},"end":{"line":66,"column":51}},"34":{"start":{"line":68,"column":6},"end":{"line":70,"column":18}},"35":{"start":{"line":72,"column":6},"end":{"line":74,"column":7}},"36":{"start":{"line":73,"column":8},"end":{"line":73,"column":14}},"37":{"start":{"line":76,"column":6},"end":{"line":76,"column":51}},"38":{"start":{"line":77,"column":6},"end":{"line":77,"column":45}},"39":{"start":{"line":80,"column":6},"end":{"line":86,"column":7}},"40":{"start":{"line":84,"column":8},"end":{"line":84,"column":32}},"41":{"start":{"line":85,"column":8},"end":{"line":85,"column":21}},"42":{"start":{"line":90,"column":6},"end":{"line":103,"column":8}},"43":{"start":{"line":95,"column":10},"end":{"line":101,"column":12}},"44":{"start":{"line":108,"column":0},"end":{"line":108,"column":24}},"45":{"start":{"line":109,"column":0},"end":{"line":109,"column":24}},"46":{"start":{"line":110,"column":0},"end":{"line":110,"column":21}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"5":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":42},"end":{"line":64,"column":69}},{"start":{"line":65,"column":11},"end":{"line":65,"column":53}},{"start":{"line":66,"column":11},"end":{"line":66,"column":51}}]},"6":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":25},"end":{"line":65,"column":45}},{"start":{"line":65,"column":49},"end":{"line":65,"column":51}}]},"7":{"line":68,"type":"cond-expr","locations":[{"start":{"line":69,"column":10},"end":{"line":69,"column":25}},{"start":{"line":70,"column":10},"end":{"line":70,"column":18}}]},"8":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":6},"end":{"line":72,"column":6}},{"start":{"line":72,"column":6},"end":{"line":72,"column":6}}]},"9":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"10":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":14}},{"start":{"line":82,"column":11},"end":{"line":82,"column":28}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const rawNodeString = require(\"../../utils/rawNodeString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"block-closing-brace-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\"}\\\"\",","  expectedAfterSingleLine: () => \"Expected newline after \\\"}\\\" of a single-line block\",","  rejectedAfterSingleLine: () => \"Unexpected whitespace after \\\"}\\\" of a single-line block\",","  expectedAfterMultiLine: () => \"Expected newline after \\\"}\\\" of a multi-line block\",","  rejectedAfterMultiLine: () => \"Unexpected whitespace after \\\"}\\\" of a multi-line block\",","})","","const rule = function (expectation, options) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-single-line\",","        \"never-single-line\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    }, {","      actual: options,","      possible: {","        ignoreAtRules: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statements: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      if (!hasBlock(statement)) {","        return","      }","      if (optionsMatches(options, \"ignoreAtRules\", statement.name)) {","        return","      }","","      const nextNode = statement.next()","      if (!nextNode) {","        return","      }","","      // Allow an end-of-line comment x spaces after the brace","      const nextNodeIsSingleLineComment = nextNode.type === \"comment\"","        && !/[^ ]/.test((nextNode.raws.before || \"\"))","        && nextNode.toString().indexOf(\"\\n\") === -1","","      const nodeToCheck = nextNodeIsSingleLineComment","        ? nextNode.next()","        : nextNode","","      if (!nodeToCheck) {","        return","      }","","      let reportIndex = statement.toString().length","      let source = rawNodeString(nodeToCheck)","","      // Skip a semicolon at the beginning, if any","      if (","        source","        && source[0] === \";\"","      ) {","        source = source.slice(1)","        reportIndex++","      }","","      // Only check one after, because there might be other","      // spaces handled by the indentation rule","      checker.afterOneOnly({","        source,","        index: -1,","        lineCheckStr: blockString(statement),","        err: msg => {","          report({","            message: msg,","            node: statement,","            index: reportIndex,","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"23":1,"24":0,"25":0,"26":0,"42":0,"43":0,"47":0,"48":0,"50":1,"51":0,"52":0,"54":0,"55":0,"58":0,"59":0,"60":0,"64":0,"68":0,"72":0,"73":0,"76":0,"77":0,"80":0,"84":0,"85":0,"90":0,"95":0,"108":1,"109":1,"110":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-newline-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-newline-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":1,"39":1,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":36}}},"2":{"name":"check","line":38,"loc":{"start":{"line":38,"column":4},"end":{"line":38,"column":30}}},"3":{"name":"complain","line":88,"loc":{"start":{"line":88,"column":6},"end":{"line":88,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":68}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":53}},"10":{"start":{"line":14,"column":0},"end":{"line":18,"column":2}},"11":{"start":{"line":20,"column":0},"end":{"line":99,"column":1}},"12":{"start":{"line":21,"column":2},"end":{"line":98,"column":3}},"13":{"start":{"line":22,"column":4},"end":{"line":29,"column":6}},"14":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"15":{"start":{"line":31,"column":6},"end":{"line":31,"column":12}},"16":{"start":{"line":35,"column":4},"end":{"line":35,"column":25}},"17":{"start":{"line":36,"column":4},"end":{"line":36,"column":27}},"18":{"start":{"line":38,"column":4},"end":{"line":97,"column":5}},"19":{"start":{"line":40,"column":6},"end":{"line":45,"column":7}},"20":{"start":{"line":44,"column":8},"end":{"line":44,"column":14}},"21":{"start":{"line":48,"column":6},"end":{"line":48,"column":66}},"22":{"start":{"line":49,"column":6},"end":{"line":51,"column":7}},"23":{"start":{"line":50,"column":8},"end":{"line":50,"column":14}},"24":{"start":{"line":53,"column":6},"end":{"line":53,"column":74}},"25":{"start":{"line":54,"column":6},"end":{"line":54,"column":50}},"26":{"start":{"line":56,"column":6},"end":{"line":56,"column":44}},"27":{"start":{"line":57,"column":6},"end":{"line":59,"column":7}},"28":{"start":{"line":58,"column":8},"end":{"line":58,"column":18}},"29":{"start":{"line":66,"column":6},"end":{"line":78,"column":7}},"30":{"start":{"line":70,"column":8},"end":{"line":77,"column":9}},"31":{"start":{"line":71,"column":10},"end":{"line":71,"column":43}},"32":{"start":{"line":72,"column":15},"end":{"line":77,"column":9}},"33":{"start":{"line":76,"column":10},"end":{"line":76,"column":52}},"34":{"start":{"line":80,"column":6},"end":{"line":86,"column":7}},"35":{"start":{"line":85,"column":8},"end":{"line":85,"column":50}},"36":{"start":{"line":88,"column":6},"end":{"line":96,"column":7}},"37":{"start":{"line":89,"column":8},"end":{"line":95,"column":10}},"38":{"start":{"line":101,"column":0},"end":{"line":101,"column":24}},"39":{"start":{"line":102,"column":0},"end":{"line":102,"column":24}},"40":{"start":{"line":103,"column":0},"end":{"line":103,"column":21}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"3":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":28}},{"start":{"line":42,"column":11},"end":{"line":42,"column":35}}]},"4":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":21},"end":{"line":48,"column":41}},{"start":{"line":48,"column":45},"end":{"line":48,"column":47}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"6":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"7":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":6},"end":{"line":66,"column":6}},{"start":{"line":66,"column":6},"end":{"line":66,"column":6}}]},"8":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":34}},{"start":{"line":68,"column":11},"end":{"line":68,"column":39}}]},"9":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"10":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":15},"end":{"line":72,"column":15}},{"start":{"line":72,"column":15},"end":{"line":72,"column":15}}]},"11":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":10},"end":{"line":73,"column":26}},{"start":{"line":74,"column":13},"end":{"line":74,"column":48}}]},"12":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"13":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":20}},{"start":{"line":82,"column":11},"end":{"line":82,"column":27}},{"start":{"line":83,"column":11},"end":{"line":83,"column":45}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"block-closing-brace-newline-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: \"Expected newline before \\\"}\\\"\",","  expectedBeforeMultiLine: \"Expected newline before \\\"}\\\" of a multi-line block\",","  rejectedBeforeMultiLine: \"Unexpected whitespace before \\\"}\\\" of a multi-line block\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statements: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      // Return early if blockless or has empty block","      if (","        !hasBlock(statement)","        || hasEmptyBlock(statement)","      ) {","        return","      }","","      // Ignore extra semicolon","      const after = (statement.raws.after || \"\").replace(/;+/, \"\")","      if (after === undefined) {","        return","      }","","      const blockIsMultiLine = !isSingleLineString(blockString(statement))","      const statementString = statement.toString()","","      let index = statementString.length - 2","      if (statementString[index - 1] === \"\\r\") {","        index -= 1","      }","","      // We're really just checking whether a","      // newline *starts* the block's final space -- between","      // the last declaration and the closing brace. We can","      // ignore any other whitespace between them, because that","      // will be checked by the indentation rule.","      if (","        !_.startsWith(after, \"\\n\")","        && !_.startsWith(after, \"\\r\\n\")","      ) {","        if (expectation === \"always\") {","          complain(messages.expectedBefore)","        } else if (","          blockIsMultiLine","          && expectation === \"always-multi-line\"","        ) {","          complain(messages.expectedBeforeMultiLine)","        }","      }","","      if (","        after !== \"\"","        && blockIsMultiLine","        && expectation === \"never-multi-line\"","      ) {","        complain(messages.rejectedBeforeMultiLine)","      }","","      function complain(message) {","        report({","          message,","          result,","          ruleName,","          node: statement,","          index,","        })","      }","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"20":1,"21":0,"22":0,"30":0,"31":0,"35":0,"36":0,"38":1,"40":0,"44":0,"48":0,"49":0,"50":0,"53":0,"54":0,"56":0,"57":0,"58":0,"66":0,"70":0,"71":0,"72":0,"76":0,"80":0,"85":0,"88":1,"89":0,"101":1,"102":1,"103":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":1,"39":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":13},"end":{"line":22,"column":36}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":9},"end":{"line":25,"column":33}}},"3":{"name":"check","line":45,"loc":{"start":{"line":45,"column":4},"end":{"line":45,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":66}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":50}},"9":{"start":{"line":13,"column":0},"end":{"line":20,"column":2}},"10":{"start":{"line":14,"column":23},"end":{"line":14,"column":58}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":58}},"12":{"start":{"line":16,"column":33},"end":{"line":16,"column":91}},"13":{"start":{"line":17,"column":33},"end":{"line":17,"column":91}},"14":{"start":{"line":18,"column":32},"end":{"line":18,"column":89}},"15":{"start":{"line":19,"column":32},"end":{"line":19,"column":89}},"16":{"start":{"line":22,"column":0},"end":{"line":82,"column":1}},"17":{"start":{"line":23,"column":2},"end":{"line":23,"column":67}},"18":{"start":{"line":25,"column":2},"end":{"line":81,"column":3}},"19":{"start":{"line":26,"column":4},"end":{"line":36,"column":6}},"20":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"21":{"start":{"line":38,"column":6},"end":{"line":38,"column":12}},"22":{"start":{"line":42,"column":4},"end":{"line":42,"column":25}},"23":{"start":{"line":43,"column":4},"end":{"line":43,"column":27}},"24":{"start":{"line":45,"column":4},"end":{"line":80,"column":5}},"25":{"start":{"line":46,"column":6},"end":{"line":46,"column":39}},"26":{"start":{"line":47,"column":6},"end":{"line":49,"column":7}},"27":{"start":{"line":48,"column":8},"end":{"line":48,"column":14}},"28":{"start":{"line":50,"column":6},"end":{"line":52,"column":7}},"29":{"start":{"line":51,"column":8},"end":{"line":51,"column":14}},"30":{"start":{"line":54,"column":6},"end":{"line":54,"column":51}},"31":{"start":{"line":55,"column":6},"end":{"line":55,"column":42}},"32":{"start":{"line":58,"column":6},"end":{"line":64,"column":7}},"33":{"start":{"line":62,"column":8},"end":{"line":62,"column":32}},"34":{"start":{"line":63,"column":8},"end":{"line":63,"column":21}},"35":{"start":{"line":66,"column":6},"end":{"line":79,"column":8}},"36":{"start":{"line":71,"column":10},"end":{"line":77,"column":12}},"37":{"start":{"line":84,"column":0},"end":{"line":84,"column":24}},"38":{"start":{"line":85,"column":0},"end":{"line":85,"column":24}},"39":{"start":{"line":86,"column":0},"end":{"line":86,"column":21}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"4":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]},"5":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":14}},{"start":{"line":60,"column":11},"end":{"line":60,"column":28}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const rawNodeString = require(\"../../utils/rawNodeString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"block-closing-brace-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\"}\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\"}\\\"\",","  expectedAfterSingleLine: () => \"Expected single space after \\\"}\\\" of a single-line block\",","  rejectedAfterSingleLine: () => \"Unexpected whitespace after \\\"}\\\" of a single-line block\",","  expectedAfterMultiLine: () => \"Expected single space after \\\"}\\\" of a multi-line block\",","  rejectedAfterMultiLine: () => \"Unexpected whitespace after \\\"}\\\" of a multi-line block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","","  return function (root, result) {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statements: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      const nextNode = statement.next()","      if (!nextNode) {","        return","      }","      if (!hasBlock(statement)) {","        return","      }","","      let reportIndex = statement.toString().length","      let source = rawNodeString(nextNode)","","      // Skip a semicolon at the beginning, if any","      if (","        source","        && source[0] === \";\"","      ) {","        source = source.slice(1)","        reportIndex++","      }","","      checker.after({","        source,","        index: -1,","        lineCheckStr: blockString(statement),","        err: msg => {","          report({","            message: msg,","            node: statement,","            index: reportIndex,","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"22":1,"23":0,"25":0,"26":0,"37":0,"38":0,"42":0,"43":0,"45":1,"46":0,"47":0,"48":0,"50":0,"51":0,"54":0,"55":0,"58":0,"62":0,"63":0,"66":0,"71":0,"84":1,"85":1,"86":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-closing-brace-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":13},"end":{"line":22,"column":36}}},"2":{"name":"check","line":45,"loc":{"start":{"line":45,"column":4},"end":{"line":45,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":66}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":51}},"9":{"start":{"line":13,"column":0},"end":{"line":20,"column":2}},"10":{"start":{"line":14,"column":24},"end":{"line":14,"column":60}},"11":{"start":{"line":15,"column":24},"end":{"line":15,"column":60}},"12":{"start":{"line":16,"column":34},"end":{"line":16,"column":93}},"13":{"start":{"line":17,"column":34},"end":{"line":17,"column":93}},"14":{"start":{"line":18,"column":33},"end":{"line":18,"column":91}},"15":{"start":{"line":19,"column":33},"end":{"line":19,"column":91}},"16":{"start":{"line":22,"column":0},"end":{"line":77,"column":1}},"17":{"start":{"line":23,"column":2},"end":{"line":23,"column":67}},"18":{"start":{"line":25,"column":2},"end":{"line":76,"column":3}},"19":{"start":{"line":26,"column":4},"end":{"line":36,"column":6}},"20":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"21":{"start":{"line":38,"column":6},"end":{"line":38,"column":12}},"22":{"start":{"line":42,"column":4},"end":{"line":42,"column":25}},"23":{"start":{"line":43,"column":4},"end":{"line":43,"column":27}},"24":{"start":{"line":45,"column":4},"end":{"line":75,"column":5}},"25":{"start":{"line":47,"column":6},"end":{"line":52,"column":7}},"26":{"start":{"line":51,"column":8},"end":{"line":51,"column":14}},"27":{"start":{"line":54,"column":6},"end":{"line":54,"column":43}},"28":{"start":{"line":55,"column":6},"end":{"line":55,"column":50}},"29":{"start":{"line":57,"column":6},"end":{"line":57,"column":44}},"30":{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},"31":{"start":{"line":59,"column":8},"end":{"line":59,"column":18}},"32":{"start":{"line":62,"column":6},"end":{"line":74,"column":8}},"33":{"start":{"line":66,"column":10},"end":{"line":72,"column":12}},"34":{"start":{"line":79,"column":0},"end":{"line":79,"column":24}},"35":{"start":{"line":80,"column":0},"end":{"line":80,"column":24}},"36":{"start":{"line":81,"column":0},"end":{"line":81,"column":21}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"3":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":28}},{"start":{"line":49,"column":11},"end":{"line":49,"column":35}}]},"4":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"block-closing-brace-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\"}\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\"}\\\"\",","  expectedBeforeSingleLine: () => \"Expected single space before \\\"}\\\" of a single-line block\",","  rejectedBeforeSingleLine: () => \"Unexpected whitespace before \\\"}\\\" of a single-line block\",","  expectedBeforeMultiLine: () => \"Expected single space before \\\"}\\\" of a multi-line block\",","  rejectedBeforeMultiLine: () => \"Unexpected whitespace before \\\"}\\\" of a multi-line block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual : expectation,","      possible : [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statement: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      // Return early if blockless or has empty block","      if (","        !hasBlock(statement)","        || hasEmptyBlock(statement)","      ) {","        return","      }","","      const source = blockString(statement)","      const statementString = statement.toString()","","      let index = statementString.length - 2","      if (statementString[index - 1] === \"\\r\") {","        index -= 1","      }","","      checker.before({","        source,","        index: source.length - 1,","        err: msg => {","          report({","            message: msg,","            node: statement,","            index,","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"22":1,"23":0,"25":0,"26":0,"37":0,"38":0,"42":0,"43":0,"45":1,"47":0,"51":0,"54":0,"55":0,"57":0,"58":0,"59":0,"62":0,"66":0,"79":1,"80":1,"81":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-no-empty/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-no-empty/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1,"24":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":31}}},"2":{"name":"check","line":26,"loc":{"start":{"line":26,"column":4},"end":{"line":26,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":33}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":15,"column":0},"end":{"line":47,"column":1}},"9":{"start":{"line":16,"column":2},"end":{"line":46,"column":3}},"10":{"start":{"line":17,"column":4},"end":{"line":17,"column":70}},"11":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"12":{"start":{"line":19,"column":6},"end":{"line":19,"column":12}},"13":{"start":{"line":23,"column":4},"end":{"line":23,"column":25}},"14":{"start":{"line":24,"column":4},"end":{"line":24,"column":27}},"15":{"start":{"line":26,"column":4},"end":{"line":45,"column":5}},"16":{"start":{"line":27,"column":6},"end":{"line":29,"column":7}},"17":{"start":{"line":28,"column":8},"end":{"line":28,"column":14}},"18":{"start":{"line":31,"column":6},"end":{"line":31,"column":76}},"19":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"20":{"start":{"line":35,"column":8},"end":{"line":35,"column":15}},"21":{"start":{"line":38,"column":6},"end":{"line":44,"column":8}},"22":{"start":{"line":49,"column":0},"end":{"line":49,"column":24}},"23":{"start":{"line":50,"column":0},"end":{"line":50,"column":24}},"24":{"start":{"line":51,"column":0},"end":{"line":51,"column":21}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":6}},{"start":{"line":27,"column":6},"end":{"line":27,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]}},"code":["\"use strict\"","","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"block-no-empty\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected empty block\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statements: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      if (!hasEmptyBlock(statement)) {","        return","      }","","      let index = beforeBlockString(statement, { noRawBefore: true }).length","","      // For empty blocks when using SugarSS parser","      if (statement.raws.between === undefined) {","        index--","      }","","      report({","        message: messages.rejected,","        node: statement,","        index,","        result,","        ruleName,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"15":1,"16":0,"17":0,"18":0,"19":0,"23":0,"24":0,"26":1,"27":0,"28":0,"31":0,"34":0,"35":0,"38":0,"49":1,"50":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-no-single-line/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-no-single-line/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":31}}},"2":{"name":"check","line":37,"loc":{"start":{"line":37,"column":4},"end":{"line":37,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":68}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":39}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":18,"column":0},"end":{"line":57,"column":1}},"12":{"start":{"line":19,"column":2},"end":{"line":56,"column":3}},"13":{"start":{"line":20,"column":4},"end":{"line":20,"column":70}},"14":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"15":{"start":{"line":22,"column":6},"end":{"line":22,"column":12}},"16":{"start":{"line":25,"column":4},"end":{"line":31,"column":6}},"17":{"start":{"line":34,"column":4},"end":{"line":34,"column":25}},"18":{"start":{"line":35,"column":4},"end":{"line":35,"column":27}},"19":{"start":{"line":37,"column":4},"end":{"line":55,"column":5}},"20":{"start":{"line":38,"column":6},"end":{"line":43,"column":7}},"21":{"start":{"line":42,"column":8},"end":{"line":42,"column":14}},"22":{"start":{"line":44,"column":6},"end":{"line":46,"column":7}},"23":{"start":{"line":45,"column":8},"end":{"line":45,"column":14}},"24":{"start":{"line":48,"column":6},"end":{"line":54,"column":8}},"25":{"start":{"line":59,"column":0},"end":{"line":59,"column":24}},"26":{"start":{"line":60,"column":0},"end":{"line":60,"column":24}},"27":{"start":{"line":61,"column":0},"end":{"line":61,"column":21}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":28}},{"start":{"line":40,"column":11},"end":{"line":40,"column":35}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":6}},{"start":{"line":44,"column":6},"end":{"line":44,"column":6}}]}},"code":["\"use strict\"","","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"block-no-single-line\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected single-line block\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    result.warn((","      \"'block-no-single-line' has been deprecated and in 8.0 will be removed. \" +","      \"Instead use 'block-opening-brace-newline-after' and 'block-closing-brace-newline-before' with the \\\"always\\\" option.\"","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: \"https://stylelint.io/user-guide/rules/block-no-single-line/\",","    })","","    // Check both kinds of statements: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      if (","        !hasBlock(statement)","        || hasEmptyBlock(statement)","      ) {","        return","      }","      if (!isSingleLineString(blockString(statement))) {","        return","      }","","      report({","        message: messages.rejected,","        node: statement,","        index: beforeBlockString(statement, { noRawBefore: true }).length,","        result,","        ruleName,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"18":1,"19":0,"20":0,"21":0,"22":0,"25":0,"34":0,"35":0,"37":1,"38":0,"42":0,"44":0,"45":0,"48":0,"59":1,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-opening-brace-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-opening-brace-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":1,"34":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":13},"end":{"line":22,"column":36}}},"2":{"name":"check","line":42,"loc":{"start":{"line":42,"column":4},"end":{"line":42,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":68}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":56}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":66}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":52}},"12":{"start":{"line":16,"column":0},"end":{"line":20,"column":2}},"13":{"start":{"line":17,"column":23},"end":{"line":17,"column":53}},"14":{"start":{"line":18,"column":32},"end":{"line":18,"column":84}},"15":{"start":{"line":19,"column":32},"end":{"line":19,"column":89}},"16":{"start":{"line":22,"column":0},"end":{"line":73,"column":1}},"17":{"start":{"line":23,"column":2},"end":{"line":23,"column":69}},"18":{"start":{"line":25,"column":2},"end":{"line":72,"column":3}},"19":{"start":{"line":26,"column":4},"end":{"line":33,"column":6}},"20":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"21":{"start":{"line":35,"column":6},"end":{"line":35,"column":12}},"22":{"start":{"line":39,"column":4},"end":{"line":39,"column":25}},"23":{"start":{"line":40,"column":4},"end":{"line":40,"column":27}},"24":{"start":{"line":42,"column":4},"end":{"line":71,"column":5}},"25":{"start":{"line":44,"column":6},"end":{"line":49,"column":7}},"26":{"start":{"line":48,"column":8},"end":{"line":48,"column":14}},"27":{"start":{"line":52,"column":6},"end":{"line":52,"column":61}},"28":{"start":{"line":53,"column":6},"end":{"line":55,"column":7}},"29":{"start":{"line":54,"column":8},"end":{"line":54,"column":14}},"30":{"start":{"line":57,"column":6},"end":{"line":70,"column":8}},"31":{"start":{"line":62,"column":10},"end":{"line":68,"column":12}},"32":{"start":{"line":75,"column":0},"end":{"line":75,"column":24}},"33":{"start":{"line":76,"column":0},"end":{"line":76,"column":24}},"34":{"start":{"line":77,"column":0},"end":{"line":77,"column":21}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":6}},{"start":{"line":44,"column":6},"end":{"line":44,"column":6}}]},"3":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":28}},{"start":{"line":46,"column":11},"end":{"line":46,"column":35}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]}},"code":["\"use strict\"","","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const nextNonCommentNode = require(\"../../utils/nextNonCommentNode\")","const rawNodeString = require(\"../../utils/rawNodeString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"block-opening-brace-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\"{\\\"\",","  expectedAfterMultiLine: () => \"Expected newline after \\\"{\\\" of a multi-line block\",","  rejectedAfterMultiLine: () => \"Unexpected whitespace after \\\"{\\\" of a multi-line block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statement: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      // Return early if blockless or has an empty block","      if (","        !hasBlock(statement)","        || hasEmptyBlock(statement)","      ) {","        return","      }","","      // Allow an end-of-line comment","      const nodeToCheck = nextNonCommentNode(statement.first)","      if (!nodeToCheck) {","        return","      }","","      checker.afterOneOnly({","        source: rawNodeString(nodeToCheck),","        index: -1,","        lineCheckStr: blockString(statement),","        err: m => {","          report({","            message: m,","            node: statement,","            index: beforeBlockString(statement, { noRawBefore: true }).length + 1,","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"18":0,"19":0,"22":1,"23":0,"25":0,"26":0,"34":0,"35":0,"39":0,"40":0,"42":1,"44":0,"48":0,"52":0,"53":0,"54":0,"57":0,"62":0,"75":1,"76":1,"77":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-opening-brace-newline-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-opening-brace-newline-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":13},"end":{"line":22,"column":36}}},"2":{"name":"check","line":44,"loc":{"start":{"line":44,"column":4},"end":{"line":44,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":66}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":53}},"10":{"start":{"line":14,"column":0},"end":{"line":20,"column":2}},"11":{"start":{"line":15,"column":24},"end":{"line":15,"column":55}},"12":{"start":{"line":16,"column":34},"end":{"line":16,"column":88}},"13":{"start":{"line":17,"column":34},"end":{"line":17,"column":93}},"14":{"start":{"line":18,"column":33},"end":{"line":18,"column":86}},"15":{"start":{"line":19,"column":33},"end":{"line":19,"column":91}},"16":{"start":{"line":22,"column":0},"end":{"line":77,"column":1}},"17":{"start":{"line":23,"column":2},"end":{"line":23,"column":69}},"18":{"start":{"line":25,"column":2},"end":{"line":76,"column":3}},"19":{"start":{"line":26,"column":4},"end":{"line":35,"column":6}},"20":{"start":{"line":36,"column":4},"end":{"line":38,"column":5}},"21":{"start":{"line":37,"column":6},"end":{"line":37,"column":12}},"22":{"start":{"line":41,"column":4},"end":{"line":41,"column":25}},"23":{"start":{"line":42,"column":4},"end":{"line":42,"column":27}},"24":{"start":{"line":44,"column":4},"end":{"line":75,"column":5}},"25":{"start":{"line":46,"column":6},"end":{"line":51,"column":7}},"26":{"start":{"line":50,"column":8},"end":{"line":50,"column":14}},"27":{"start":{"line":53,"column":6},"end":{"line":53,"column":49}},"28":{"start":{"line":54,"column":6},"end":{"line":54,"column":82}},"29":{"start":{"line":56,"column":6},"end":{"line":56,"column":45}},"30":{"start":{"line":57,"column":6},"end":{"line":59,"column":7}},"31":{"start":{"line":58,"column":8},"end":{"line":58,"column":18}},"32":{"start":{"line":61,"column":6},"end":{"line":74,"column":8}},"33":{"start":{"line":66,"column":10},"end":{"line":72,"column":12}},"34":{"start":{"line":79,"column":0},"end":{"line":79,"column":24}},"35":{"start":{"line":80,"column":0},"end":{"line":80,"column":24}},"36":{"start":{"line":81,"column":0},"end":{"line":81,"column":21}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]},"3":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":28}},{"start":{"line":48,"column":11},"end":{"line":48,"column":35}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]}},"code":["\"use strict\"","","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"block-opening-brace-newline-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected newline before \\\"{\\\"\",","  expectedBeforeSingleLine: () => \"Expected newline before \\\"{\\\" of a single-line block\",","  rejectedBeforeSingleLine: () => \"Unexpected whitespace before \\\"{\\\" of a single-line block\",","  expectedBeforeMultiLine: () => \"Expected newline before \\\"{\\\" of a multi-line block\",","  rejectedBeforeMultiLine: () => \"Unexpected whitespace before \\\"{\\\" of a multi-line block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual : expectation,","      possible : [","        \"always\",","        \"always-single-line\",","        \"never-single-line\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statement: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      // Return early if blockless or has an empty block","      if (","        !hasBlock(statement)","        || hasEmptyBlock(statement)","      ) {","        return","      }","","      const source = beforeBlockString(statement)","      const beforeBraceNoRaw = beforeBlockString(statement, { noRawBefore: true })","","      let index = beforeBraceNoRaw.length - 1","      if (beforeBraceNoRaw[index - 1] === \"\\r\") {","        index -= 1","      }","","      checker.beforeAllowingIndentation({","        lineCheckStr: blockString(statement),","        source,","        index: source.length,","        err: m => {","          report({","            message: m,","            node: statement,","            index,","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"22":1,"23":0,"25":0,"26":0,"36":0,"37":0,"41":0,"42":0,"44":1,"46":0,"50":0,"53":0,"54":0,"56":0,"57":0,"58":0,"61":0,"66":0,"79":1,"80":1,"81":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-opening-brace-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-opening-brace-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":1,"31":1,"32":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":13},"end":{"line":23,"column":36}}},"2":{"name":"check","line":45,"loc":{"start":{"line":45,"column":4},"end":{"line":45,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":66}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":50}},"10":{"start":{"line":14,"column":0},"end":{"line":21,"column":2}},"11":{"start":{"line":15,"column":23},"end":{"line":15,"column":58}},"12":{"start":{"line":16,"column":23},"end":{"line":16,"column":58}},"13":{"start":{"line":17,"column":33},"end":{"line":17,"column":91}},"14":{"start":{"line":18,"column":33},"end":{"line":18,"column":91}},"15":{"start":{"line":19,"column":32},"end":{"line":19,"column":89}},"16":{"start":{"line":20,"column":32},"end":{"line":20,"column":89}},"17":{"start":{"line":23,"column":0},"end":{"line":69,"column":1}},"18":{"start":{"line":24,"column":2},"end":{"line":24,"column":67}},"19":{"start":{"line":25,"column":2},"end":{"line":68,"column":3}},"20":{"start":{"line":26,"column":4},"end":{"line":36,"column":6}},"21":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"22":{"start":{"line":38,"column":6},"end":{"line":38,"column":12}},"23":{"start":{"line":42,"column":4},"end":{"line":42,"column":25}},"24":{"start":{"line":43,"column":4},"end":{"line":43,"column":27}},"25":{"start":{"line":45,"column":4},"end":{"line":67,"column":5}},"26":{"start":{"line":47,"column":6},"end":{"line":52,"column":7}},"27":{"start":{"line":51,"column":8},"end":{"line":51,"column":14}},"28":{"start":{"line":54,"column":6},"end":{"line":66,"column":8}},"29":{"start":{"line":58,"column":10},"end":{"line":64,"column":12}},"30":{"start":{"line":71,"column":0},"end":{"line":71,"column":24}},"31":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}},"32":{"start":{"line":73,"column":0},"end":{"line":73,"column":21}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"3":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":28}},{"start":{"line":49,"column":11},"end":{"line":49,"column":35}}]}},"code":["\"use strict\"","","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"block-opening-brace-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\"{\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\"{\\\"\",","  expectedAfterSingleLine: () => \"Expected single space after \\\"{\\\" of a single-line block\",","  rejectedAfterSingleLine: () => \"Unexpected whitespace after \\\"{\\\" of a single-line block\",","  expectedAfterMultiLine: () => \"Expected single space after \\\"{\\\" of a multi-line block\",","  rejectedAfterMultiLine: () => \"Unexpected whitespace after \\\"{\\\" of a multi-line block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statements: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      // Return early if blockless or has an empty block","      if (","        !hasBlock(statement)","        || hasEmptyBlock(statement)","      ) {","        return","      }","","      checker.after({","        source: blockString(statement),","        index: 0,","        err: m => {","          report({","            message: m,","            node: statement,","            index: beforeBlockString(statement, { noRawBefore: true }).length + 1,","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"23":1,"24":0,"25":0,"26":0,"37":0,"38":0,"42":0,"43":0,"45":1,"47":0,"51":0,"54":0,"58":0,"71":1,"72":1,"73":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-opening-brace-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/block-opening-brace-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":1,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":13},"end":{"line":25,"column":45}}},"2":{"name":"check","line":53,"loc":{"start":{"line":53,"column":4},"end":{"line":53,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":54}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":48}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":60}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":56}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":66}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":51}},"12":{"start":{"line":16,"column":0},"end":{"line":23,"column":2}},"13":{"start":{"line":17,"column":24},"end":{"line":17,"column":60}},"14":{"start":{"line":18,"column":24},"end":{"line":18,"column":60}},"15":{"start":{"line":19,"column":34},"end":{"line":19,"column":93}},"16":{"start":{"line":20,"column":34},"end":{"line":20,"column":93}},"17":{"start":{"line":21,"column":33},"end":{"line":21,"column":91}},"18":{"start":{"line":22,"column":33},"end":{"line":22,"column":91}},"19":{"start":{"line":25,"column":0},"end":{"line":91,"column":1}},"20":{"start":{"line":26,"column":2},"end":{"line":26,"column":67}},"21":{"start":{"line":27,"column":2},"end":{"line":90,"column":3}},"22":{"start":{"line":28,"column":4},"end":{"line":44,"column":6}},"23":{"start":{"line":45,"column":4},"end":{"line":47,"column":5}},"24":{"start":{"line":46,"column":6},"end":{"line":46,"column":12}},"25":{"start":{"line":50,"column":4},"end":{"line":50,"column":25}},"26":{"start":{"line":51,"column":4},"end":{"line":51,"column":27}},"27":{"start":{"line":53,"column":4},"end":{"line":89,"column":5}},"28":{"start":{"line":55,"column":6},"end":{"line":60,"column":7}},"29":{"start":{"line":59,"column":8},"end":{"line":59,"column":14}},"30":{"start":{"line":63,"column":6},"end":{"line":65,"column":7}},"31":{"start":{"line":64,"column":8},"end":{"line":64,"column":14}},"32":{"start":{"line":67,"column":6},"end":{"line":67,"column":49}},"33":{"start":{"line":68,"column":6},"end":{"line":68,"column":82}},"34":{"start":{"line":70,"column":6},"end":{"line":70,"column":45}},"35":{"start":{"line":71,"column":6},"end":{"line":73,"column":7}},"36":{"start":{"line":72,"column":8},"end":{"line":72,"column":18}},"37":{"start":{"line":75,"column":6},"end":{"line":88,"column":8}},"38":{"start":{"line":80,"column":10},"end":{"line":86,"column":12}},"39":{"start":{"line":93,"column":0},"end":{"line":93,"column":24}},"40":{"start":{"line":94,"column":0},"end":{"line":94,"column":24}},"41":{"start":{"line":95,"column":0},"end":{"line":95,"column":21}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"3":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":28}},{"start":{"line":57,"column":11},"end":{"line":57,"column":35}}]},"4":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":6},"end":{"line":63,"column":6}},{"start":{"line":63,"column":6},"end":{"line":63,"column":6}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":6}},{"start":{"line":71,"column":6},"end":{"line":71,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const blockString = require(\"../../utils/blockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"block-opening-brace-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\"{\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\"{\\\"\",","  expectedBeforeSingleLine: () => \"Expected single space before \\\"{\\\" of a single-line block\",","  rejectedBeforeSingleLine: () => \"Unexpected whitespace before \\\"{\\\" of a single-line block\",","  expectedBeforeMultiLine: () => \"Expected single space before \\\"{\\\" of a multi-line block\",","  rejectedBeforeMultiLine: () => \"Unexpected whitespace before \\\"{\\\" of a multi-line block\",","})","","const rule = function (expectation, options) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    }, {","      actual: options,","      possible: {","        ignoreAtRules: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    // Check both kinds of statements: rules and at-rules","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      // Return early if blockless or has an empty block","      if (","        !hasBlock(statement)","        || hasEmptyBlock(statement)","      ) {","        return","      }","","      // Return early if at-rule is to be ignored","      if (optionsMatches(options, \"ignoreAtRules\", statement.name)) {","        return","      }","","      const source = beforeBlockString(statement)","      const beforeBraceNoRaw = beforeBlockString(statement, { noRawBefore: true })","","      let index = beforeBraceNoRaw.length - 1","      if (beforeBraceNoRaw[index - 1] === \"\\r\") {","        index -= 1","      }","","      checker.before({","        source,","        index: source.length,","        lineCheckStr: blockString(statement),","        err: m => {","          report({","            message: m,","            node: statement,","            index,","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"25":1,"26":0,"27":0,"28":0,"45":0,"46":0,"50":0,"51":0,"53":1,"55":0,"59":0,"63":0,"64":0,"67":0,"68":0,"70":0,"71":0,"72":0,"75":0,"80":0,"93":1,"94":1,"95":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-hex-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-hex-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":33}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":34},"end":{"line":12,"column":76}},"9":{"start":{"line":15,"column":0},"end":{"line":57,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":56,"column":3}},"11":{"start":{"line":17,"column":4},"end":{"line":23,"column":6}},"12":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"13":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"14":{"start":{"line":28,"column":4},"end":{"line":55,"column":6}},"15":{"start":{"line":29,"column":6},"end":{"line":29,"column":70}},"16":{"start":{"line":30,"column":6},"end":{"line":54,"column":8}},"17":{"start":{"line":31,"column":8},"end":{"line":31,"column":83}},"18":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"19":{"start":{"line":33,"column":10},"end":{"line":33,"column":16}},"20":{"start":{"line":36,"column":8},"end":{"line":36,"column":36}},"21":{"start":{"line":37,"column":8},"end":{"line":37,"column":52}},"22":{"start":{"line":38,"column":8},"end":{"line":38,"column":52}},"23":{"start":{"line":39,"column":8},"end":{"line":41,"column":25}},"24":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"25":{"start":{"line":44,"column":10},"end":{"line":44,"column":16}},"26":{"start":{"line":47,"column":8},"end":{"line":53,"column":10}},"27":{"start":{"line":59,"column":0},"end":{"line":59,"column":24}},"28":{"start":{"line":60,"column":0},"end":{"line":60,"column":24}},"29":{"start":{"line":61,"column":0},"end":{"line":61,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"3":{"line":39,"type":"cond-expr","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":25}},{"start":{"line":41,"column":12},"end":{"line":41,"column":25}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]}},"code":["\"use strict\"","","const blurFunctionArguments = require(\"../../utils/blurFunctionArguments\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const styleSearch = require(\"style-search\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"color-hex-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const declString = blurFunctionArguments(decl.toString(), \"url\")","      styleSearch({ source: declString, target: \"#\" }, match => {","        const hexMatch = /^#[0-9A-Za-z]+/.exec(declString.substr(match.startIndex))","        if (!hexMatch) {","          return","        }","","        const hexValue = hexMatch[0]","        const hexValueLower = hexValue.toLowerCase()","        const hexValueUpper = hexValue.toUpperCase()","        const expectedHex = expectation === \"lower\"","          ? hexValueLower","          : hexValueUpper","","        if (hexValue === expectedHex) {","          return","        }","","        report({","          message: messages.expected(hexValue, expectedHex),","          node: decl,","          index: match.startIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"16":0,"17":0,"24":0,"25":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"36":0,"37":0,"38":0,"39":0,"43":0,"44":0,"47":0,"59":1,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/blurFunctionArguments.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/blurFunctionArguments.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":17},"end":{"line":22,"column":85}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":47}},"3":{"start":{"line":22,"column":0},"end":{"line":43,"column":1}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":102}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":56}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":46}},"7":{"start":{"line":27,"column":2},"end":{"line":29,"column":3}},"8":{"start":{"line":28,"column":4},"end":{"line":28,"column":17}},"9":{"start":{"line":31,"column":2},"end":{"line":31,"column":60}},"10":{"start":{"line":33,"column":2},"end":{"line":33,"column":21}},"11":{"start":{"line":34,"column":2},"end":{"line":34,"column":26}},"12":{"start":{"line":35,"column":2},"end":{"line":41,"column":3}},"13":{"start":{"line":36,"column":4},"end":{"line":36,"column":107}},"14":{"start":{"line":37,"column":4},"end":{"line":37,"column":119}},"15":{"start":{"line":38,"column":4},"end":{"line":38,"column":69}},"16":{"start":{"line":39,"column":4},"end":{"line":39,"column":123}},"17":{"start":{"line":40,"column":4},"end":{"line":40,"column":40}},"18":{"start":{"line":42,"column":2},"end":{"line":42,"column":15}}},"branchMap":{"1":{"line":23,"type":"cond-expr","locations":[{"start":{"line":23,"column":84},"end":{"line":23,"column":96}},{"start":{"line":23,"column":99},"end":{"line":23,"column":102}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":31},"end":{"line":23,"column":51}},{"start":{"line":23,"column":55},"end":{"line":23,"column":81}}]},"3":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]}},"code":["/* @flow */","\"use strict\"","const _ = require(\"lodash\")","const balancedMatch = require(\"balanced-match\")","","/**"," * Replace all of the characters that are arguments to a certain"," * CSS function with some innocuous character."," *"," * This is useful if you need to use a RegExp to find a string"," * but want to ignore matches in certain functions (e.g. `url()`,"," * which might contain all kinds of false positives)."," *"," * For example:"," * blurFunctionArguments(\"abc url(abc) abc\", \"url\") === \"abc url(```) abc\""," *"," * @param {string} source"," * @param {string} functionName"," * @param {[string]} blurChar=\"`\""," * @return {string} - The result string, with the function arguments \"blurred\""," */","module.exports = function (source/*: string*/, functionName/*: string*/)/*: string*/ {","  const blurChar/*: string*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"`\"","","  const nameWithParen = `${functionName.toLowerCase()}(`","  const lowerCaseSource = source.toLowerCase()","  if (!_.includes(lowerCaseSource, nameWithParen)) {","    return source","  }","","  const functionNameLength/*: number*/ = functionName.length","","  let result = source","  let searchStartIndex = 0","  while (lowerCaseSource.indexOf(nameWithParen, searchStartIndex) !== -1) {","    const openingParenIndex = lowerCaseSource.indexOf(nameWithParen, searchStartIndex) + functionNameLength","    const closingParenIndex = balancedMatch(\"(\", \")\", lowerCaseSource.slice(openingParenIndex)).end + openingParenIndex","    const argumentsLength = closingParenIndex - openingParenIndex - 1","    result = result.slice(0, openingParenIndex + 1) + _.repeat(blurChar, argumentsLength) + result.slice(closingParenIndex)","    searchStartIndex = closingParenIndex","  }","  return result","}",""],"l":{"3":1,"4":1,"22":1,"23":0,"25":0,"26":0,"27":0,"28":0,"31":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-hex-length/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-hex-length/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":1,"40":1,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0,0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":36}}},"2":{"name":"canShrink","line":72,"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}}},"3":{"name":"shorter","line":84,"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":22}}},"4":{"name":"longer","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":21}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":35}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":11,"column":34},"end":{"line":11,"column":76}},"8":{"start":{"line":14,"column":0},"end":{"line":70,"column":1}},"9":{"start":{"line":15,"column":2},"end":{"line":69,"column":3}},"10":{"start":{"line":16,"column":4},"end":{"line":22,"column":6}},"11":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"12":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"13":{"start":{"line":27,"column":4},"end":{"line":68,"column":6}},"14":{"start":{"line":28,"column":6},"end":{"line":28,"column":40}},"15":{"start":{"line":30,"column":6},"end":{"line":67,"column":8}},"16":{"start":{"line":31,"column":8},"end":{"line":31,"column":83}},"17":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"18":{"start":{"line":33,"column":10},"end":{"line":33,"column":16}},"19":{"start":{"line":36,"column":8},"end":{"line":36,"column":36}},"20":{"start":{"line":38,"column":8},"end":{"line":44,"column":9}},"21":{"start":{"line":43,"column":10},"end":{"line":43,"column":16}},"22":{"start":{"line":46,"column":8},"end":{"line":54,"column":9}},"23":{"start":{"line":53,"column":10},"end":{"line":53,"column":16}},"24":{"start":{"line":56,"column":8},"end":{"line":58,"column":19}},"25":{"start":{"line":60,"column":8},"end":{"line":66,"column":10}},"26":{"start":{"line":72,"column":0},"end":{"line":82,"column":1}},"27":{"start":{"line":73,"column":2},"end":{"line":73,"column":25}},"28":{"start":{"line":75,"column":2},"end":{"line":81,"column":5}},"29":{"start":{"line":84,"column":0},"end":{"line":90,"column":1}},"30":{"start":{"line":85,"column":2},"end":{"line":85,"column":22}},"31":{"start":{"line":86,"column":2},"end":{"line":88,"column":3}},"32":{"start":{"line":87,"column":4},"end":{"line":87,"column":24}},"33":{"start":{"line":89,"column":2},"end":{"line":89,"column":19}},"34":{"start":{"line":92,"column":0},"end":{"line":98,"column":1}},"35":{"start":{"line":93,"column":2},"end":{"line":93,"column":22}},"36":{"start":{"line":94,"column":2},"end":{"line":96,"column":3}},"37":{"start":{"line":95,"column":4},"end":{"line":95,"column":33}},"38":{"start":{"line":97,"column":2},"end":{"line":97,"column":19}},"39":{"start":{"line":100,"column":0},"end":{"line":100,"column":24}},"40":{"start":{"line":101,"column":0},"end":{"line":101,"column":24}},"41":{"start":{"line":102,"column":0},"end":{"line":102,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"4":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":10},"end":{"line":39,"column":32}},{"start":{"line":40,"column":13},"end":{"line":40,"column":34}},{"start":{"line":41,"column":13},"end":{"line":41,"column":34}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"6":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":10},"end":{"line":47,"column":33}},{"start":{"line":49,"column":12},"end":{"line":49,"column":31}},{"start":{"line":50,"column":15},"end":{"line":50,"column":35}}]},"7":{"line":56,"type":"cond-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":18}},{"start":{"line":58,"column":12},"end":{"line":58,"column":19}}]},"8":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":9},"end":{"line":75,"column":26}},{"start":{"line":76,"column":7},"end":{"line":76,"column":24}},{"start":{"line":77,"column":7},"end":{"line":77,"column":24}},{"start":{"line":78,"column":8},"end":{"line":78,"column":24}},{"start":{"line":79,"column":9},"end":{"line":79,"column":25}},{"start":{"line":80,"column":9},"end":{"line":80,"column":26}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"color-hex-length\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"short\",","        \"long\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const declString = decl.toString()","","      styleSearch({ source: declString, target: \"#\" }, match => {","        const hexMatch = /^#[0-9A-Za-z]+/.exec(declString.substr(match.startIndex))","        if (!hexMatch) {","          return","        }","","        const hexValue = hexMatch[0]","","        if (","          expectation === \"long\"","          && hexValue.length !== 4","          && hexValue.length !== 5","        ) {","          return","        }","","        if (","          expectation === \"short\"","          && (","            hexValue.length < 6","            || !canShrink(hexValue)","          )","        ) {","          return","        }","","        const variant = expectation === \"long\"","          ? longer","          : shorter","","        report({","          message: messages.expected(hexValue, variant(hexValue)),","          node: decl,","          index: match.startIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","function canShrink(hex) {","  hex = hex.toLowerCase()","","  return hex[1] === hex[2]","    && hex[3] === hex[4]","    && hex[5] === hex[6]","    && (hex.length === 7","      || hex.length === 9","      && hex[7] === hex[8]","    )","}","","function shorter(hex) {","  let hexVariant = \"#\"","  for (let i = 1; i < hex.length; i = i + 2) {","    hexVariant += hex[i]","  }","  return hexVariant","}","","function longer(hex) {","  let hexVariant = \"#\"","  for (let i = 1; i < hex.length; i++) {","    hexVariant += hex[i] + hex[i]","  }","  return hexVariant","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"14":1,"15":0,"16":0,"23":0,"24":0,"27":0,"28":0,"30":0,"31":0,"32":0,"33":0,"36":0,"38":0,"43":0,"46":0,"53":0,"56":0,"60":0,"72":1,"73":0,"75":0,"84":1,"85":0,"86":0,"87":0,"89":0,"92":1,"93":0,"94":0,"95":0,"97":0,"100":1,"101":1,"102":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-named/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-named/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":0,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":0,"61":1,"62":1,"63":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":13},"end":{"line":29,"column":45}}},"2":{"name":"complain","line":131,"loc":{"start":{"line":131,"column":4},"end":{"line":131,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":74}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":64}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":60}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":60}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":44}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":56}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":62}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":51}},"13":{"start":{"line":16,"column":0},"end":{"line":16,"column":30}},"14":{"start":{"line":18,"column":0},"end":{"line":21,"column":2}},"15":{"start":{"line":19,"column":33},"end":{"line":19,"column":74}},"16":{"start":{"line":20,"column":21},"end":{"line":20,"column":56}},"17":{"start":{"line":24,"column":0},"end":{"line":27,"column":1}},"18":{"start":{"line":29,"column":0},"end":{"line":141,"column":1}},"19":{"start":{"line":30,"column":2},"end":{"line":140,"column":3}},"20":{"start":{"line":31,"column":4},"end":{"line":44,"column":6}},"21":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"22":{"start":{"line":47,"column":6},"end":{"line":47,"column":12}},"23":{"start":{"line":50,"column":4},"end":{"line":50,"column":51}},"24":{"start":{"line":52,"column":4},"end":{"line":129,"column":6}},"25":{"start":{"line":53,"column":6},"end":{"line":55,"column":7}},"26":{"start":{"line":54,"column":8},"end":{"line":54,"column":14}},"27":{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},"28":{"start":{"line":59,"column":8},"end":{"line":59,"column":14}},"29":{"start":{"line":62,"column":6},"end":{"line":128,"column":8}},"30":{"start":{"line":63,"column":8},"end":{"line":65,"column":40}},"31":{"start":{"line":67,"column":8},"end":{"line":72,"column":9}},"32":{"start":{"line":71,"column":10},"end":{"line":71,"column":22}},"33":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"34":{"start":{"line":75,"column":10},"end":{"line":75,"column":22}},"35":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"36":{"start":{"line":79,"column":10},"end":{"line":79,"column":16}},"37":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"38":{"start":{"line":83,"column":10},"end":{"line":83,"column":16}},"39":{"start":{"line":87,"column":8},"end":{"line":94,"column":9}},"40":{"start":{"line":92,"column":10},"end":{"line":92,"column":93}},"41":{"start":{"line":93,"column":10},"end":{"line":93,"column":16}},"42":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"43":{"start":{"line":98,"column":10},"end":{"line":98,"column":16}},"44":{"start":{"line":102,"column":8},"end":{"line":117,"column":9}},"45":{"start":{"line":107,"column":10},"end":{"line":107,"column":90}},"46":{"start":{"line":108,"column":10},"end":{"line":108,"column":24}},"47":{"start":{"line":109,"column":10},"end":{"line":115,"column":11}},"48":{"start":{"line":110,"column":12},"end":{"line":110,"column":39}},"49":{"start":{"line":111,"column":12},"end":{"line":114,"column":13}},"50":{"start":{"line":112,"column":14},"end":{"line":112,"column":128}},"51":{"start":{"line":113,"column":14},"end":{"line":113,"column":20}},"52":{"start":{"line":116,"column":10},"end":{"line":116,"column":16}},"53":{"start":{"line":120,"column":8},"end":{"line":120,"column":22}},"54":{"start":{"line":121,"column":8},"end":{"line":127,"column":9}},"55":{"start":{"line":122,"column":10},"end":{"line":122,"column":37}},"56":{"start":{"line":123,"column":10},"end":{"line":126,"column":11}},"57":{"start":{"line":124,"column":12},"end":{"line":124,"column":107}},"58":{"start":{"line":125,"column":12},"end":{"line":125,"column":18}},"59":{"start":{"line":131,"column":4},"end":{"line":139,"column":5}},"60":{"start":{"line":132,"column":6},"end":{"line":138,"column":8}},"61":{"start":{"line":143,"column":0},"end":{"line":143,"column":24}},"62":{"start":{"line":144,"column":0},"end":{"line":144,"column":24}},"63":{"start":{"line":145,"column":0},"end":{"line":145,"column":21}}},"branchMap":{"1":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"5":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":10},"end":{"line":68,"column":62}},{"start":{"line":69,"column":13},"end":{"line":69,"column":32}}]},"6":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":8}},{"start":{"line":74,"column":8},"end":{"line":74,"column":8}}]},"7":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"8":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"9":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":8}},{"start":{"line":87,"column":8},"end":{"line":87,"column":8}}]},"10":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":10},"end":{"line":88,"column":33}},{"start":{"line":89,"column":13},"end":{"line":89,"column":28}},{"start":{"line":90,"column":13},"end":{"line":90,"column":60}}]},"11":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":8}},{"start":{"line":97,"column":8},"end":{"line":97,"column":8}}]},"12":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":8}},{"start":{"line":102,"column":8},"end":{"line":102,"column":8}}]},"13":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":10},"end":{"line":103,"column":29}},{"start":{"line":104,"column":13},"end":{"line":104,"column":68}}]},"14":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":12},"end":{"line":111,"column":12}},{"start":{"line":111,"column":12},"end":{"line":111,"column":12}}]},"15":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":10},"end":{"line":123,"column":10}},{"start":{"line":123,"column":10},"end":{"line":123,"column":10}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const isStandardSyntaxFunction = require(\"../../utils/isStandardSyntaxFunction\")","const isStandardSyntaxValue = require(\"../../utils/isStandardSyntaxValue\")","const keywordSets = require(\"../../reference/keywordSets\")","const namedColorData = require(\"../../reference/namedColorData\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const propertySets = require(\"../../reference/propertySets\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"color-named\"","","const messages = ruleMessages(ruleName, {","  expected: (named, original) => `Expected \"${original}\" to be \"${named}\"`,","  rejected: named => `Unexpected named color \"${named}\"`,","})","","// Todo tested on case insensivity","const NODE_TYPES = [","  \"word\",","  \"function\",","]","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"never\",","        \"always-where-possible\",","      ],","    }, {","      actual: options,","      possible: {","        ignoreProperties: [_.isString],","        ignore: [\"inside-function\"],","      },","      optional: true,","    })","","    if (!validOptions) {","      return","    }","","    const namedColors = Object.keys(namedColorData)","","    root.walkDecls(decl => {","      if (propertySets.acceptCustomIdents.has(decl.prop)) {","        return","      }","","      // Return early if the property is to be ignored","      if (optionsMatches(options, \"ignoreProperties\", decl.prop)) {","        return","      }","","      valueParser(decl.value).walk(node => {","        const value = node.value,","          type = node.type,","          sourceIndex = node.sourceIndex","","        if (","          optionsMatches(options, \"ignore\", \"inside-function\")","          && type === \"function\"","        ) {","          return false","        }","","        if (!isStandardSyntaxFunction(node)) {","          return false","        }","","        if (!isStandardSyntaxValue(value)) {","          return","        }","        // Return early if neither a word nor a function","        if (NODE_TYPES.indexOf(type) === -1) {","          return","        }","","        // Check for named colors for \"never\" option","        if (","          expectation === \"never\"","          && type === \"word\"","          && namedColors.indexOf(value.toLowerCase()) !== -1","        ) {","          complain(messages.rejected(value), decl, declarationValueIndex(decl) + sourceIndex)","          return","        }","","        // Check \"always-where-possible\" option ...","        if (expectation !== \"always-where-possible\") {","          return","        }","","        // First by checking for alternative color function representations ...","        if (","          type === \"function\"","          && keywordSets.colorFunctionNames.has(value.toLowerCase())","        ) {","          // Remove all spaces to match what's in `representations`","          const normalizedFunctionString = valueParser.stringify(node).replace(/\\s+/g, \"\")","          let namedColor","          for (let i = 0, l = namedColors.length; i < l; i++) {","            namedColor = namedColors[i]","            if (namedColorData[namedColor].func.indexOf(normalizedFunctionString.toLowerCase()) !== -1) {","              complain(messages.expected(namedColor, normalizedFunctionString), decl, declarationValueIndex(decl) + sourceIndex)","              return // Exit as soon as a problem is found","            }","          }","          return","        }","","        // Then by checking for alternative hex representations","        let namedColor","        for (let i = 0, l = namedColors.length; i < l; i++) {","          namedColor = namedColors[i]","          if (namedColorData[namedColor].hex.indexOf(value.toLowerCase()) !== -1) {","            complain(messages.expected(namedColor, value), decl, declarationValueIndex(decl) + sourceIndex)","            return // Exit as soon as a problem is found","          }","        }","      })","    })","","    function complain(message, node, index) {","      report({","        result,","        ruleName,","        message,","        node,","        index,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"16":1,"18":1,"19":0,"20":0,"24":1,"29":1,"30":0,"31":0,"46":0,"47":0,"50":0,"52":0,"53":0,"54":0,"58":0,"59":0,"62":0,"63":0,"67":0,"71":0,"74":0,"75":0,"78":0,"79":0,"82":0,"83":0,"87":0,"92":0,"93":0,"97":0,"98":0,"102":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"116":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"131":1,"132":0,"143":1,"144":1,"145":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/declarationValueIndex.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/declarationValueIndex.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":57}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":11,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":50}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":82}},"4":{"start":{"line":10,"column":2},"end":{"line":10,"column":33}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Get the index of a declaration's value"," */","module.exports = function (decl/*: Object*/)/*: number*/ {","  const beforeColon = decl.toString().indexOf(\":\")","  const afterColon = decl.raw(\"between\").length - decl.raw(\"between\").indexOf(\":\")","  return beforeColon + afterColon","}",""],"l":{"7":1,"8":0,"9":0,"10":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxFunction.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxFunction.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":58}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":14,"column":1}},"2":{"start":{"line":9,"column":2},"end":{"line":11,"column":3}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":16}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":13}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":2},"end":{"line":9,"column":2}},{"start":{"line":9,"column":2},"end":{"line":9,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a function is standard"," */","module.exports = function (node/*: Object*/)/*: boolean*/ {","  // Function nodes without names are things in parentheses like Sass lists","  if (!node.value) {","    return false","  }","","  return true","}",""],"l":{"7":1,"9":0,"10":0,"13":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxValue.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxValue.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":59}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":61}},"2":{"start":{"line":8,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":12,"column":3}},"4":{"start":{"line":11,"column":4},"end":{"line":11,"column":16}},"5":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":16}},"7":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"8":{"start":{"line":21,"column":4},"end":{"line":21,"column":16}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":2},"end":{"line":10,"column":2}},{"start":{"line":10,"column":2},"end":{"line":10,"column":2}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const hasInterpolation = require(\"../utils/hasInterpolation\")","/**"," * Check whether a value is standard"," */","module.exports = function (value/*: string*/)/*: boolean*/ {","  // SCSS variable","  if (value[0] === \"$\") {","    return false","  }","","  // Less variable","  if (value[0] === \"@\") {","    return false","  }","","  // SCSS or Less interpolation","  if (hasInterpolation(value)) {","    return false","  }","","  return true","}",""],"l":{"4":1,"8":1,"10":0,"11":0,"15":0,"16":0,"20":0,"21":0,"24":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasInterpolation.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasInterpolation.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":17},"end":{"line":13,"column":60}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":69}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":67}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":69}},"4":{"start":{"line":13,"column":0},"end":{"line":20,"column":1}},"5":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":15}},"7":{"start":{"line":19,"column":2},"end":{"line":19,"column":14}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":6},"end":{"line":15,"column":34}},{"start":{"line":15,"column":38},"end":{"line":15,"column":66}},{"start":{"line":15,"column":70},"end":{"line":15,"column":97}}]}},"code":["/* @flow */","\"use strict\"","","const hasLessInterpolation = require(\"../utils/hasLessInterpolation\")","const hasPsvInterpolation = require(\"../utils/hasPsvInterpolation\")","const hasScssInterpolation = require(\"../utils/hasScssInterpolation\")","/**"," * Check whether a string has interpolation"," *"," * @param {string} string"," * @return {boolean} If `true`, a string has interpolation"," */","module.exports = function (string/*: string*/)/*: boolean*/ {","  // SCSS or Less interpolation","  if (hasLessInterpolation(string) || hasScssInterpolation(string) || hasPsvInterpolation(string)) {","    return true","  }","","  return false","}",""],"l":{"4":1,"5":1,"6":1,"13":1,"15":0,"16":0,"19":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasLessInterpolation.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasLessInterpolation.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":60}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":16,"column":1}},"2":{"start":{"line":11,"column":2},"end":{"line":13,"column":3}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":15}},"4":{"start":{"line":15,"column":2},"end":{"line":15,"column":14}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":2},"end":{"line":11,"column":2}},{"start":{"line":11,"column":2},"end":{"line":11,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a string has less interpolation"," *"," * @param {string} string"," * @return {boolean} If `true`, a string has less interpolation"," */","module.exports = function (string/*: string*/)/*: boolean*/ {","  if (/@{.+?}/.test(string)) {","    return true","  }","","  return false","}",""],"l":{"10":1,"11":0,"12":0,"15":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasPsvInterpolation.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasPsvInterpolation.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":60}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":13,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":10,"column":3}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":15}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":14}}},"branchMap":{"1":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":2},"end":{"line":8,"column":2}},{"start":{"line":8,"column":2},"end":{"line":8,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a string has postcss-simple-vars interpolation"," */","module.exports = function (string/*: string*/)/*: boolean*/ {","  if (/\\$\\(.+?\\)/.test(string)) {","    return true","  }","","  return false","}",""],"l":{"7":1,"8":0,"9":0,"12":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasScssInterpolation.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hasScssInterpolation.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":60}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":13,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":10,"column":3}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":15}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":14}}},"branchMap":{"1":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":2},"end":{"line":8,"column":2}},{"start":{"line":8,"column":2},"end":{"line":8,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a string has scss interpolation"," */","module.exports = function (string/*: string*/)/*: boolean*/ {","  if (/#{.+?}/.test(string)) {","    return true","  }","","  return false","}",""],"l":{"7":1,"8":0,"9":0,"12":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/namedColorData.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/namedColorData.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":2858,"column":1}}},"branchMap":{},"code":["\"use strict\"","","module.exports = {","  \"aliceblue\": {","    \"hex\": [","      \"#f0f8ff\", \"#fff0f8ff\",","    ],","    \"func\": [","      \"rgb(240,248,255)\",","      \"rgba(240,248,255,1)\",","      \"rgba(240,248,255,100%)\",","      \"rgb(94%,97%,100%)\",","      \"rgba(94%,97%,100%,1)\",","      \"rgba(94%,97%,100%,100%)\",","      \"hsl(208,100%,97%)\",","      \"hsla(208,100%,97%,1)\",","      \"hsla(208,100%,97%,100%)\",","      \"hwb(208,94%,0%)\",","      \"hwb(208,94%,0%,1)\",","      \"hwb(208,94%,0%,100%)\",","    ],","  },","  \"antiquewhite\": {","    \"hex\": [","      \"#faebd7\", \"#fffaebd7\",","    ],","    \"func\": [","      \"rgb(250,235,215)\",","      \"rgba(250,235,215,1)\",","      \"rgba(250,235,215,100%)\",","      \"rgb(98%,92%,84%)\",","      \"rgba(98%,92%,84%,1)\",","      \"rgba(98%,92%,84%,100%)\",","      \"hsl(34,78%,91%)\",","      \"hsla(34,78%,91%,1)\",","      \"hsla(34,78%,91%,100%)\",","      \"hwb(34,84%,2%)\",","      \"hwb(34,84%,2%,1)\",","      \"hwb(34,84%,2%,100%)\",","    ],","  },","  \"aqua\": {","    \"hex\": [","      \"#00ffff\", \"#ff00ffff\", \"#0ff\", \"#f0ff\",","    ],","    \"func\": [","      \"rgb(0,255,255)\",","      \"rgba(0,255,255,1)\",","      \"rgba(0,255,255,100%)\",","      \"rgb(0%,100%,100%)\",","      \"rgba(0%,100%,100%,1)\",","      \"rgba(0%,100%,100%,100%)\",","      \"hsl(180,100%,50%)\",","      \"hsla(180,100%,50%,1)\",","      \"hsla(180,100%,50%,100%)\",","      \"hwb(180,0%,0%)\",","      \"hwb(180,0%,0%,1)\",","      \"hwb(180,0%,0%,100%)\",","    ],","  },","  \"aquamarine\": {","    \"hex\": [","      \"#7fffd4\", \"#ff7fffd4\",","    ],","    \"func\": [","      \"rgb(127,255,212)\",","      \"rgba(127,255,212,1)\",","      \"rgba(127,255,212,100%)\",","      \"rgb(50%,100%,83%)\",","      \"rgba(50%,100%,83%,1)\",","      \"rgba(50%,100%,83%,100%)\",","      \"hsl(160,100%,75%)\",","      \"hsla(160,100%,75%,1)\",","      \"hsla(160,100%,75%,100%)\",","      \"hwb(160,50%,0%)\",","      \"hwb(160,50%,0%,1)\",","      \"hwb(160,50%,0%,100%)\",","    ],","  },","  \"azure\": {","    \"hex\": [","      \"#f0ffff\", \"#fff0ffff\",","    ],","    \"func\": [","      \"rgb(240,255,255)\",","      \"rgba(240,255,255,1)\",","      \"rgba(240,255,255,100%)\",","      \"rgb(94%,100%,100%)\",","      \"rgba(94%,100%,100%,1)\",","      \"rgba(94%,100%,100%,100%)\",","      \"hsl(180,100%,97%)\",","      \"hsla(180,100%,97%,1)\",","      \"hsla(180,100%,97%,100%)\",","      \"hwb(180,94%,0%)\",","      \"hwb(180,94%,0%,1)\",","      \"hwb(180,94%,0%,100%)\",","    ],","  },","  \"beige\": {","    \"hex\": [","      \"#f5f5dc\", \"#fff5f5dc\",","    ],","    \"func\": [","      \"rgb(245,245,220)\",","      \"rgba(245,245,220,1)\",","      \"rgba(245,245,220,100%)\",","      \"rgb(96%,96%,86%)\",","      \"rgba(96%,96%,86%,1)\",","      \"rgba(96%,96%,86%,100%)\",","      \"hsl(60,56%,91%)\",","      \"hsla(60,56%,91%,1)\",","      \"hsla(60,56%,91%,100%)\",","      \"hwb(60,86%,4%)\",","      \"hwb(60,86%,4%,1)\",","      \"hwb(60,86%,4%,100%)\",","    ],","  },","  \"bisque\": {","    \"hex\": [","      \"#ffe4c4\", \"#ffffe4c4\",","    ],","    \"func\": [","      \"rgb(255,228,196)\",","      \"rgba(255,228,196,1)\",","      \"rgba(255,228,196,100%)\",","      \"rgb(100%,89%,77%)\",","      \"rgba(100%,89%,77%,1)\",","      \"rgba(100%,89%,77%,100%)\",","      \"hsl(33,100%,88%)\",","      \"hsla(33,100%,88%,1)\",","      \"hsla(33,100%,88%,100%)\",","      \"hwb(33,77%,0%)\",","      \"hwb(33,77%,0%,1)\",","      \"hwb(33,77%,0%,100%)\",","    ],","  },","  \"black\": {","    \"hex\": [","      \"#000000\", \"#ff000000\", \"#000\", \"#f000\",","    ],","    \"func\": [","      \"rgb(0,0,0)\",","      \"rgba(0,0,0,1)\",","      \"rgba(0,0,0,100%)\",","      \"rgb(0%,0%,0%)\",","      \"rgba(0%,0%,0%,1)\",","      \"rgba(0%,0%,0%,100%)\",","      \"hsl(0,0%,0%)\",","      \"hsla(0,0%,0%,1)\",","      \"hsla(0,0%,0%,100%)\",","      \"hwb(0,0%,100%)\",","      \"hwb(0,0%,100%,1)\",","      \"hwb(0,0%,100%,100%)\",","      \"gray(0)\",","      \"gray(0,1)\",","      \"gray(0,100%)\",","      \"gray(0%)\",","      \"gray(0%,1)\",","      \"gray(0%,100%)\",","    ],","  },","  \"blanchedalmond\": {","    \"hex\": [","      \"#ffebcd\", \"#ffffebcd\",","    ],","    \"func\": [","      \"rgb(255,235,205)\",","      \"rgba(255,235,205,1)\",","      \"rgba(255,235,205,100%)\",","      \"rgb(100%,92%,80%)\",","      \"rgba(100%,92%,80%,1)\",","      \"rgba(100%,92%,80%,100%)\",","      \"hsl(36,100%,90%)\",","      \"hsla(36,100%,90%,1)\",","      \"hsla(36,100%,90%,100%)\",","      \"hwb(36,80%,0%)\",","      \"hwb(36,80%,0%,1)\",","      \"hwb(36,80%,0%,100%)\",","    ],","  },","  \"blue\": {","    \"hex\": [","      \"#0000ff\", \"#ff0000ff\", \"#00f\", \"#f00f\",","    ],","    \"func\": [","      \"rgb(0,0,255)\",","      \"rgba(0,0,255,1)\",","      \"rgba(0,0,255,100%)\",","      \"rgb(0%,0%,100%)\",","      \"rgba(0%,0%,100%,1)\",","      \"rgba(0%,0%,100%,100%)\",","      \"hsl(240,100%,50%)\",","      \"hsla(240,100%,50%,1)\",","      \"hsla(240,100%,50%,100%)\",","      \"hwb(240,0%,0%)\",","      \"hwb(240,0%,0%,1)\",","      \"hwb(240,0%,0%,100%)\",","    ],","  },","  \"blueviolet\": {","    \"hex\": [","      \"#8a2be2\", \"#ff8a2be2\",","    ],","    \"func\": [","      \"rgb(138,43,226)\",","      \"rgba(138,43,226,1)\",","      \"rgba(138,43,226,100%)\",","      \"rgb(54%,17%,89%)\",","      \"rgba(54%,17%,89%,1)\",","      \"rgba(54%,17%,89%,100%)\",","      \"hsl(271,76%,53%)\",","      \"hsla(271,76%,53%,1)\",","      \"hsla(271,76%,53%,100%)\",","      \"hwb(271,17%,11%)\",","      \"hwb(271,17%,11%,1)\",","      \"hwb(271,17%,11%,100%)\",","    ],","  },","  \"brown\": {","    \"hex\": [","      \"#a52a2a\", \"#ffa52a2a\",","    ],","    \"func\": [","      \"rgb(165,42,42)\",","      \"rgba(165,42,42,1)\",","      \"rgba(165,42,42,100%)\",","      \"rgb(65%,16%,16%)\",","      \"rgba(65%,16%,16%,1)\",","      \"rgba(65%,16%,16%,100%)\",","      \"hsl(0,59%,41%)\",","      \"hsla(0,59%,41%,1)\",","      \"hsla(0,59%,41%,100%)\",","      \"hwb(0,16%,35%)\",","      \"hwb(0,16%,35%,1)\",","      \"hwb(0,16%,35%,100%)\",","    ],","  },","  \"burlywood\": {","    \"hex\": [","      \"#deb887\", \"#ffdeb887\",","    ],","    \"func\": [","      \"rgb(222,184,135)\",","      \"rgba(222,184,135,1)\",","      \"rgba(222,184,135,100%)\",","      \"rgb(87%,72%,53%)\",","      \"rgba(87%,72%,53%,1)\",","      \"rgba(87%,72%,53%,100%)\",","      \"hsl(34,57%,70%)\",","      \"hsla(34,57%,70%,1)\",","      \"hsla(34,57%,70%,100%)\",","      \"hwb(34,53%,13%)\",","      \"hwb(34,53%,13%,1)\",","      \"hwb(34,53%,13%,100%)\",","    ],","  },","  \"cadetblue\": {","    \"hex\": [","      \"#5f9ea0\", \"#ff5f9ea0\",","    ],","    \"func\": [","      \"rgb(95,158,160)\",","      \"rgba(95,158,160,1)\",","      \"rgba(95,158,160,100%)\",","      \"rgb(37%,62%,63%)\",","      \"rgba(37%,62%,63%,1)\",","      \"rgba(37%,62%,63%,100%)\",","      \"hsl(182,25%,50%)\",","      \"hsla(182,25%,50%,1)\",","      \"hsla(182,25%,50%,100%)\",","      \"hwb(182,37%,37%)\",","      \"hwb(182,37%,37%,1)\",","      \"hwb(182,37%,37%,100%)\",","    ],","  },","  \"chartreuse\": {","    \"hex\": [","      \"#7fff00\", \"#ff7fff00\",","    ],","    \"func\": [","      \"rgb(127,255,0)\",","      \"rgba(127,255,0,1)\",","      \"rgba(127,255,0,100%)\",","      \"rgb(50%,100%,0%)\",","      \"rgba(50%,100%,0%,1)\",","      \"rgba(50%,100%,0%,100%)\",","      \"hsl(90,100%,50%)\",","      \"hsla(90,100%,50%,1)\",","      \"hsla(90,100%,50%,100%)\",","      \"hwb(90,0%,0%)\",","      \"hwb(90,0%,0%,1)\",","      \"hwb(90,0%,0%,100%)\",","    ],","  },","  \"chocolate\": {","    \"hex\": [","      \"#d2691e\", \"#ffd2691e\",","    ],","    \"func\": [","      \"rgb(210,105,30)\",","      \"rgba(210,105,30,1)\",","      \"rgba(210,105,30,100%)\",","      \"rgb(82%,41%,12%)\",","      \"rgba(82%,41%,12%,1)\",","      \"rgba(82%,41%,12%,100%)\",","      \"hsl(25,75%,47%)\",","      \"hsla(25,75%,47%,1)\",","      \"hsla(25,75%,47%,100%)\",","      \"hwb(25,12%,18%)\",","      \"hwb(25,12%,18%,1)\",","      \"hwb(25,12%,18%,100%)\",","    ],","  },","  \"coral\": {","    \"hex\": [","      \"#ff7f50\", \"#ffff7f50\",","    ],","    \"func\": [","      \"rgb(255,127,80)\",","      \"rgba(255,127,80,1)\",","      \"rgba(255,127,80,100%)\",","      \"rgb(100%,50%,31%)\",","      \"rgba(100%,50%,31%,1)\",","      \"rgba(100%,50%,31%,100%)\",","      \"hsl(16,100%,66%)\",","      \"hsla(16,100%,66%,1)\",","      \"hsla(16,100%,66%,100%)\",","      \"hwb(16,31%,0%)\",","      \"hwb(16,31%,0%,1)\",","      \"hwb(16,31%,0%,100%)\",","    ],","  },","  \"cornflowerblue\": {","    \"hex\": [","      \"#6495ed\", \"#ff6495ed\",","    ],","    \"func\": [","      \"rgb(100,149,237)\",","      \"rgba(100,149,237,1)\",","      \"rgba(100,149,237,100%)\",","      \"rgb(39%,58%,93%)\",","      \"rgba(39%,58%,93%,1)\",","      \"rgba(39%,58%,93%,100%)\",","      \"hsl(219,79%,66%)\",","      \"hsla(219,79%,66%,1)\",","      \"hsla(219,79%,66%,100%)\",","      \"hwb(219,39%,7%)\",","      \"hwb(219,39%,7%,1)\",","      \"hwb(219,39%,7%,100%)\",","    ],","  },","  \"cornsilk\": {","    \"hex\": [","      \"#fff8dc\", \"#fffff8dc\",","    ],","    \"func\": [","      \"rgb(255,248,220)\",","      \"rgba(255,248,220,1)\",","      \"rgba(255,248,220,100%)\",","      \"rgb(100%,97%,86%)\",","      \"rgba(100%,97%,86%,1)\",","      \"rgba(100%,97%,86%,100%)\",","      \"hsl(48,100%,93%)\",","      \"hsla(48,100%,93%,1)\",","      \"hsla(48,100%,93%,100%)\",","      \"hwb(48,86%,0%)\",","      \"hwb(48,86%,0%,1)\",","      \"hwb(48,86%,0%,100%)\",","    ],","  },","  \"crimson\": {","    \"hex\": [","      \"#dc143c\", \"#ffdc143c\",","    ],","    \"func\": [","      \"rgb(220,20,60)\",","      \"rgba(220,20,60,1)\",","      \"rgba(220,20,60,100%)\",","      \"rgb(86%,8%,24%)\",","      \"rgba(86%,8%,24%,1)\",","      \"rgba(86%,8%,24%,100%)\",","      \"hsl(348,83%,47%)\",","      \"hsla(348,83%,47%,1)\",","      \"hsla(348,83%,47%,100%)\",","      \"hwb(348,8%,14%)\",","      \"hwb(348,8%,14%,1)\",","      \"hwb(348,8%,14%,100%)\",","    ],","  },","  \"cyan\": {","    \"hex\": [","      \"#00ffff\", \"#ff00ffff\", \"#0ff\", \"#f0ff\",","    ],","    \"func\": [","      \"rgb(0,255,255)\",","      \"rgba(0,255,255,1)\",","      \"rgba(0,255,255,100%)\",","      \"rgb(0%,100%,100%)\",","      \"rgba(0%,100%,100%,1)\",","      \"rgba(0%,100%,100%,100%)\",","      \"hsl(180,100%,50%)\",","      \"hsla(180,100%,50%,1)\",","      \"hsla(180,100%,50%,100%)\",","      \"hwb(180,0%,0%)\",","      \"hwb(180,0%,0%,1)\",","      \"hwb(180,0%,0%,100%)\",","    ],","  },","  \"darkblue\": {","    \"hex\": [","      \"#00008b\", \"#ff00008b\",","    ],","    \"func\": [","      \"rgb(0,0,139)\",","      \"rgba(0,0,139,1)\",","      \"rgba(0,0,139,100%)\",","      \"rgb(0%,0%,55%)\",","      \"rgba(0%,0%,55%,1)\",","      \"rgba(0%,0%,55%,100%)\",","      \"hsl(240,100%,27%)\",","      \"hsla(240,100%,27%,1)\",","      \"hsla(240,100%,27%,100%)\",","      \"hwb(240,0%,45%)\",","      \"hwb(240,0%,45%,1)\",","      \"hwb(240,0%,45%,100%)\",","    ],","  },","  \"darkcyan\": {","    \"hex\": [","      \"#008b8b\", \"#ff008b8b\",","    ],","    \"func\": [","      \"rgb(0,139,139)\",","      \"rgba(0,139,139,1)\",","      \"rgba(0,139,139,100%)\",","      \"rgb(0%,55%,55%)\",","      \"rgba(0%,55%,55%,1)\",","      \"rgba(0%,55%,55%,100%)\",","      \"hsl(180,100%,27%)\",","      \"hsla(180,100%,27%,1)\",","      \"hsla(180,100%,27%,100%)\",","      \"hwb(180,0%,45%)\",","      \"hwb(180,0%,45%,1)\",","      \"hwb(180,0%,45%,100%)\",","    ],","  },","  \"darkgoldenrod\": {","    \"hex\": [","      \"#b8860b\", \"#ffb8860b\",","    ],","    \"func\": [","      \"rgb(184,134,11)\",","      \"rgba(184,134,11,1)\",","      \"rgba(184,134,11,100%)\",","      \"rgb(72%,53%,4%)\",","      \"rgba(72%,53%,4%,1)\",","      \"rgba(72%,53%,4%,100%)\",","      \"hsl(43,89%,38%)\",","      \"hsla(43,89%,38%,1)\",","      \"hsla(43,89%,38%,100%)\",","      \"hwb(43,4%,28%)\",","      \"hwb(43,4%,28%,1)\",","      \"hwb(43,4%,28%,100%)\",","    ],","  },","  \"darkgray\": {","    \"hex\": [","      \"#a9a9a9\", \"#ffa9a9a9\",","    ],","    \"func\": [","      \"rgb(169,169,169)\",","      \"rgba(169,169,169,1)\",","      \"rgba(169,169,169,100%)\",","      \"rgb(66%,66%,66%)\",","      \"rgba(66%,66%,66%,1)\",","      \"rgba(66%,66%,66%,100%)\",","      \"hsl(0,0%,66%)\",","      \"hsla(0,0%,66%,1)\",","      \"hsla(0,0%,66%,100%)\",","      \"hwb(0,66%,34%)\",","      \"hwb(0,66%,34%,1)\",","      \"hwb(0,66%,34%,100%)\",","    ],","  },","  \"darkgreen\": {","    \"hex\": [","      \"#006400\", \"#ff006400\",","    ],","    \"func\": [","      \"rgb(0,100,0)\",","      \"rgba(0,100,0,1)\",","      \"rgba(0,100,0,100%)\",","      \"rgb(0%,39%,0%)\",","      \"rgba(0%,39%,0%,1)\",","      \"rgba(0%,39%,0%,100%)\",","      \"hsl(120,100%,20%)\",","      \"hsla(120,100%,20%,1)\",","      \"hsla(120,100%,20%,100%)\",","      \"hwb(120,0%,61%)\",","      \"hwb(120,0%,61%,1)\",","      \"hwb(120,0%,61%,100%)\",","    ],","  },","  \"darkgrey\": {","    \"hex\": [","      \"#a9a9a9\", \"#ffa9a9a9\",","    ],","    \"func\": [","      \"rgb(169,169,169)\",","      \"rgba(169,169,169,1)\",","      \"rgba(169,169,169,100%)\",","      \"rgb(66%,66%,66%)\",","      \"rgba(66%,66%,66%,1)\",","      \"rgba(66%,66%,66%,100%)\",","      \"hsl(0,0%,66%)\",","      \"hsla(0,0%,66%,1)\",","      \"hsla(0,0%,66%,100%)\",","      \"hwb(0,66%,34%)\",","      \"hwb(0,66%,34%,1)\",","      \"hwb(0,66%,34%,100%)\",","      \"gray(169)\",","      \"gray(169,1)\",","      \"gray(169,100%)\",","      \"gray(169%)\",","      \"gray(169%,1)\",","      \"gray(169%,100%)\",","    ],","  },","  \"darkkhaki\": {","    \"hex\": [","      \"#bdb76b\", \"#ffbdb76b\",","    ],","    \"func\": [","      \"rgb(189,183,107)\",","      \"rgba(189,183,107,1)\",","      \"rgba(189,183,107,100%)\",","      \"rgb(74%,72%,42%)\",","      \"rgba(74%,72%,42%,1)\",","      \"rgba(74%,72%,42%,100%)\",","      \"hsl(56,38%,58%)\",","      \"hsla(56,38%,58%,1)\",","      \"hsla(56,38%,58%,100%)\",","      \"hwb(56,42%,26%)\",","      \"hwb(56,42%,26%,1)\",","      \"hwb(56,42%,26%,100%)\",","    ],","  },","  \"darkmagenta\": {","    \"hex\": [","      \"#8b008b\", \"#ff8b008b\",","    ],","    \"func\": [","      \"rgb(139,0,139)\",","      \"rgba(139,0,139,1)\",","      \"rgba(139,0,139,100%)\",","      \"rgb(55%,0%,55%)\",","      \"rgba(55%,0%,55%,1)\",","      \"rgba(55%,0%,55%,100%)\",","      \"hsl(300,100%,27%)\",","      \"hsla(300,100%,27%,1)\",","      \"hsla(300,100%,27%,100%)\",","      \"hwb(300,0%,45%)\",","      \"hwb(300,0%,45%,1)\",","      \"hwb(300,0%,45%,100%)\",","    ],","  },","  \"darkolivegreen\": {","    \"hex\": [","      \"#556b2f\", \"#ff556b2f\",","    ],","    \"func\": [","      \"rgb(85,107,47)\",","      \"rgba(85,107,47,1)\",","      \"rgba(85,107,47,100%)\",","      \"rgb(33%,42%,18%)\",","      \"rgba(33%,42%,18%,1)\",","      \"rgba(33%,42%,18%,100%)\",","      \"hsl(82,39%,30%)\",","      \"hsla(82,39%,30%,1)\",","      \"hsla(82,39%,30%,100%)\",","      \"hwb(82,18%,58%)\",","      \"hwb(82,18%,58%,1)\",","      \"hwb(82,18%,58%,100%)\",","    ],","  },","  \"darkorange\": {","    \"hex\": [","      \"#ff8c00\", \"#ffff8c00\",","    ],","    \"func\": [","      \"rgb(255,140,0)\",","      \"rgba(255,140,0,1)\",","      \"rgba(255,140,0,100%)\",","      \"rgb(100%,55%,0%)\",","      \"rgba(100%,55%,0%,1)\",","      \"rgba(100%,55%,0%,100%)\",","      \"hsl(33,100%,50%)\",","      \"hsla(33,100%,50%,1)\",","      \"hsla(33,100%,50%,100%)\",","      \"hwb(33,0%,0%)\",","      \"hwb(33,0%,0%,1)\",","      \"hwb(33,0%,0%,100%)\",","    ],","  },","  \"darkorchid\": {","    \"hex\": [","      \"#9932cc\", \"#ff9932cc\",","    ],","    \"func\": [","      \"rgb(153,50,204)\",","      \"rgba(153,50,204,1)\",","      \"rgba(153,50,204,100%)\",","      \"rgb(60%,20%,80%)\",","      \"rgba(60%,20%,80%,1)\",","      \"rgba(60%,20%,80%,100%)\",","      \"hsl(280,61%,50%)\",","      \"hsla(280,61%,50%,1)\",","      \"hsla(280,61%,50%,100%)\",","      \"hwb(280,20%,20%)\",","      \"hwb(280,20%,20%,1)\",","      \"hwb(280,20%,20%,100%)\",","    ],","  },","  \"darkred\": {","    \"hex\": [","      \"#8b0000\", \"#ff8b0000\",","    ],","    \"func\": [","      \"rgb(139,0,0)\",","      \"rgba(139,0,0,1)\",","      \"rgba(139,0,0,100%)\",","      \"rgb(55%,0%,0%)\",","      \"rgba(55%,0%,0%,1)\",","      \"rgba(55%,0%,0%,100%)\",","      \"hsl(0,100%,27%)\",","      \"hsla(0,100%,27%,1)\",","      \"hsla(0,100%,27%,100%)\",","      \"hwb(0,0%,45%)\",","      \"hwb(0,0%,45%,1)\",","      \"hwb(0,0%,45%,100%)\",","    ],","  },","  \"darksalmon\": {","    \"hex\": [","      \"#e9967a\", \"#ffe9967a\",","    ],","    \"func\": [","      \"rgb(233,150,122)\",","      \"rgba(233,150,122,1)\",","      \"rgba(233,150,122,100%)\",","      \"rgb(91%,59%,48%)\",","      \"rgba(91%,59%,48%,1)\",","      \"rgba(91%,59%,48%,100%)\",","      \"hsl(15,72%,70%)\",","      \"hsla(15,72%,70%,1)\",","      \"hsla(15,72%,70%,100%)\",","      \"hwb(15,48%,9%)\",","      \"hwb(15,48%,9%,1)\",","      \"hwb(15,48%,9%,100%)\",","    ],","  },","  \"darkseagreen\": {","    \"hex\": [","      \"#8fbc8f\", \"#ff8fbc8f\",","    ],","    \"func\": [","      \"rgb(143,188,143)\",","      \"rgba(143,188,143,1)\",","      \"rgba(143,188,143,100%)\",","      \"rgb(56%,74%,56%)\",","      \"rgba(56%,74%,56%,1)\",","      \"rgba(56%,74%,56%,100%)\",","      \"hsl(120,25%,65%)\",","      \"hsla(120,25%,65%,1)\",","      \"hsla(120,25%,65%,100%)\",","      \"hwb(120,56%,26%)\",","      \"hwb(120,56%,26%,1)\",","      \"hwb(120,56%,26%,100%)\",","    ],","  },","  \"darkslateblue\": {","    \"hex\": [","      \"#483d8b\", \"#ff483d8b\",","    ],","    \"func\": [","      \"rgb(72,61,139)\",","      \"rgba(72,61,139,1)\",","      \"rgba(72,61,139,100%)\",","      \"rgb(28%,24%,55%)\",","      \"rgba(28%,24%,55%,1)\",","      \"rgba(28%,24%,55%,100%)\",","      \"hsl(248,39%,39%)\",","      \"hsla(248,39%,39%,1)\",","      \"hsla(248,39%,39%,100%)\",","      \"hwb(248,24%,45%)\",","      \"hwb(248,24%,45%,1)\",","      \"hwb(248,24%,45%,100%)\",","    ],","  },","  \"darkslategray\": {","    \"hex\": [","      \"#2f4f4f\", \"#ff2f4f4f\",","    ],","    \"func\": [","      \"rgb(47,79,79)\",","      \"rgba(47,79,79,1)\",","      \"rgba(47,79,79,100%)\",","      \"rgb(18%,31%,31%)\",","      \"rgba(18%,31%,31%,1)\",","      \"rgba(18%,31%,31%,100%)\",","      \"hsl(180,25%,25%)\",","      \"hsla(180,25%,25%,1)\",","      \"hsla(180,25%,25%,100%)\",","      \"hwb(180,18%,69%)\",","      \"hwb(180,18%,69%,1)\",","      \"hwb(180,18%,69%,100%)\",","    ],","  },","  \"darkslategrey\": {","    \"hex\": [","      \"#2f4f4f\", \"#ff2f4f4f\",","    ],","    \"func\": [","      \"rgb(47,79,79)\",","      \"rgba(47,79,79,1)\",","      \"rgba(47,79,79,100%)\",","      \"rgb(18%,31%,31%)\",","      \"rgba(18%,31%,31%,1)\",","      \"rgba(18%,31%,31%,100%)\",","      \"hsl(180,25%,25%)\",","      \"hsla(180,25%,25%,1)\",","      \"hsla(180,25%,25%,100%)\",","      \"hwb(180,18%,69%)\",","      \"hwb(180,18%,69%,1)\",","      \"hwb(180,18%,69%,100%)\",","    ],","  },","  \"darkturquoise\": {","    \"hex\": [","      \"#00ced1\", \"#ff00ced1\",","    ],","    \"func\": [","      \"rgb(0,206,209)\",","      \"rgba(0,206,209,1)\",","      \"rgba(0,206,209,100%)\",","      \"rgb(0%,81%,82%)\",","      \"rgba(0%,81%,82%,1)\",","      \"rgba(0%,81%,82%,100%)\",","      \"hsl(181,100%,41%)\",","      \"hsla(181,100%,41%,1)\",","      \"hsla(181,100%,41%,100%)\",","      \"hwb(181,0%,18%)\",","      \"hwb(181,0%,18%,1)\",","      \"hwb(181,0%,18%,100%)\",","    ],","  },","  \"darkviolet\": {","    \"hex\": [","      \"#9400d3\", \"#ff9400d3\",","    ],","    \"func\": [","      \"rgb(148,0,211)\",","      \"rgba(148,0,211,1)\",","      \"rgba(148,0,211,100%)\",","      \"rgb(58%,0%,83%)\",","      \"rgba(58%,0%,83%,1)\",","      \"rgba(58%,0%,83%,100%)\",","      \"hsl(282,100%,41%)\",","      \"hsla(282,100%,41%,1)\",","      \"hsla(282,100%,41%,100%)\",","      \"hwb(282,0%,17%)\",","      \"hwb(282,0%,17%,1)\",","      \"hwb(282,0%,17%,100%)\",","    ],","  },","  \"deeppink\": {","    \"hex\": [","      \"#ff1493\", \"#ffff1493\",","    ],","    \"func\": [","      \"rgb(255,20,147)\",","      \"rgba(255,20,147,1)\",","      \"rgba(255,20,147,100%)\",","      \"rgb(100%,8%,58%)\",","      \"rgba(100%,8%,58%,1)\",","      \"rgba(100%,8%,58%,100%)\",","      \"hsl(328,100%,54%)\",","      \"hsla(328,100%,54%,1)\",","      \"hsla(328,100%,54%,100%)\",","      \"hwb(328,8%,0%)\",","      \"hwb(328,8%,0%,1)\",","      \"hwb(328,8%,0%,100%)\",","    ],","  },","  \"deepskyblue\": {","    \"hex\": [","      \"#00bfff\", \"#ff00bfff\",","    ],","    \"func\": [","      \"rgb(0,191,255)\",","      \"rgba(0,191,255,1)\",","      \"rgba(0,191,255,100%)\",","      \"rgb(0%,75%,100%)\",","      \"rgba(0%,75%,100%,1)\",","      \"rgba(0%,75%,100%,100%)\",","      \"hsl(195,100%,50%)\",","      \"hsla(195,100%,50%,1)\",","      \"hsla(195,100%,50%,100%)\",","      \"hwb(195,0%,0%)\",","      \"hwb(195,0%,0%,1)\",","      \"hwb(195,0%,0%,100%)\",","    ],","  },","  \"dimgray\": {","    \"hex\": [","      \"#696969\", \"#ff696969\",","    ],","    \"func\": [","      \"rgb(105,105,105)\",","      \"rgba(105,105,105,1)\",","      \"rgba(105,105,105,100%)\",","      \"rgb(41%,41%,41%)\",","      \"rgba(41%,41%,41%,1)\",","      \"rgba(41%,41%,41%,100%)\",","      \"hsl(0,0%,41%)\",","      \"hsla(0,0%,41%,1)\",","      \"hsla(0,0%,41%,100%)\",","      \"hwb(0,41%,59%)\",","      \"hwb(0,41%,59%,1)\",","      \"hwb(0,41%,59%,100%)\",","    ],","  },","  \"dimgrey\": {","    \"hex\": [","      \"#696969\", \"#ff696969\",","    ],","    \"func\": [","      \"rgb(105,105,105)\",","      \"rgba(105,105,105,1)\",","      \"rgba(105,105,105,100%)\",","      \"rgb(41%,41%,41%)\",","      \"rgba(41%,41%,41%,1)\",","      \"rgba(41%,41%,41%,100%)\",","      \"hsl(0,0%,41%)\",","      \"hsla(0,0%,41%,1)\",","      \"hsla(0,0%,41%,100%)\",","      \"hwb(0,41%,59%)\",","      \"hwb(0,41%,59%,1)\",","      \"hwb(0,41%,59%,100%)\",","      \"gray(105)\",","      \"gray(105,1)\",","      \"gray(105,100%)\",","      \"gray(105%)\",","      \"gray(105%,1)\",","      \"gray(105%,100%)\",","    ],","  },","  \"dodgerblue\": {","    \"hex\": [","      \"#1e90ff\", \"#ff1e90ff\",","    ],","    \"func\": [","      \"rgb(30,144,255)\",","      \"rgba(30,144,255,1)\",","      \"rgba(30,144,255,100%)\",","      \"rgb(12%,56%,100%)\",","      \"rgba(12%,56%,100%,1)\",","      \"rgba(12%,56%,100%,100%)\",","      \"hsl(210,100%,56%)\",","      \"hsla(210,100%,56%,1)\",","      \"hsla(210,100%,56%,100%)\",","      \"hwb(210,12%,0%)\",","      \"hwb(210,12%,0%,1)\",","      \"hwb(210,12%,0%,100%)\",","    ],","  },","  \"firebrick\": {","    \"hex\": [","      \"#b22222\", \"#ffb22222\",","    ],","    \"func\": [","      \"rgb(178,34,34)\",","      \"rgba(178,34,34,1)\",","      \"rgba(178,34,34,100%)\",","      \"rgb(70%,13%,13%)\",","      \"rgba(70%,13%,13%,1)\",","      \"rgba(70%,13%,13%,100%)\",","      \"hsl(0,68%,42%)\",","      \"hsla(0,68%,42%,1)\",","      \"hsla(0,68%,42%,100%)\",","      \"hwb(0,13%,30%)\",","      \"hwb(0,13%,30%,1)\",","      \"hwb(0,13%,30%,100%)\",","    ],","  },","  \"floralwhite\": {","    \"hex\": [","      \"#fffaf0\", \"#fffffaf0\",","    ],","    \"func\": [","      \"rgb(255,250,240)\",","      \"rgba(255,250,240,1)\",","      \"rgba(255,250,240,100%)\",","      \"rgb(100%,98%,94%)\",","      \"rgba(100%,98%,94%,1)\",","      \"rgba(100%,98%,94%,100%)\",","      \"hsl(40,100%,97%)\",","      \"hsla(40,100%,97%,1)\",","      \"hsla(40,100%,97%,100%)\",","      \"hwb(40,94%,0%)\",","      \"hwb(40,94%,0%,1)\",","      \"hwb(40,94%,0%,100%)\",","    ],","  },","  \"forestgreen\": {","    \"hex\": [","      \"#228b22\", \"#ff228b22\",","    ],","    \"func\": [","      \"rgb(34,139,34)\",","      \"rgba(34,139,34,1)\",","      \"rgba(34,139,34,100%)\",","      \"rgb(13%,55%,13%)\",","      \"rgba(13%,55%,13%,1)\",","      \"rgba(13%,55%,13%,100%)\",","      \"hsl(120,61%,34%)\",","      \"hsla(120,61%,34%,1)\",","      \"hsla(120,61%,34%,100%)\",","      \"hwb(120,13%,45%)\",","      \"hwb(120,13%,45%,1)\",","      \"hwb(120,13%,45%,100%)\",","    ],","  },","  \"fuchsia\": {","    \"hex\": [","      \"#ff00ff\", \"#ffff00ff\", \"#f0f\", \"#ff0f\",","    ],","    \"func\": [","      \"rgb(255,0,255)\",","      \"rgba(255,0,255,1)\",","      \"rgba(255,0,255,100%)\",","      \"rgb(100%,0%,100%)\",","      \"rgba(100%,0%,100%,1)\",","      \"rgba(100%,0%,100%,100%)\",","      \"hsl(300,100%,50%)\",","      \"hsla(300,100%,50%,1)\",","      \"hsla(300,100%,50%,100%)\",","      \"hwb(300,0%,0%)\",","      \"hwb(300,0%,0%,1)\",","      \"hwb(300,0%,0%,100%)\",","    ],","  },","  \"gainsboro\": {","    \"hex\": [","      \"#dcdcdc\", \"#ffdcdcdc\",","    ],","    \"func\": [","      \"rgb(220,220,220)\",","      \"rgba(220,220,220,1)\",","      \"rgba(220,220,220,100%)\",","      \"rgb(86%,86%,86%)\",","      \"rgba(86%,86%,86%,1)\",","      \"rgba(86%,86%,86%,100%)\",","      \"hsl(0,0%,86%)\",","      \"hsla(0,0%,86%,1)\",","      \"hsla(0,0%,86%,100%)\",","      \"hwb(0,86%,14%)\",","      \"hwb(0,86%,14%,1)\",","      \"hwb(0,86%,14%,100%)\",","    ],","  },","  \"ghostwhite\": {","    \"hex\": [","      \"#f8f8ff\", \"#fff8f8ff\",","    ],","    \"func\": [","      \"rgb(248,248,255)\",","      \"rgba(248,248,255,1)\",","      \"rgba(248,248,255,100%)\",","      \"rgb(97%,97%,100%)\",","      \"rgba(97%,97%,100%,1)\",","      \"rgba(97%,97%,100%,100%)\",","      \"hsl(240,100%,99%)\",","      \"hsla(240,100%,99%,1)\",","      \"hsla(240,100%,99%,100%)\",","      \"hwb(240,97%,0%)\",","      \"hwb(240,97%,0%,1)\",","      \"hwb(240,97%,0%,100%)\",","    ],","  },","  \"gold\": {","    \"hex\": [","      \"#ffd700\", \"#ffffd700\",","    ],","    \"func\": [","      \"rgb(255,215,0)\",","      \"rgba(255,215,0,1)\",","      \"rgba(255,215,0,100%)\",","      \"rgb(100%,84%,0%)\",","      \"rgba(100%,84%,0%,1)\",","      \"rgba(100%,84%,0%,100%)\",","      \"hsl(51,100%,50%)\",","      \"hsla(51,100%,50%,1)\",","      \"hsla(51,100%,50%,100%)\",","      \"hwb(51,0%,0%)\",","      \"hwb(51,0%,0%,1)\",","      \"hwb(51,0%,0%,100%)\",","    ],","  },","  \"goldenrod\": {","    \"hex\": [","      \"#daa520\", \"#ffdaa520\",","    ],","    \"func\": [","      \"rgb(218,165,32)\",","      \"rgba(218,165,32,1)\",","      \"rgba(218,165,32,100%)\",","      \"rgb(85%,65%,13%)\",","      \"rgba(85%,65%,13%,1)\",","      \"rgba(85%,65%,13%,100%)\",","      \"hsl(43,74%,49%)\",","      \"hsla(43,74%,49%,1)\",","      \"hsla(43,74%,49%,100%)\",","      \"hwb(43,13%,15%)\",","      \"hwb(43,13%,15%,1)\",","      \"hwb(43,13%,15%,100%)\",","    ],","  },","  \"gray\": {","    \"hex\": [","      \"#808080\", \"#ff808080\",","    ],","    \"func\": [","      \"rgb(128,128,128)\",","      \"rgba(128,128,128,1)\",","      \"rgba(128,128,128,100%)\",","      \"rgb(50%,50%,50%)\",","      \"rgba(50%,50%,50%,1)\",","      \"rgba(50%,50%,50%,100%)\",","      \"hsl(0,0%,50%)\",","      \"hsla(0,0%,50%,1)\",","      \"hsla(0,0%,50%,100%)\",","      \"hwb(0,50%,50%)\",","      \"hwb(0,50%,50%,1)\",","      \"hwb(0,50%,50%,100%)\",","    ],","  },","  \"green\": {","    \"hex\": [","      \"#008000\", \"#ff008000\",","    ],","    \"func\": [","      \"rgb(0,128,0)\",","      \"rgba(0,128,0,1)\",","      \"rgba(0,128,0,100%)\",","      \"rgb(0%,50%,0%)\",","      \"rgba(0%,50%,0%,1)\",","      \"rgba(0%,50%,0%,100%)\",","      \"hsl(120,100%,25%)\",","      \"hsla(120,100%,25%,1)\",","      \"hsla(120,100%,25%,100%)\",","      \"hwb(120,0%,50%)\",","      \"hwb(120,0%,50%,1)\",","      \"hwb(120,0%,50%,100%)\",","    ],","  },","  \"greenyellow\": {","    \"hex\": [","      \"#adff2f\", \"#ffadff2f\",","    ],","    \"func\": [","      \"rgb(173,255,47)\",","      \"rgba(173,255,47,1)\",","      \"rgba(173,255,47,100%)\",","      \"rgb(68%,100%,18%)\",","      \"rgba(68%,100%,18%,1)\",","      \"rgba(68%,100%,18%,100%)\",","      \"hsl(84,100%,59%)\",","      \"hsla(84,100%,59%,1)\",","      \"hsla(84,100%,59%,100%)\",","      \"hwb(84,18%,0%)\",","      \"hwb(84,18%,0%,1)\",","      \"hwb(84,18%,0%,100%)\",","    ],","  },","  \"grey\": {","    \"hex\": [","      \"#808080\", \"#ff808080\",","    ],","    \"func\": [","      \"rgb(128,128,128)\",","      \"rgba(128,128,128,1)\",","      \"rgba(128,128,128,100%)\",","      \"rgb(50%,50%,50%)\",","      \"rgba(50%,50%,50%,1)\",","      \"rgba(50%,50%,50%,100%)\",","      \"hsl(0,0%,50%)\",","      \"hsla(0,0%,50%,1)\",","      \"hsla(0,0%,50%,100%)\",","      \"hwb(0,50%,50%)\",","      \"hwb(0,50%,50%,1)\",","      \"hwb(0,50%,50%,100%)\",","      \"gray(128)\",","      \"gray(128,1)\",","      \"gray(128,100%)\",","      \"gray(128%)\",","      \"gray(128%,1)\",","      \"gray(128%,100%)\",","    ],","  },","  \"honeydew\": {","    \"hex\": [","      \"#f0fff0\", \"#fff0fff0\",","    ],","    \"func\": [","      \"rgb(240,255,240)\",","      \"rgba(240,255,240,1)\",","      \"rgba(240,255,240,100%)\",","      \"rgb(94%,100%,94%)\",","      \"rgba(94%,100%,94%,1)\",","      \"rgba(94%,100%,94%,100%)\",","      \"hsl(120,100%,97%)\",","      \"hsla(120,100%,97%,1)\",","      \"hsla(120,100%,97%,100%)\",","      \"hwb(120,94%,0%)\",","      \"hwb(120,94%,0%,1)\",","      \"hwb(120,94%,0%,100%)\",","    ],","  },","  \"hotpink\": {","    \"hex\": [","      \"#ff69b4\", \"#ffff69b4\",","    ],","    \"func\": [","      \"rgb(255,105,180)\",","      \"rgba(255,105,180,1)\",","      \"rgba(255,105,180,100%)\",","      \"rgb(100%,41%,71%)\",","      \"rgba(100%,41%,71%,1)\",","      \"rgba(100%,41%,71%,100%)\",","      \"hsl(330,100%,71%)\",","      \"hsla(330,100%,71%,1)\",","      \"hsla(330,100%,71%,100%)\",","      \"hwb(330,41%,0%)\",","      \"hwb(330,41%,0%,1)\",","      \"hwb(330,41%,0%,100%)\",","    ],","  },","  \"indianred\": {","    \"hex\": [","      \"#cd5c5c\", \"#ffcd5c5c\",","    ],","    \"func\": [","      \"rgb(205,92,92)\",","      \"rgba(205,92,92,1)\",","      \"rgba(205,92,92,100%)\",","      \"rgb(80%,36%,36%)\",","      \"rgba(80%,36%,36%,1)\",","      \"rgba(80%,36%,36%,100%)\",","      \"hsl(0,53%,58%)\",","      \"hsla(0,53%,58%,1)\",","      \"hsla(0,53%,58%,100%)\",","      \"hwb(0,36%,20%)\",","      \"hwb(0,36%,20%,1)\",","      \"hwb(0,36%,20%,100%)\",","    ],","  },","  \"indigo\": {","    \"hex\": [","      \"#4b0082\", \"#ff4b0082\",","    ],","    \"func\": [","      \"rgb(75,0,130)\",","      \"rgba(75,0,130,1)\",","      \"rgba(75,0,130,100%)\",","      \"rgb(29%,0%,51%)\",","      \"rgba(29%,0%,51%,1)\",","      \"rgba(29%,0%,51%,100%)\",","      \"hsl(275,100%,25%)\",","      \"hsla(275,100%,25%,1)\",","      \"hsla(275,100%,25%,100%)\",","      \"hwb(275,0%,49%)\",","      \"hwb(275,0%,49%,1)\",","      \"hwb(275,0%,49%,100%)\",","    ],","  },","  \"ivory\": {","    \"hex\": [","      \"#fffff0\", \"#fffffff0\",","    ],","    \"func\": [","      \"rgb(255,255,240)\",","      \"rgba(255,255,240,1)\",","      \"rgba(255,255,240,100%)\",","      \"rgb(100%,100%,94%)\",","      \"rgba(100%,100%,94%,1)\",","      \"rgba(100%,100%,94%,100%)\",","      \"hsl(60,100%,97%)\",","      \"hsla(60,100%,97%,1)\",","      \"hsla(60,100%,97%,100%)\",","      \"hwb(60,94%,0%)\",","      \"hwb(60,94%,0%,1)\",","      \"hwb(60,94%,0%,100%)\",","    ],","  },","  \"khaki\": {","    \"hex\": [","      \"#f0e68c\", \"#fff0e68c\",","    ],","    \"func\": [","      \"rgb(240,230,140)\",","      \"rgba(240,230,140,1)\",","      \"rgba(240,230,140,100%)\",","      \"rgb(94%,90%,55%)\",","      \"rgba(94%,90%,55%,1)\",","      \"rgba(94%,90%,55%,100%)\",","      \"hsl(54,77%,75%)\",","      \"hsla(54,77%,75%,1)\",","      \"hsla(54,77%,75%,100%)\",","      \"hwb(54,55%,6%)\",","      \"hwb(54,55%,6%,1)\",","      \"hwb(54,55%,6%,100%)\",","    ],","  },","  \"lavender\": {","    \"hex\": [","      \"#e6e6fa\", \"#ffe6e6fa\",","    ],","    \"func\": [","      \"rgb(230,230,250)\",","      \"rgba(230,230,250,1)\",","      \"rgba(230,230,250,100%)\",","      \"rgb(90%,90%,98%)\",","      \"rgba(90%,90%,98%,1)\",","      \"rgba(90%,90%,98%,100%)\",","      \"hsl(240,67%,94%)\",","      \"hsla(240,67%,94%,1)\",","      \"hsla(240,67%,94%,100%)\",","      \"hwb(240,90%,2%)\",","      \"hwb(240,90%,2%,1)\",","      \"hwb(240,90%,2%,100%)\",","    ],","  },","  \"lavenderblush\": {","    \"hex\": [","      \"#fff0f5\", \"#fffff0f5\",","    ],","    \"func\": [","      \"rgb(255,240,245)\",","      \"rgba(255,240,245,1)\",","      \"rgba(255,240,245,100%)\",","      \"rgb(100%,94%,96%)\",","      \"rgba(100%,94%,96%,1)\",","      \"rgba(100%,94%,96%,100%)\",","      \"hsl(340,100%,97%)\",","      \"hsla(340,100%,97%,1)\",","      \"hsla(340,100%,97%,100%)\",","      \"hwb(340,94%,0%)\",","      \"hwb(340,94%,0%,1)\",","      \"hwb(340,94%,0%,100%)\",","    ],","  },","  \"lawngreen\": {","    \"hex\": [","      \"#7cfc00\", \"#ff7cfc00\",","    ],","    \"func\": [","      \"rgb(124,252,0)\",","      \"rgba(124,252,0,1)\",","      \"rgba(124,252,0,100%)\",","      \"rgb(49%,99%,0%)\",","      \"rgba(49%,99%,0%,1)\",","      \"rgba(49%,99%,0%,100%)\",","      \"hsl(90,100%,49%)\",","      \"hsla(90,100%,49%,1)\",","      \"hsla(90,100%,49%,100%)\",","      \"hwb(90,0%,1%)\",","      \"hwb(90,0%,1%,1)\",","      \"hwb(90,0%,1%,100%)\",","    ],","  },","  \"lemonchiffon\": {","    \"hex\": [","      \"#fffacd\", \"#fffffacd\",","    ],","    \"func\": [","      \"rgb(255,250,205)\",","      \"rgba(255,250,205,1)\",","      \"rgba(255,250,205,100%)\",","      \"rgb(100%,98%,80%)\",","      \"rgba(100%,98%,80%,1)\",","      \"rgba(100%,98%,80%,100%)\",","      \"hsl(54,100%,90%)\",","      \"hsla(54,100%,90%,1)\",","      \"hsla(54,100%,90%,100%)\",","      \"hwb(54,80%,0%)\",","      \"hwb(54,80%,0%,1)\",","      \"hwb(54,80%,0%,100%)\",","    ],","  },","  \"lightblue\": {","    \"hex\": [","      \"#add8e6\", \"#ffadd8e6\",","    ],","    \"func\": [","      \"rgb(173,216,230)\",","      \"rgba(173,216,230,1)\",","      \"rgba(173,216,230,100%)\",","      \"rgb(68%,85%,90%)\",","      \"rgba(68%,85%,90%,1)\",","      \"rgba(68%,85%,90%,100%)\",","      \"hsl(195,53%,79%)\",","      \"hsla(195,53%,79%,1)\",","      \"hsla(195,53%,79%,100%)\",","      \"hwb(195,68%,10%)\",","      \"hwb(195,68%,10%,1)\",","      \"hwb(195,68%,10%,100%)\",","    ],","  },","  \"lightcoral\": {","    \"hex\": [","      \"#f08080\", \"#fff08080\",","    ],","    \"func\": [","      \"rgb(240,128,128)\",","      \"rgba(240,128,128,1)\",","      \"rgba(240,128,128,100%)\",","      \"rgb(94%,50%,50%)\",","      \"rgba(94%,50%,50%,1)\",","      \"rgba(94%,50%,50%,100%)\",","      \"hsl(0,79%,72%)\",","      \"hsla(0,79%,72%,1)\",","      \"hsla(0,79%,72%,100%)\",","      \"hwb(0,50%,6%)\",","      \"hwb(0,50%,6%,1)\",","      \"hwb(0,50%,6%,100%)\",","    ],","  },","  \"lightcyan\": {","    \"hex\": [","      \"#e0ffff\", \"#ffe0ffff\",","    ],","    \"func\": [","      \"rgb(224,255,255)\",","      \"rgba(224,255,255,1)\",","      \"rgba(224,255,255,100%)\",","      \"rgb(88%,100%,100%)\",","      \"rgba(88%,100%,100%,1)\",","      \"rgba(88%,100%,100%,100%)\",","      \"hsl(180,100%,94%)\",","      \"hsla(180,100%,94%,1)\",","      \"hsla(180,100%,94%,100%)\",","      \"hwb(180,88%,0%)\",","      \"hwb(180,88%,0%,1)\",","      \"hwb(180,88%,0%,100%)\",","    ],","  },","  \"lightgoldenrodyellow\": {","    \"hex\": [","      \"#fafad2\", \"#fffafad2\",","    ],","    \"func\": [","      \"rgb(250,250,210)\",","      \"rgba(250,250,210,1)\",","      \"rgba(250,250,210,100%)\",","      \"rgb(98%,98%,82%)\",","      \"rgba(98%,98%,82%,1)\",","      \"rgba(98%,98%,82%,100%)\",","      \"hsl(60,80%,90%)\",","      \"hsla(60,80%,90%,1)\",","      \"hsla(60,80%,90%,100%)\",","      \"hwb(60,82%,2%)\",","      \"hwb(60,82%,2%,1)\",","      \"hwb(60,82%,2%,100%)\",","    ],","  },","  \"lightgray\": {","    \"hex\": [","      \"#d3d3d3\", \"#ffd3d3d3\",","    ],","    \"func\": [","      \"rgb(211,211,211)\",","      \"rgba(211,211,211,1)\",","      \"rgba(211,211,211,100%)\",","      \"rgb(83%,83%,83%)\",","      \"rgba(83%,83%,83%,1)\",","      \"rgba(83%,83%,83%,100%)\",","      \"hsl(0,0%,83%)\",","      \"hsla(0,0%,83%,1)\",","      \"hsla(0,0%,83%,100%)\",","      \"hwb(0,83%,17%)\",","      \"hwb(0,83%,17%,1)\",","      \"hwb(0,83%,17%,100%)\",","    ],","  },","  \"lightgreen\": {","    \"hex\": [","      \"#90ee90\", \"#ff90ee90\",","    ],","    \"func\": [","      \"rgb(144,238,144)\",","      \"rgba(144,238,144,1)\",","      \"rgba(144,238,144,100%)\",","      \"rgb(56%,93%,56%)\",","      \"rgba(56%,93%,56%,1)\",","      \"rgba(56%,93%,56%,100%)\",","      \"hsl(120,73%,75%)\",","      \"hsla(120,73%,75%,1)\",","      \"hsla(120,73%,75%,100%)\",","      \"hwb(120,56%,7%)\",","      \"hwb(120,56%,7%,1)\",","      \"hwb(120,56%,7%,100%)\",","    ],","  },","  \"lightgrey\": {","    \"hex\": [","      \"#d3d3d3\", \"#ffd3d3d3\",","    ],","    \"func\": [","      \"rgb(211,211,211)\",","      \"rgba(211,211,211,1)\",","      \"rgba(211,211,211,100%)\",","      \"rgb(83%,83%,83%)\",","      \"rgba(83%,83%,83%,1)\",","      \"rgba(83%,83%,83%,100%)\",","      \"hsl(0,0%,83%)\",","      \"hsla(0,0%,83%,1)\",","      \"hsla(0,0%,83%,100%)\",","      \"hwb(0,83%,17%)\",","      \"hwb(0,83%,17%,1)\",","      \"hwb(0,83%,17%,100%)\",","      \"gray(211)\",","      \"gray(211,1)\",","      \"gray(211,100%)\",","      \"gray(211%)\",","      \"gray(211%,1)\",","      \"gray(211%,100%)\",","    ],","  },","  \"lightpink\": {","    \"hex\": [","      \"#ffb6c1\", \"#ffffb6c1\",","    ],","    \"func\": [","      \"rgb(255,182,193)\",","      \"rgba(255,182,193,1)\",","      \"rgba(255,182,193,100%)\",","      \"rgb(100%,71%,76%)\",","      \"rgba(100%,71%,76%,1)\",","      \"rgba(100%,71%,76%,100%)\",","      \"hsl(351,100%,86%)\",","      \"hsla(351,100%,86%,1)\",","      \"hsla(351,100%,86%,100%)\",","      \"hwb(351,71%,0%)\",","      \"hwb(351,71%,0%,1)\",","      \"hwb(351,71%,0%,100%)\",","    ],","  },","  \"lightsalmon\": {","    \"hex\": [","      \"#ffa07a\", \"#ffffa07a\",","    ],","    \"func\": [","      \"rgb(255,160,122)\",","      \"rgba(255,160,122,1)\",","      \"rgba(255,160,122,100%)\",","      \"rgb(100%,63%,48%)\",","      \"rgba(100%,63%,48%,1)\",","      \"rgba(100%,63%,48%,100%)\",","      \"hsl(17,100%,74%)\",","      \"hsla(17,100%,74%,1)\",","      \"hsla(17,100%,74%,100%)\",","      \"hwb(17,48%,0%)\",","      \"hwb(17,48%,0%,1)\",","      \"hwb(17,48%,0%,100%)\",","    ],","  },","  \"lightseagreen\": {","    \"hex\": [","      \"#20b2aa\", \"#ff20b2aa\",","    ],","    \"func\": [","      \"rgb(32,178,170)\",","      \"rgba(32,178,170,1)\",","      \"rgba(32,178,170,100%)\",","      \"rgb(13%,70%,67%)\",","      \"rgba(13%,70%,67%,1)\",","      \"rgba(13%,70%,67%,100%)\",","      \"hsl(177,70%,41%)\",","      \"hsla(177,70%,41%,1)\",","      \"hsla(177,70%,41%,100%)\",","      \"hwb(177,13%,30%)\",","      \"hwb(177,13%,30%,1)\",","      \"hwb(177,13%,30%,100%)\",","    ],","  },","  \"lightskyblue\": {","    \"hex\": [","      \"#87cefa\", \"#ff87cefa\",","    ],","    \"func\": [","      \"rgb(135,206,250)\",","      \"rgba(135,206,250,1)\",","      \"rgba(135,206,250,100%)\",","      \"rgb(53%,81%,98%)\",","      \"rgba(53%,81%,98%,1)\",","      \"rgba(53%,81%,98%,100%)\",","      \"hsl(203,92%,75%)\",","      \"hsla(203,92%,75%,1)\",","      \"hsla(203,92%,75%,100%)\",","      \"hwb(203,53%,2%)\",","      \"hwb(203,53%,2%,1)\",","      \"hwb(203,53%,2%,100%)\",","    ],","  },","  \"lightslategray\": {","    \"hex\": [","      \"#778899\", \"#ff778899\", \"#789\", \"#f789\",","    ],","    \"func\": [","      \"rgb(119,136,153)\",","      \"rgba(119,136,153,1)\",","      \"rgba(119,136,153,100%)\",","      \"rgb(47%,53%,60%)\",","      \"rgba(47%,53%,60%,1)\",","      \"rgba(47%,53%,60%,100%)\",","      \"hsl(210,14%,53%)\",","      \"hsla(210,14%,53%,1)\",","      \"hsla(210,14%,53%,100%)\",","      \"hwb(210,47%,40%)\",","      \"hwb(210,47%,40%,1)\",","      \"hwb(210,47%,40%,100%)\",","    ],","  },","  \"lightslategrey\": {","    \"hex\": [","      \"#778899\", \"#ff778899\", \"#789\", \"#f789\",","    ],","    \"func\": [","      \"rgb(119,136,153)\",","      \"rgba(119,136,153,1)\",","      \"rgba(119,136,153,100%)\",","      \"rgb(47%,53%,60%)\",","      \"rgba(47%,53%,60%,1)\",","      \"rgba(47%,53%,60%,100%)\",","      \"hsl(210,14%,53%)\",","      \"hsla(210,14%,53%,1)\",","      \"hsla(210,14%,53%,100%)\",","      \"hwb(210,47%,40%)\",","      \"hwb(210,47%,40%,1)\",","      \"hwb(210,47%,40%,100%)\",","    ],","  },","  \"lightsteelblue\": {","    \"hex\": [","      \"#b0c4de\", \"#ffb0c4de\",","    ],","    \"func\": [","      \"rgb(176,196,222)\",","      \"rgba(176,196,222,1)\",","      \"rgba(176,196,222,100%)\",","      \"rgb(69%,77%,87%)\",","      \"rgba(69%,77%,87%,1)\",","      \"rgba(69%,77%,87%,100%)\",","      \"hsl(214,41%,78%)\",","      \"hsla(214,41%,78%,1)\",","      \"hsla(214,41%,78%,100%)\",","      \"hwb(214,69%,13%)\",","      \"hwb(214,69%,13%,1)\",","      \"hwb(214,69%,13%,100%)\",","    ],","  },","  \"lightyellow\": {","    \"hex\": [","      \"#ffffe0\", \"#ffffffe0\",","    ],","    \"func\": [","      \"rgb(255,255,224)\",","      \"rgba(255,255,224,1)\",","      \"rgba(255,255,224,100%)\",","      \"rgb(100%,100%,88%)\",","      \"rgba(100%,100%,88%,1)\",","      \"rgba(100%,100%,88%,100%)\",","      \"hsl(60,100%,94%)\",","      \"hsla(60,100%,94%,1)\",","      \"hsla(60,100%,94%,100%)\",","      \"hwb(60,88%,0%)\",","      \"hwb(60,88%,0%,1)\",","      \"hwb(60,88%,0%,100%)\",","    ],","  },","  \"lime\": {","    \"hex\": [","      \"#00ff00\", \"#ff00ff00\", \"#0f0\", \"#f0f0\",","    ],","    \"func\": [","      \"rgb(0,255,0)\",","      \"rgba(0,255,0,1)\",","      \"rgba(0,255,0,100%)\",","      \"rgb(0%,100%,0%)\",","      \"rgba(0%,100%,0%,1)\",","      \"rgba(0%,100%,0%,100%)\",","      \"hsl(120,100%,50%)\",","      \"hsla(120,100%,50%,1)\",","      \"hsla(120,100%,50%,100%)\",","      \"hwb(120,0%,0%)\",","      \"hwb(120,0%,0%,1)\",","      \"hwb(120,0%,0%,100%)\",","    ],","  },","  \"limegreen\": {","    \"hex\": [","      \"#32cd32\", \"#ff32cd32\",","    ],","    \"func\": [","      \"rgb(50,205,50)\",","      \"rgba(50,205,50,1)\",","      \"rgba(50,205,50,100%)\",","      \"rgb(20%,80%,20%)\",","      \"rgba(20%,80%,20%,1)\",","      \"rgba(20%,80%,20%,100%)\",","      \"hsl(120,61%,50%)\",","      \"hsla(120,61%,50%,1)\",","      \"hsla(120,61%,50%,100%)\",","      \"hwb(120,20%,20%)\",","      \"hwb(120,20%,20%,1)\",","      \"hwb(120,20%,20%,100%)\",","    ],","  },","  \"linen\": {","    \"hex\": [","      \"#faf0e6\", \"#fffaf0e6\",","    ],","    \"func\": [","      \"rgb(250,240,230)\",","      \"rgba(250,240,230,1)\",","      \"rgba(250,240,230,100%)\",","      \"rgb(98%,94%,90%)\",","      \"rgba(98%,94%,90%,1)\",","      \"rgba(98%,94%,90%,100%)\",","      \"hsl(30,67%,94%)\",","      \"hsla(30,67%,94%,1)\",","      \"hsla(30,67%,94%,100%)\",","      \"hwb(30,90%,2%)\",","      \"hwb(30,90%,2%,1)\",","      \"hwb(30,90%,2%,100%)\",","    ],","  },","  \"magenta\": {","    \"hex\": [","      \"#ff00ff\", \"#ffff00ff\", \"#f0f\", \"#ff0f\",","    ],","    \"func\": [","      \"rgb(255,0,255)\",","      \"rgba(255,0,255,1)\",","      \"rgba(255,0,255,100%)\",","      \"rgb(100%,0%,100%)\",","      \"rgba(100%,0%,100%,1)\",","      \"rgba(100%,0%,100%,100%)\",","      \"hsl(300,100%,50%)\",","      \"hsla(300,100%,50%,1)\",","      \"hsla(300,100%,50%,100%)\",","      \"hwb(300,0%,0%)\",","      \"hwb(300,0%,0%,1)\",","      \"hwb(300,0%,0%,100%)\",","    ],","  },","  \"maroon\": {","    \"hex\": [","      \"#800000\", \"#ff800000\",","    ],","    \"func\": [","      \"rgb(128,0,0)\",","      \"rgba(128,0,0,1)\",","      \"rgba(128,0,0,100%)\",","      \"rgb(50%,0%,0%)\",","      \"rgba(50%,0%,0%,1)\",","      \"rgba(50%,0%,0%,100%)\",","      \"hsl(0,100%,25%)\",","      \"hsla(0,100%,25%,1)\",","      \"hsla(0,100%,25%,100%)\",","      \"hwb(0,0%,50%)\",","      \"hwb(0,0%,50%,1)\",","      \"hwb(0,0%,50%,100%)\",","    ],","  },","  \"mediumaquamarine\": {","    \"hex\": [","      \"#66cdaa\", \"#ff66cdaa\",","    ],","    \"func\": [","      \"rgb(102,205,170)\",","      \"rgba(102,205,170,1)\",","      \"rgba(102,205,170,100%)\",","      \"rgb(40%,80%,67%)\",","      \"rgba(40%,80%,67%,1)\",","      \"rgba(40%,80%,67%,100%)\",","      \"hsl(160,51%,60%)\",","      \"hsla(160,51%,60%,1)\",","      \"hsla(160,51%,60%,100%)\",","      \"hwb(160,40%,20%)\",","      \"hwb(160,40%,20%,1)\",","      \"hwb(160,40%,20%,100%)\",","    ],","  },","  \"mediumblue\": {","    \"hex\": [","      \"#0000cd\", \"#ff0000cd\",","    ],","    \"func\": [","      \"rgb(0,0,205)\",","      \"rgba(0,0,205,1)\",","      \"rgba(0,0,205,100%)\",","      \"rgb(0%,0%,80%)\",","      \"rgba(0%,0%,80%,1)\",","      \"rgba(0%,0%,80%,100%)\",","      \"hsl(240,100%,40%)\",","      \"hsla(240,100%,40%,1)\",","      \"hsla(240,100%,40%,100%)\",","      \"hwb(240,0%,20%)\",","      \"hwb(240,0%,20%,1)\",","      \"hwb(240,0%,20%,100%)\",","    ],","  },","  \"mediumorchid\": {","    \"hex\": [","      \"#ba55d3\", \"#ffba55d3\",","    ],","    \"func\": [","      \"rgb(186,85,211)\",","      \"rgba(186,85,211,1)\",","      \"rgba(186,85,211,100%)\",","      \"rgb(73%,33%,83%)\",","      \"rgba(73%,33%,83%,1)\",","      \"rgba(73%,33%,83%,100%)\",","      \"hsl(288,59%,58%)\",","      \"hsla(288,59%,58%,1)\",","      \"hsla(288,59%,58%,100%)\",","      \"hwb(288,33%,17%)\",","      \"hwb(288,33%,17%,1)\",","      \"hwb(288,33%,17%,100%)\",","    ],","  },","  \"mediumpurple\": {","    \"hex\": [","      \"#9370db\", \"#ff9370db\",","    ],","    \"func\": [","      \"rgb(147,112,219)\",","      \"rgba(147,112,219,1)\",","      \"rgba(147,112,219,100%)\",","      \"rgb(58%,44%,86%)\",","      \"rgba(58%,44%,86%,1)\",","      \"rgba(58%,44%,86%,100%)\",","      \"hsl(260,60%,65%)\",","      \"hsla(260,60%,65%,1)\",","      \"hsla(260,60%,65%,100%)\",","      \"hwb(260,44%,14%)\",","      \"hwb(260,44%,14%,1)\",","      \"hwb(260,44%,14%,100%)\",","    ],","  },","  \"mediumseagreen\": {","    \"hex\": [","      \"#3cb371\", \"#ff3cb371\",","    ],","    \"func\": [","      \"rgb(60,179,113)\",","      \"rgba(60,179,113,1)\",","      \"rgba(60,179,113,100%)\",","      \"rgb(24%,70%,44%)\",","      \"rgba(24%,70%,44%,1)\",","      \"rgba(24%,70%,44%,100%)\",","      \"hsl(147,50%,47%)\",","      \"hsla(147,50%,47%,1)\",","      \"hsla(147,50%,47%,100%)\",","      \"hwb(147,24%,30%)\",","      \"hwb(147,24%,30%,1)\",","      \"hwb(147,24%,30%,100%)\",","    ],","  },","  \"mediumslateblue\": {","    \"hex\": [","      \"#7b68ee\", \"#ff7b68ee\",","    ],","    \"func\": [","      \"rgb(123,104,238)\",","      \"rgba(123,104,238,1)\",","      \"rgba(123,104,238,100%)\",","      \"rgb(48%,41%,93%)\",","      \"rgba(48%,41%,93%,1)\",","      \"rgba(48%,41%,93%,100%)\",","      \"hsl(249,80%,67%)\",","      \"hsla(249,80%,67%,1)\",","      \"hsla(249,80%,67%,100%)\",","      \"hwb(249,41%,7%)\",","      \"hwb(249,41%,7%,1)\",","      \"hwb(249,41%,7%,100%)\",","    ],","  },","  \"mediumspringgreen\": {","    \"hex\": [","      \"#00fa9a\", \"#ff00fa9a\",","    ],","    \"func\": [","      \"rgb(0,250,154)\",","      \"rgba(0,250,154,1)\",","      \"rgba(0,250,154,100%)\",","      \"rgb(0%,98%,60%)\",","      \"rgba(0%,98%,60%,1)\",","      \"rgba(0%,98%,60%,100%)\",","      \"hsl(157,100%,49%)\",","      \"hsla(157,100%,49%,1)\",","      \"hsla(157,100%,49%,100%)\",","      \"hwb(157,0%,2%)\",","      \"hwb(157,0%,2%,1)\",","      \"hwb(157,0%,2%,100%)\",","    ],","  },","  \"mediumturquoise\": {","    \"hex\": [","      \"#48d1cc\", \"#ff48d1cc\",","    ],","    \"func\": [","      \"rgb(72,209,204)\",","      \"rgba(72,209,204,1)\",","      \"rgba(72,209,204,100%)\",","      \"rgb(28%,82%,80%)\",","      \"rgba(28%,82%,80%,1)\",","      \"rgba(28%,82%,80%,100%)\",","      \"hsl(178,60%,55%)\",","      \"hsla(178,60%,55%,1)\",","      \"hsla(178,60%,55%,100%)\",","      \"hwb(178,28%,18%)\",","      \"hwb(178,28%,18%,1)\",","      \"hwb(178,28%,18%,100%)\",","    ],","  },","  \"mediumvioletred\": {","    \"hex\": [","      \"#c71585\", \"#ffc71585\",","    ],","    \"func\": [","      \"rgb(199,21,133)\",","      \"rgba(199,21,133,1)\",","      \"rgba(199,21,133,100%)\",","      \"rgb(78%,8%,52%)\",","      \"rgba(78%,8%,52%,1)\",","      \"rgba(78%,8%,52%,100%)\",","      \"hsl(322,81%,43%)\",","      \"hsla(322,81%,43%,1)\",","      \"hsla(322,81%,43%,100%)\",","      \"hwb(322,8%,22%)\",","      \"hwb(322,8%,22%,1)\",","      \"hwb(322,8%,22%,100%)\",","    ],","  },","  \"midnightblue\": {","    \"hex\": [","      \"#191970\", \"#ff191970\",","    ],","    \"func\": [","      \"rgb(25,25,112)\",","      \"rgba(25,25,112,1)\",","      \"rgba(25,25,112,100%)\",","      \"rgb(10%,10%,44%)\",","      \"rgba(10%,10%,44%,1)\",","      \"rgba(10%,10%,44%,100%)\",","      \"hsl(240,64%,27%)\",","      \"hsla(240,64%,27%,1)\",","      \"hsla(240,64%,27%,100%)\",","      \"hwb(240,10%,56%)\",","      \"hwb(240,10%,56%,1)\",","      \"hwb(240,10%,56%,100%)\",","    ],","  },","  \"mintcream\": {","    \"hex\": [","      \"#f5fffa\", \"#fff5fffa\",","    ],","    \"func\": [","      \"rgb(245,255,250)\",","      \"rgba(245,255,250,1)\",","      \"rgba(245,255,250,100%)\",","      \"rgb(96%,100%,98%)\",","      \"rgba(96%,100%,98%,1)\",","      \"rgba(96%,100%,98%,100%)\",","      \"hsl(150,100%,98%)\",","      \"hsla(150,100%,98%,1)\",","      \"hsla(150,100%,98%,100%)\",","      \"hwb(150,96%,0%)\",","      \"hwb(150,96%,0%,1)\",","      \"hwb(150,96%,0%,100%)\",","    ],","  },","  \"mistyrose\": {","    \"hex\": [","      \"#ffe4e1\", \"#ffffe4e1\",","    ],","    \"func\": [","      \"rgb(255,228,225)\",","      \"rgba(255,228,225,1)\",","      \"rgba(255,228,225,100%)\",","      \"rgb(100%,89%,88%)\",","      \"rgba(100%,89%,88%,1)\",","      \"rgba(100%,89%,88%,100%)\",","      \"hsl(6,100%,94%)\",","      \"hsla(6,100%,94%,1)\",","      \"hsla(6,100%,94%,100%)\",","      \"hwb(6,88%,0%)\",","      \"hwb(6,88%,0%,1)\",","      \"hwb(6,88%,0%,100%)\",","    ],","  },","  \"moccasin\": {","    \"hex\": [","      \"#ffe4b5\", \"#ffffe4b5\",","    ],","    \"func\": [","      \"rgb(255,228,181)\",","      \"rgba(255,228,181,1)\",","      \"rgba(255,228,181,100%)\",","      \"rgb(100%,89%,71%)\",","      \"rgba(100%,89%,71%,1)\",","      \"rgba(100%,89%,71%,100%)\",","      \"hsl(38,100%,85%)\",","      \"hsla(38,100%,85%,1)\",","      \"hsla(38,100%,85%,100%)\",","      \"hwb(38,71%,0%)\",","      \"hwb(38,71%,0%,1)\",","      \"hwb(38,71%,0%,100%)\",","    ],","  },","  \"navajowhite\": {","    \"hex\": [","      \"#ffdead\", \"#ffffdead\",","    ],","    \"func\": [","      \"rgb(255,222,173)\",","      \"rgba(255,222,173,1)\",","      \"rgba(255,222,173,100%)\",","      \"rgb(100%,87%,68%)\",","      \"rgba(100%,87%,68%,1)\",","      \"rgba(100%,87%,68%,100%)\",","      \"hsl(36,100%,84%)\",","      \"hsla(36,100%,84%,1)\",","      \"hsla(36,100%,84%,100%)\",","      \"hwb(36,68%,0%)\",","      \"hwb(36,68%,0%,1)\",","      \"hwb(36,68%,0%,100%)\",","    ],","  },","  \"navy\": {","    \"hex\": [","      \"#000080\", \"#ff000080\",","    ],","    \"func\": [","      \"rgb(0,0,128)\",","      \"rgba(0,0,128,1)\",","      \"rgba(0,0,128,100%)\",","      \"rgb(0%,0%,50%)\",","      \"rgba(0%,0%,50%,1)\",","      \"rgba(0%,0%,50%,100%)\",","      \"hsl(240,100%,25%)\",","      \"hsla(240,100%,25%,1)\",","      \"hsla(240,100%,25%,100%)\",","      \"hwb(240,0%,50%)\",","      \"hwb(240,0%,50%,1)\",","      \"hwb(240,0%,50%,100%)\",","    ],","  },","  \"oldlace\": {","    \"hex\": [","      \"#fdf5e6\", \"#fffdf5e6\",","    ],","    \"func\": [","      \"rgb(253,245,230)\",","      \"rgba(253,245,230,1)\",","      \"rgba(253,245,230,100%)\",","      \"rgb(99%,96%,90%)\",","      \"rgba(99%,96%,90%,1)\",","      \"rgba(99%,96%,90%,100%)\",","      \"hsl(39,85%,95%)\",","      \"hsla(39,85%,95%,1)\",","      \"hsla(39,85%,95%,100%)\",","      \"hwb(39,90%,1%)\",","      \"hwb(39,90%,1%,1)\",","      \"hwb(39,90%,1%,100%)\",","    ],","  },","  \"olive\": {","    \"hex\": [","      \"#808000\", \"#ff808000\",","    ],","    \"func\": [","      \"rgb(128,128,0)\",","      \"rgba(128,128,0,1)\",","      \"rgba(128,128,0,100%)\",","      \"rgb(50%,50%,0%)\",","      \"rgba(50%,50%,0%,1)\",","      \"rgba(50%,50%,0%,100%)\",","      \"hsl(60,100%,25%)\",","      \"hsla(60,100%,25%,1)\",","      \"hsla(60,100%,25%,100%)\",","      \"hwb(60,0%,50%)\",","      \"hwb(60,0%,50%,1)\",","      \"hwb(60,0%,50%,100%)\",","    ],","  },","  \"olivedrab\": {","    \"hex\": [","      \"#6b8e23\", \"#ff6b8e23\",","    ],","    \"func\": [","      \"rgb(107,142,35)\",","      \"rgba(107,142,35,1)\",","      \"rgba(107,142,35,100%)\",","      \"rgb(42%,56%,14%)\",","      \"rgba(42%,56%,14%,1)\",","      \"rgba(42%,56%,14%,100%)\",","      \"hsl(80,60%,35%)\",","      \"hsla(80,60%,35%,1)\",","      \"hsla(80,60%,35%,100%)\",","      \"hwb(80,14%,44%)\",","      \"hwb(80,14%,44%,1)\",","      \"hwb(80,14%,44%,100%)\",","    ],","  },","  \"orange\": {","    \"hex\": [","      \"#ffa500\", \"#ffffa500\",","    ],","    \"func\": [","      \"rgb(255,165,0)\",","      \"rgba(255,165,0,1)\",","      \"rgba(255,165,0,100%)\",","      \"rgb(100%,65%,0%)\",","      \"rgba(100%,65%,0%,1)\",","      \"rgba(100%,65%,0%,100%)\",","      \"hsl(39,100%,50%)\",","      \"hsla(39,100%,50%,1)\",","      \"hsla(39,100%,50%,100%)\",","      \"hwb(39,0%,0%)\",","      \"hwb(39,0%,0%,1)\",","      \"hwb(39,0%,0%,100%)\",","    ],","  },","  \"orangered\": {","    \"hex\": [","      \"#ff4500\", \"#ffff4500\",","    ],","    \"func\": [","      \"rgb(255,69,0)\",","      \"rgba(255,69,0,1)\",","      \"rgba(255,69,0,100%)\",","      \"rgb(100%,27%,0%)\",","      \"rgba(100%,27%,0%,1)\",","      \"rgba(100%,27%,0%,100%)\",","      \"hsl(16,100%,50%)\",","      \"hsla(16,100%,50%,1)\",","      \"hsla(16,100%,50%,100%)\",","      \"hwb(16,0%,0%)\",","      \"hwb(16,0%,0%,1)\",","      \"hwb(16,0%,0%,100%)\",","    ],","  },","  \"orchid\": {","    \"hex\": [","      \"#da70d6\", \"#ffda70d6\",","    ],","    \"func\": [","      \"rgb(218,112,214)\",","      \"rgba(218,112,214,1)\",","      \"rgba(218,112,214,100%)\",","      \"rgb(85%,44%,84%)\",","      \"rgba(85%,44%,84%,1)\",","      \"rgba(85%,44%,84%,100%)\",","      \"hsl(302,59%,65%)\",","      \"hsla(302,59%,65%,1)\",","      \"hsla(302,59%,65%,100%)\",","      \"hwb(302,44%,15%)\",","      \"hwb(302,44%,15%,1)\",","      \"hwb(302,44%,15%,100%)\",","    ],","  },","  \"palegoldenrod\": {","    \"hex\": [","      \"#eee8aa\", \"#ffeee8aa\",","    ],","    \"func\": [","      \"rgb(238,232,170)\",","      \"rgba(238,232,170,1)\",","      \"rgba(238,232,170,100%)\",","      \"rgb(93%,91%,67%)\",","      \"rgba(93%,91%,67%,1)\",","      \"rgba(93%,91%,67%,100%)\",","      \"hsl(55,67%,80%)\",","      \"hsla(55,67%,80%,1)\",","      \"hsla(55,67%,80%,100%)\",","      \"hwb(55,67%,7%)\",","      \"hwb(55,67%,7%,1)\",","      \"hwb(55,67%,7%,100%)\",","    ],","  },","  \"palegreen\": {","    \"hex\": [","      \"#98fb98\", \"#ff98fb98\",","    ],","    \"func\": [","      \"rgb(152,251,152)\",","      \"rgba(152,251,152,1)\",","      \"rgba(152,251,152,100%)\",","      \"rgb(60%,98%,60%)\",","      \"rgba(60%,98%,60%,1)\",","      \"rgba(60%,98%,60%,100%)\",","      \"hsl(120,93%,79%)\",","      \"hsla(120,93%,79%,1)\",","      \"hsla(120,93%,79%,100%)\",","      \"hwb(120,60%,2%)\",","      \"hwb(120,60%,2%,1)\",","      \"hwb(120,60%,2%,100%)\",","    ],","  },","  \"paleturquoise\": {","    \"hex\": [","      \"#afeeee\", \"#ffafeeee\",","    ],","    \"func\": [","      \"rgb(175,238,238)\",","      \"rgba(175,238,238,1)\",","      \"rgba(175,238,238,100%)\",","      \"rgb(69%,93%,93%)\",","      \"rgba(69%,93%,93%,1)\",","      \"rgba(69%,93%,93%,100%)\",","      \"hsl(180,65%,81%)\",","      \"hsla(180,65%,81%,1)\",","      \"hsla(180,65%,81%,100%)\",","      \"hwb(180,69%,7%)\",","      \"hwb(180,69%,7%,1)\",","      \"hwb(180,69%,7%,100%)\",","    ],","  },","  \"palevioletred\": {","    \"hex\": [","      \"#db7093\", \"#ffdb7093\",","    ],","    \"func\": [","      \"rgb(219,112,147)\",","      \"rgba(219,112,147,1)\",","      \"rgba(219,112,147,100%)\",","      \"rgb(86%,44%,58%)\",","      \"rgba(86%,44%,58%,1)\",","      \"rgba(86%,44%,58%,100%)\",","      \"hsl(340,60%,65%)\",","      \"hsla(340,60%,65%,1)\",","      \"hsla(340,60%,65%,100%)\",","      \"hwb(340,44%,14%)\",","      \"hwb(340,44%,14%,1)\",","      \"hwb(340,44%,14%,100%)\",","    ],","  },","  \"papayawhip\": {","    \"hex\": [","      \"#ffefd5\", \"#ffffefd5\",","    ],","    \"func\": [","      \"rgb(255,239,213)\",","      \"rgba(255,239,213,1)\",","      \"rgba(255,239,213,100%)\",","      \"rgb(100%,94%,84%)\",","      \"rgba(100%,94%,84%,1)\",","      \"rgba(100%,94%,84%,100%)\",","      \"hsl(37,100%,92%)\",","      \"hsla(37,100%,92%,1)\",","      \"hsla(37,100%,92%,100%)\",","      \"hwb(37,84%,0%)\",","      \"hwb(37,84%,0%,1)\",","      \"hwb(37,84%,0%,100%)\",","    ],","  },","  \"peachpuff\": {","    \"hex\": [","      \"#ffdab9\", \"#ffffdab9\",","    ],","    \"func\": [","      \"rgb(255,218,185)\",","      \"rgba(255,218,185,1)\",","      \"rgba(255,218,185,100%)\",","      \"rgb(100%,85%,73%)\",","      \"rgba(100%,85%,73%,1)\",","      \"rgba(100%,85%,73%,100%)\",","      \"hsl(28,100%,86%)\",","      \"hsla(28,100%,86%,1)\",","      \"hsla(28,100%,86%,100%)\",","      \"hwb(28,73%,0%)\",","      \"hwb(28,73%,0%,1)\",","      \"hwb(28,73%,0%,100%)\",","    ],","  },","  \"peru\": {","    \"hex\": [","      \"#cd853f\", \"#ffcd853f\",","    ],","    \"func\": [","      \"rgb(205,133,63)\",","      \"rgba(205,133,63,1)\",","      \"rgba(205,133,63,100%)\",","      \"rgb(80%,52%,25%)\",","      \"rgba(80%,52%,25%,1)\",","      \"rgba(80%,52%,25%,100%)\",","      \"hsl(30,59%,53%)\",","      \"hsla(30,59%,53%,1)\",","      \"hsla(30,59%,53%,100%)\",","      \"hwb(30,25%,20%)\",","      \"hwb(30,25%,20%,1)\",","      \"hwb(30,25%,20%,100%)\",","    ],","  },","  \"pink\": {","    \"hex\": [","      \"#ffc0cb\", \"#ffffc0cb\",","    ],","    \"func\": [","      \"rgb(255,192,203)\",","      \"rgba(255,192,203,1)\",","      \"rgba(255,192,203,100%)\",","      \"rgb(100%,75%,80%)\",","      \"rgba(100%,75%,80%,1)\",","      \"rgba(100%,75%,80%,100%)\",","      \"hsl(350,100%,88%)\",","      \"hsla(350,100%,88%,1)\",","      \"hsla(350,100%,88%,100%)\",","      \"hwb(350,75%,0%)\",","      \"hwb(350,75%,0%,1)\",","      \"hwb(350,75%,0%,100%)\",","    ],","  },","  \"plum\": {","    \"hex\": [","      \"#dda0dd\", \"#ffdda0dd\",","    ],","    \"func\": [","      \"rgb(221,160,221)\",","      \"rgba(221,160,221,1)\",","      \"rgba(221,160,221,100%)\",","      \"rgb(87%,63%,87%)\",","      \"rgba(87%,63%,87%,1)\",","      \"rgba(87%,63%,87%,100%)\",","      \"hsl(300,47%,75%)\",","      \"hsla(300,47%,75%,1)\",","      \"hsla(300,47%,75%,100%)\",","      \"hwb(300,63%,13%)\",","      \"hwb(300,63%,13%,1)\",","      \"hwb(300,63%,13%,100%)\",","    ],","  },","  \"powderblue\": {","    \"hex\": [","      \"#b0e0e6\", \"#ffb0e0e6\",","    ],","    \"func\": [","      \"rgb(176,224,230)\",","      \"rgba(176,224,230,1)\",","      \"rgba(176,224,230,100%)\",","      \"rgb(69%,88%,90%)\",","      \"rgba(69%,88%,90%,1)\",","      \"rgba(69%,88%,90%,100%)\",","      \"hsl(187,52%,80%)\",","      \"hsla(187,52%,80%,1)\",","      \"hsla(187,52%,80%,100%)\",","      \"hwb(187,69%,10%)\",","      \"hwb(187,69%,10%,1)\",","      \"hwb(187,69%,10%,100%)\",","    ],","  },","  \"purple\": {","    \"hex\": [","      \"#800080\", \"#ff800080\",","    ],","    \"func\": [","      \"rgb(128,0,128)\",","      \"rgba(128,0,128,1)\",","      \"rgba(128,0,128,100%)\",","      \"rgb(50%,0%,50%)\",","      \"rgba(50%,0%,50%,1)\",","      \"rgba(50%,0%,50%,100%)\",","      \"hsl(300,100%,25%)\",","      \"hsla(300,100%,25%,1)\",","      \"hsla(300,100%,25%,100%)\",","      \"hwb(300,0%,50%)\",","      \"hwb(300,0%,50%,1)\",","      \"hwb(300,0%,50%,100%)\",","    ],","  },","  \"rebeccapurple\": {","    \"hex\": [","      \"#663399\", \"#ff663399\", \"#639\", \"#f639\",","    ],","    \"func\": [","      \"rgb(102,51,153)\",","      \"rgba(102,51,153,1)\",","      \"rgba(102,51,153,100%)\",","      \"rgb(40%,20%,60%)\",","      \"rgba(40%,20%,60%,1)\",","      \"rgba(40%,20%,60%,100%)\",","      \"hsl(270,50%,40%)\",","      \"hsla(270,50%,40%,1)\",","      \"hsla(270,50%,40%,100%)\",","      \"hwb(270,20%,40%)\",","      \"hwb(270,20%,40%,1)\",","      \"hwb(270,20%,40%,100%)\",","    ],","  },","  \"red\": {","    \"hex\": [","      \"#ff0000\", \"#ffff0000\", \"#f00\", \"#ff00\",","    ],","    \"func\": [","      \"rgb(255,0,0)\",","      \"rgba(255,0,0,1)\",","      \"rgba(255,0,0,100%)\",","      \"rgb(100%,0%,0%)\",","      \"rgba(100%,0%,0%,1)\",","      \"rgba(100%,0%,0%,100%)\",","      \"hsl(0,100%,50%)\",","      \"hsla(0,100%,50%,1)\",","      \"hsla(0,100%,50%,100%)\",","      \"hwb(0,0%,0%)\",","      \"hwb(0,0%,0%,1)\",","      \"hwb(0,0%,0%,100%)\",","    ],","  },","  \"rosybrown\": {","    \"hex\": [","      \"#bc8f8f\", \"#ffbc8f8f\",","    ],","    \"func\": [","      \"rgb(188,143,143)\",","      \"rgba(188,143,143,1)\",","      \"rgba(188,143,143,100%)\",","      \"rgb(74%,56%,56%)\",","      \"rgba(74%,56%,56%,1)\",","      \"rgba(74%,56%,56%,100%)\",","      \"hsl(0,25%,65%)\",","      \"hsla(0,25%,65%,1)\",","      \"hsla(0,25%,65%,100%)\",","      \"hwb(0,56%,26%)\",","      \"hwb(0,56%,26%,1)\",","      \"hwb(0,56%,26%,100%)\",","    ],","  },","  \"royalblue\": {","    \"hex\": [","      \"#4169e1\", \"#ff4169e1\",","    ],","    \"func\": [","      \"rgb(65,105,225)\",","      \"rgba(65,105,225,1)\",","      \"rgba(65,105,225,100%)\",","      \"rgb(25%,41%,88%)\",","      \"rgba(25%,41%,88%,1)\",","      \"rgba(25%,41%,88%,100%)\",","      \"hsl(225,73%,57%)\",","      \"hsla(225,73%,57%,1)\",","      \"hsla(225,73%,57%,100%)\",","      \"hwb(225,25%,12%)\",","      \"hwb(225,25%,12%,1)\",","      \"hwb(225,25%,12%,100%)\",","    ],","  },","  \"saddlebrown\": {","    \"hex\": [","      \"#8b4513\", \"#ff8b4513\",","    ],","    \"func\": [","      \"rgb(139,69,19)\",","      \"rgba(139,69,19,1)\",","      \"rgba(139,69,19,100%)\",","      \"rgb(55%,27%,7%)\",","      \"rgba(55%,27%,7%,1)\",","      \"rgba(55%,27%,7%,100%)\",","      \"hsl(25,76%,31%)\",","      \"hsla(25,76%,31%,1)\",","      \"hsla(25,76%,31%,100%)\",","      \"hwb(25,7%,45%)\",","      \"hwb(25,7%,45%,1)\",","      \"hwb(25,7%,45%,100%)\",","    ],","  },","  \"salmon\": {","    \"hex\": [","      \"#fa8072\", \"#fffa8072\",","    ],","    \"func\": [","      \"rgb(250,128,114)\",","      \"rgba(250,128,114,1)\",","      \"rgba(250,128,114,100%)\",","      \"rgb(98%,50%,45%)\",","      \"rgba(98%,50%,45%,1)\",","      \"rgba(98%,50%,45%,100%)\",","      \"hsl(6,93%,71%)\",","      \"hsla(6,93%,71%,1)\",","      \"hsla(6,93%,71%,100%)\",","      \"hwb(6,45%,2%)\",","      \"hwb(6,45%,2%,1)\",","      \"hwb(6,45%,2%,100%)\",","    ],","  },","  \"sandybrown\": {","    \"hex\": [","      \"#f4a460\", \"#fff4a460\",","    ],","    \"func\": [","      \"rgb(244,164,96)\",","      \"rgba(244,164,96,1)\",","      \"rgba(244,164,96,100%)\",","      \"rgb(96%,64%,38%)\",","      \"rgba(96%,64%,38%,1)\",","      \"rgba(96%,64%,38%,100%)\",","      \"hsl(28,87%,67%)\",","      \"hsla(28,87%,67%,1)\",","      \"hsla(28,87%,67%,100%)\",","      \"hwb(28,38%,4%)\",","      \"hwb(28,38%,4%,1)\",","      \"hwb(28,38%,4%,100%)\",","    ],","  },","  \"seagreen\": {","    \"hex\": [","      \"#2e8b57\", \"#ff2e8b57\",","    ],","    \"func\": [","      \"rgb(46,139,87)\",","      \"rgba(46,139,87,1)\",","      \"rgba(46,139,87,100%)\",","      \"rgb(18%,55%,34%)\",","      \"rgba(18%,55%,34%,1)\",","      \"rgba(18%,55%,34%,100%)\",","      \"hsl(146,50%,36%)\",","      \"hsla(146,50%,36%,1)\",","      \"hsla(146,50%,36%,100%)\",","      \"hwb(146,18%,45%)\",","      \"hwb(146,18%,45%,1)\",","      \"hwb(146,18%,45%,100%)\",","    ],","  },","  \"seashell\": {","    \"hex\": [","      \"#fff5ee\", \"#fffff5ee\",","    ],","    \"func\": [","      \"rgb(255,245,238)\",","      \"rgba(255,245,238,1)\",","      \"rgba(255,245,238,100%)\",","      \"rgb(100%,96%,93%)\",","      \"rgba(100%,96%,93%,1)\",","      \"rgba(100%,96%,93%,100%)\",","      \"hsl(25,100%,97%)\",","      \"hsla(25,100%,97%,1)\",","      \"hsla(25,100%,97%,100%)\",","      \"hwb(25,93%,0%)\",","      \"hwb(25,93%,0%,1)\",","      \"hwb(25,93%,0%,100%)\",","    ],","  },","  \"sienna\": {","    \"hex\": [","      \"#a0522d\", \"#ffa0522d\",","    ],","    \"func\": [","      \"rgb(160,82,45)\",","      \"rgba(160,82,45,1)\",","      \"rgba(160,82,45,100%)\",","      \"rgb(63%,32%,18%)\",","      \"rgba(63%,32%,18%,1)\",","      \"rgba(63%,32%,18%,100%)\",","      \"hsl(19,56%,40%)\",","      \"hsla(19,56%,40%,1)\",","      \"hsla(19,56%,40%,100%)\",","      \"hwb(19,18%,37%)\",","      \"hwb(19,18%,37%,1)\",","      \"hwb(19,18%,37%,100%)\",","    ],","  },","  \"silver\": {","    \"hex\": [","      \"#c0c0c0\", \"#ffc0c0c0\",","    ],","    \"func\": [","      \"rgb(192,192,192)\",","      \"rgba(192,192,192,1)\",","      \"rgba(192,192,192,100%)\",","      \"rgb(75%,75%,75%)\",","      \"rgba(75%,75%,75%,1)\",","      \"rgba(75%,75%,75%,100%)\",","      \"hsl(0,0%,75%)\",","      \"hsla(0,0%,75%,1)\",","      \"hsla(0,0%,75%,100%)\",","      \"hwb(0,75%,25%)\",","      \"hwb(0,75%,25%,1)\",","      \"hwb(0,75%,25%,100%)\",","    ],","  },","  \"skyblue\": {","    \"hex\": [","      \"#87ceeb\", \"#ff87ceeb\",","    ],","    \"func\": [","      \"rgb(135,206,235)\",","      \"rgba(135,206,235,1)\",","      \"rgba(135,206,235,100%)\",","      \"rgb(53%,81%,92%)\",","      \"rgba(53%,81%,92%,1)\",","      \"rgba(53%,81%,92%,100%)\",","      \"hsl(197,71%,73%)\",","      \"hsla(197,71%,73%,1)\",","      \"hsla(197,71%,73%,100%)\",","      \"hwb(197,53%,8%)\",","      \"hwb(197,53%,8%,1)\",","      \"hwb(197,53%,8%,100%)\",","    ],","  },","  \"slateblue\": {","    \"hex\": [","      \"#6a5acd\", \"#ff6a5acd\",","    ],","    \"func\": [","      \"rgb(106,90,205)\",","      \"rgba(106,90,205,1)\",","      \"rgba(106,90,205,100%)\",","      \"rgb(42%,35%,80%)\",","      \"rgba(42%,35%,80%,1)\",","      \"rgba(42%,35%,80%,100%)\",","      \"hsl(248,53%,58%)\",","      \"hsla(248,53%,58%,1)\",","      \"hsla(248,53%,58%,100%)\",","      \"hwb(248,35%,20%)\",","      \"hwb(248,35%,20%,1)\",","      \"hwb(248,35%,20%,100%)\",","    ],","  },","  \"slategray\": {","    \"hex\": [","      \"#708090\", \"#ff708090\",","    ],","    \"func\": [","      \"rgb(112,128,144)\",","      \"rgba(112,128,144,1)\",","      \"rgba(112,128,144,100%)\",","      \"rgb(44%,50%,56%)\",","      \"rgba(44%,50%,56%,1)\",","      \"rgba(44%,50%,56%,100%)\",","      \"hsl(210,13%,50%)\",","      \"hsla(210,13%,50%,1)\",","      \"hsla(210,13%,50%,100%)\",","      \"hwb(210,44%,44%)\",","      \"hwb(210,44%,44%,1)\",","      \"hwb(210,44%,44%,100%)\",","    ],","  },","  \"slategrey\": {","    \"hex\": [","      \"#708090\", \"#ff708090\",","    ],","    \"func\": [","      \"rgb(112,128,144)\",","      \"rgba(112,128,144,1)\",","      \"rgba(112,128,144,100%)\",","      \"rgb(44%,50%,56%)\",","      \"rgba(44%,50%,56%,1)\",","      \"rgba(44%,50%,56%,100%)\",","      \"hsl(210,13%,50%)\",","      \"hsla(210,13%,50%,1)\",","      \"hsla(210,13%,50%,100%)\",","      \"hwb(210,44%,44%)\",","      \"hwb(210,44%,44%,1)\",","      \"hwb(210,44%,44%,100%)\",","    ],","  },","  \"snow\": {","    \"hex\": [","      \"#fffafa\", \"#fffffafa\",","    ],","    \"func\": [","      \"rgb(255,250,250)\",","      \"rgba(255,250,250,1)\",","      \"rgba(255,250,250,100%)\",","      \"rgb(100%,98%,98%)\",","      \"rgba(100%,98%,98%,1)\",","      \"rgba(100%,98%,98%,100%)\",","      \"hsl(0,100%,99%)\",","      \"hsla(0,100%,99%,1)\",","      \"hsla(0,100%,99%,100%)\",","      \"hwb(0,98%,0%)\",","      \"hwb(0,98%,0%,1)\",","      \"hwb(0,98%,0%,100%)\",","    ],","  },","  \"springgreen\": {","    \"hex\": [","      \"#00ff7f\", \"#ff00ff7f\",","    ],","    \"func\": [","      \"rgb(0,255,127)\",","      \"rgba(0,255,127,1)\",","      \"rgba(0,255,127,100%)\",","      \"rgb(0%,100%,50%)\",","      \"rgba(0%,100%,50%,1)\",","      \"rgba(0%,100%,50%,100%)\",","      \"hsl(150,100%,50%)\",","      \"hsla(150,100%,50%,1)\",","      \"hsla(150,100%,50%,100%)\",","      \"hwb(150,0%,0%)\",","      \"hwb(150,0%,0%,1)\",","      \"hwb(150,0%,0%,100%)\",","    ],","  },","  \"steelblue\": {","    \"hex\": [","      \"#4682b4\", \"#ff4682b4\",","    ],","    \"func\": [","      \"rgb(70,130,180)\",","      \"rgba(70,130,180,1)\",","      \"rgba(70,130,180,100%)\",","      \"rgb(27%,51%,71%)\",","      \"rgba(27%,51%,71%,1)\",","      \"rgba(27%,51%,71%,100%)\",","      \"hsl(207,44%,49%)\",","      \"hsla(207,44%,49%,1)\",","      \"hsla(207,44%,49%,100%)\",","      \"hwb(207,27%,29%)\",","      \"hwb(207,27%,29%,1)\",","      \"hwb(207,27%,29%,100%)\",","    ],","  },","  \"tan\": {","    \"hex\": [","      \"#d2b48c\", \"#ffd2b48c\",","    ],","    \"func\": [","      \"rgb(210,180,140)\",","      \"rgba(210,180,140,1)\",","      \"rgba(210,180,140,100%)\",","      \"rgb(82%,71%,55%)\",","      \"rgba(82%,71%,55%,1)\",","      \"rgba(82%,71%,55%,100%)\",","      \"hsl(34,44%,69%)\",","      \"hsla(34,44%,69%,1)\",","      \"hsla(34,44%,69%,100%)\",","      \"hwb(34,55%,18%)\",","      \"hwb(34,55%,18%,1)\",","      \"hwb(34,55%,18%,100%)\",","    ],","  },","  \"teal\": {","    \"hex\": [","      \"#008080\", \"#ff008080\",","    ],","    \"func\": [","      \"rgb(0,128,128)\",","      \"rgba(0,128,128,1)\",","      \"rgba(0,128,128,100%)\",","      \"rgb(0%,50%,50%)\",","      \"rgba(0%,50%,50%,1)\",","      \"rgba(0%,50%,50%,100%)\",","      \"hsl(180,100%,25%)\",","      \"hsla(180,100%,25%,1)\",","      \"hsla(180,100%,25%,100%)\",","      \"hwb(180,0%,50%)\",","      \"hwb(180,0%,50%,1)\",","      \"hwb(180,0%,50%,100%)\",","    ],","  },","  \"thistle\": {","    \"hex\": [","      \"#d8bfd8\", \"#ffd8bfd8\",","    ],","    \"func\": [","      \"rgb(216,191,216)\",","      \"rgba(216,191,216,1)\",","      \"rgba(216,191,216,100%)\",","      \"rgb(85%,75%,85%)\",","      \"rgba(85%,75%,85%,1)\",","      \"rgba(85%,75%,85%,100%)\",","      \"hsl(300,24%,80%)\",","      \"hsla(300,24%,80%,1)\",","      \"hsla(300,24%,80%,100%)\",","      \"hwb(300,75%,15%)\",","      \"hwb(300,75%,15%,1)\",","      \"hwb(300,75%,15%,100%)\",","    ],","  },","  \"tomato\": {","    \"hex\": [","      \"#ff6347\", \"#ffff6347\",","    ],","    \"func\": [","      \"rgb(255,99,71)\",","      \"rgba(255,99,71,1)\",","      \"rgba(255,99,71,100%)\",","      \"rgb(100%,39%,28%)\",","      \"rgba(100%,39%,28%,1)\",","      \"rgba(100%,39%,28%,100%)\",","      \"hsl(9,100%,64%)\",","      \"hsla(9,100%,64%,1)\",","      \"hsla(9,100%,64%,100%)\",","      \"hwb(9,28%,0%)\",","      \"hwb(9,28%,0%,1)\",","      \"hwb(9,28%,0%,100%)\",","    ],","  },","  \"turquoise\": {","    \"hex\": [","      \"#40e0d0\", \"#ff40e0d0\",","    ],","    \"func\": [","      \"rgb(64,224,208)\",","      \"rgba(64,224,208,1)\",","      \"rgba(64,224,208,100%)\",","      \"rgb(25%,88%,82%)\",","      \"rgba(25%,88%,82%,1)\",","      \"rgba(25%,88%,82%,100%)\",","      \"hsl(174,72%,56%)\",","      \"hsla(174,72%,56%,1)\",","      \"hsla(174,72%,56%,100%)\",","      \"hwb(174,25%,12%)\",","      \"hwb(174,25%,12%,1)\",","      \"hwb(174,25%,12%,100%)\",","    ],","  },","  \"violet\": {","    \"hex\": [","      \"#ee82ee\", \"#ffee82ee\",","    ],","    \"func\": [","      \"rgb(238,130,238)\",","      \"rgba(238,130,238,1)\",","      \"rgba(238,130,238,100%)\",","      \"rgb(93%,51%,93%)\",","      \"rgba(93%,51%,93%,1)\",","      \"rgba(93%,51%,93%,100%)\",","      \"hsl(300,76%,72%)\",","      \"hsla(300,76%,72%,1)\",","      \"hsla(300,76%,72%,100%)\",","      \"hwb(300,51%,7%)\",","      \"hwb(300,51%,7%,1)\",","      \"hwb(300,51%,7%,100%)\",","    ],","  },","  \"wheat\": {","    \"hex\": [","      \"#f5deb3\", \"#fff5deb3\",","    ],","    \"func\": [","      \"rgb(245,222,179)\",","      \"rgba(245,222,179,1)\",","      \"rgba(245,222,179,100%)\",","      \"rgb(96%,87%,70%)\",","      \"rgba(96%,87%,70%,1)\",","      \"rgba(96%,87%,70%,100%)\",","      \"hsl(39,77%,83%)\",","      \"hsla(39,77%,83%,1)\",","      \"hsla(39,77%,83%,100%)\",","      \"hwb(39,70%,4%)\",","      \"hwb(39,70%,4%,1)\",","      \"hwb(39,70%,4%,100%)\",","    ],","  },","  \"white\": {","    \"hex\": [","      \"#ffffff\", \"#ffffffff\", \"#fff\", \"#ffff\",","    ],","    \"func\": [","      \"rgb(255,255,255)\",","      \"rgba(255,255,255,1)\",","      \"rgba(255,255,255,100%)\",","      \"rgb(100%,100%,100%)\",","      \"rgba(100%,100%,100%,1)\",","      \"rgba(100%,100%,100%,100%)\",","      \"hsl(0,0%,100%)\",","      \"hsla(0,0%,100%,1)\",","      \"hsla(0,0%,100%,100%)\",","      \"hwb(0,100%,0%)\",","      \"hwb(0,100%,0%,1)\",","      \"hwb(0,100%,0%,100%)\",","      \"gray(255)\",","      \"gray(255,1)\",","      \"gray(255,100%)\",","      \"gray(255%)\",","      \"gray(255%,1)\",","      \"gray(255%,100%)\",","    ],","  },","  \"whitesmoke\": {","    \"hex\": [","      \"#f5f5f5\", \"#fff5f5f5\",","    ],","    \"func\": [","      \"rgb(245,245,245)\",","      \"rgba(245,245,245,1)\",","      \"rgba(245,245,245,100%)\",","      \"rgb(96%,96%,96%)\",","      \"rgba(96%,96%,96%,1)\",","      \"rgba(96%,96%,96%,100%)\",","      \"hsl(0,0%,96%)\",","      \"hsla(0,0%,96%,1)\",","      \"hsla(0,0%,96%,100%)\",","      \"hwb(0,96%,4%)\",","      \"hwb(0,96%,4%,1)\",","      \"hwb(0,96%,4%,100%)\",","      \"gray(245)\",","      \"gray(245,1)\",","      \"gray(245,100%)\",","      \"gray(245%)\",","      \"gray(245%,1)\",","      \"gray(245%,100%)\",","    ],","  },","  \"yellow\": {","    \"hex\": [","      \"#ffff00\", \"#ffffff00\", \"#ff0\", \"#fff0\",","    ],","    \"func\": [","      \"rgb(255,255,0)\",","      \"rgba(255,255,0,1)\",","      \"rgba(255,255,0,100%)\",","      \"rgb(100%,100%,0%)\",","      \"rgba(100%,100%,0%,1)\",","      \"rgba(100%,100%,0%,100%)\",","      \"hsl(60,100%,50%)\",","      \"hsla(60,100%,50%,1)\",","      \"hsla(60,100%,50%,100%)\",","      \"hwb(60,0%,0%)\",","      \"hwb(60,0%,0%,1)\",","      \"hwb(60,0%,0%,100%)\",","    ],","  },","  \"yellowgreen\": {","    \"hex\": [","      \"#9acd32\", \"#ff9acd32\",","    ],","    \"func\": [","      \"rgb(154,205,50)\",","      \"rgba(154,205,50,1)\",","      \"rgba(154,205,50,100%)\",","      \"rgb(60%,80%,20%)\",","      \"rgba(60%,80%,20%,1)\",","      \"rgba(60%,80%,20%,100%)\",","      \"hsl(80,61%,50%)\",","      \"hsla(80,61%,50%,1)\",","      \"hsla(80,61%,50%,100%)\",","      \"hwb(80,20%,20%)\",","      \"hwb(80,20%,20%,1)\",","      \"hwb(80,20%,20%,100%)\",","    ],","  },","}",""],"l":{"3":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/propertySets.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/propertySets.js","s":{"1":1,"2":1,"3":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":5,"column":0},"end":{"line":16,"column":2}},"3":{"start":{"line":18,"column":0},"end":{"line":18,"column":29}}},"branchMap":{},"code":["\"use strict\"","","const propertySets = {}","","propertySets.acceptCustomIdents = new Set([","  \"animation\",","  \"animation-name\",","  \"font\",","  \"font-family\",","  \"counter-increment\",","  \"grid-row\",","  \"grid-column\",","  \"grid-area\",","  \"list-style\",","  \"list-style-type\",","])","","module.exports = propertySets",""],"l":{"3":1,"5":1,"18":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-no-hex/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-no-hex/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":31}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":11,"column":19},"end":{"line":11,"column":50}},"8":{"start":{"line":14,"column":0},"end":{"line":48,"column":1}},"9":{"start":{"line":15,"column":2},"end":{"line":47,"column":3}},"10":{"start":{"line":16,"column":4},"end":{"line":16,"column":70}},"11":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"12":{"start":{"line":18,"column":6},"end":{"line":18,"column":12}},"13":{"start":{"line":21,"column":4},"end":{"line":46,"column":6}},"14":{"start":{"line":22,"column":6},"end":{"line":22,"column":40}},"15":{"start":{"line":24,"column":6},"end":{"line":45,"column":8}},"16":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"17":{"start":{"line":29,"column":10},"end":{"line":29,"column":16}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":83}},"19":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"20":{"start":{"line":34,"column":10},"end":{"line":34,"column":16}},"21":{"start":{"line":36,"column":8},"end":{"line":36,"column":36}},"22":{"start":{"line":38,"column":8},"end":{"line":44,"column":10}},"23":{"start":{"line":50,"column":0},"end":{"line":50,"column":24}},"24":{"start":{"line":51,"column":0},"end":{"line":51,"column":24}},"25":{"start":{"line":52,"column":0},"end":{"line":52,"column":21}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":8}},{"start":{"line":28,"column":8},"end":{"line":28,"column":8}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const styleSearch = require(\"style-search\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"color-no-hex\"","","const messages = ruleMessages(ruleName, {","  rejected: hex => `Unexpected hex color \"${hex}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const declString = decl.toString()","","      styleSearch({ source: declString, target: \"#\" }, match => {","        // If there's not a colon, comma, or whitespace character before, we'll assume this is","        // not intended to be a hex color, but is instead something like the","        // hash in a url() argument","        if (!/[:,\\s]/.test(declString[match.startIndex - 1])) {","          return","        }","","        const hexMatch = /^#[0-9A-Za-z]+/.exec(declString.substr(match.startIndex))","        if (!hexMatch) {","          return","        }","        const hexValue = hexMatch[0]","","        report({","          message: messages.rejected(hexValue),","          node: decl,","          index: match.startIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"14":1,"15":0,"16":0,"17":0,"18":0,"21":0,"22":0,"24":0,"28":0,"29":0,"32":0,"33":0,"34":0,"36":0,"38":0,"50":1,"51":1,"52":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-no-invalid-hex/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/color-no-invalid-hex/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":52}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":39}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":19},"end":{"line":12,"column":58}},"9":{"start":{"line":15,"column":0},"end":{"line":53,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":52,"column":3}},"11":{"start":{"line":17,"column":4},"end":{"line":17,"column":70}},"12":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"13":{"start":{"line":19,"column":6},"end":{"line":19,"column":12}},"14":{"start":{"line":22,"column":4},"end":{"line":51,"column":6}},"15":{"start":{"line":23,"column":6},"end":{"line":23,"column":40}},"16":{"start":{"line":25,"column":6},"end":{"line":50,"column":8}},"17":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"18":{"start":{"line":30,"column":10},"end":{"line":30,"column":16}},"19":{"start":{"line":33,"column":8},"end":{"line":33,"column":83}},"20":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"21":{"start":{"line":35,"column":10},"end":{"line":35,"column":16}},"22":{"start":{"line":38,"column":8},"end":{"line":38,"column":36}},"23":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"24":{"start":{"line":40,"column":10},"end":{"line":40,"column":16}},"25":{"start":{"line":43,"column":8},"end":{"line":49,"column":10}},"26":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"27":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"28":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":8}},{"start":{"line":29,"column":8},"end":{"line":29,"column":8}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":8}},{"start":{"line":34,"column":8},"end":{"line":34,"column":8}}]},"4":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":8}},{"start":{"line":39,"column":8},"end":{"line":39,"column":8}}]}},"code":["\"use strict\"","","const isValidHex = require(\"../../utils/isValidHex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const styleSearch = require(\"style-search\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"color-no-invalid-hex\"","","const messages = ruleMessages(ruleName, {","  rejected: hex => `Unexpected invalid hex color \"${hex}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const declString = decl.toString()","","      styleSearch({ source: declString, target: \"#\" }, match => {","        // If there's not a colon, comma, or whitespace character before, we'll assume this is","        // not intended to be a hex color, but is instead something like the","        // hash in a url() argument","        if (!/[:,\\s]/.test(declString[match.startIndex - 1])) {","          return","        }","","        const hexMatch = /^#[0-9A-Za-z]+/.exec(declString.substr(match.startIndex))","        if (!hexMatch) {","          return","        }","","        const hexValue = hexMatch[0]","        if (isValidHex(hexValue)) {","          return","        }","","        report({","          message: messages.rejected(hexValue),","          node: decl,","          index: match.startIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"16":0,"17":0,"18":0,"19":0,"22":0,"23":0,"25":0,"29":0,"30":0,"33":0,"34":0,"35":0,"38":0,"39":0,"40":0,"43":0,"55":1,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isValidHex.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isValidHex.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":59}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":10,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":9,"column":3}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Check if a value is a valid 3, 4, 6 or 8 digit hex"," */","module.exports = function (value/*: string*/)/*: boolean*/ {","  return (/^#(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(value)","  )","}",""],"l":{"7":1,"8":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/comment-empty-line-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/comment-empty-line-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":1,"42":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"7":{"start":{"line":11,"column":0},"end":{"line":14,"column":2}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":43}},"9":{"start":{"line":18,"column":0},"end":{"line":131,"column":1}},"10":{"start":{"line":19,"column":2},"end":{"line":130,"column":3}},"11":{"start":{"line":20,"column":4},"end":{"line":38,"column":6}},"12":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"13":{"start":{"line":40,"column":6},"end":{"line":40,"column":12}},"14":{"start":{"line":43,"column":4},"end":{"line":53,"column":5}},"15":{"start":{"line":46,"column":6},"end":{"line":52,"column":8}},"16":{"start":{"line":55,"column":4},"end":{"line":129,"column":6}},"17":{"start":{"line":57,"column":6},"end":{"line":59,"column":7}},"18":{"start":{"line":58,"column":8},"end":{"line":58,"column":14}},"19":{"start":{"line":62,"column":6},"end":{"line":67,"column":7}},"20":{"start":{"line":66,"column":8},"end":{"line":66,"column":14}},"21":{"start":{"line":70,"column":6},"end":{"line":70,"column":33}},"22":{"start":{"line":71,"column":6},"end":{"line":77,"column":7}},"23":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"24":{"start":{"line":79,"column":6},"end":{"line":85,"column":7}},"25":{"start":{"line":84,"column":8},"end":{"line":84,"column":14}},"26":{"start":{"line":87,"column":6},"end":{"line":92,"column":7}},"27":{"start":{"line":91,"column":8},"end":{"line":91,"column":14}},"28":{"start":{"line":94,"column":6},"end":{"line":94,"column":48}},"29":{"start":{"line":97,"column":6},"end":{"line":99,"column":7}},"30":{"start":{"line":98,"column":8},"end":{"line":98,"column":14}},"31":{"start":{"line":101,"column":6},"end":{"line":110,"column":10}},"32":{"start":{"line":102,"column":8},"end":{"line":108,"column":9}},"33":{"start":{"line":107,"column":10},"end":{"line":107,"column":22}},"34":{"start":{"line":109,"column":8},"end":{"line":109,"column":39}},"35":{"start":{"line":112,"column":6},"end":{"line":112,"column":53}},"36":{"start":{"line":115,"column":6},"end":{"line":117,"column":7}},"37":{"start":{"line":116,"column":8},"end":{"line":116,"column":14}},"38":{"start":{"line":119,"column":6},"end":{"line":121,"column":27}},"39":{"start":{"line":123,"column":6},"end":{"line":128,"column":8}},"40":{"start":{"line":133,"column":0},"end":{"line":133,"column":24}},"41":{"start":{"line":134,"column":0},"end":{"line":134,"column":24}},"42":{"start":{"line":135,"column":0},"end":{"line":135,"column":21}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"2":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"4":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"5":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":58}},{"start":{"line":64,"column":11},"end":{"line":64,"column":66}}]},"6":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":6}},{"start":{"line":71,"column":6},"end":{"line":71,"column":6}}]},"7":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":12}},{"start":{"line":73,"column":11},"end":{"line":73,"column":34}},{"start":{"line":74,"column":11},"end":{"line":74,"column":64}}]},"8":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":6},"end":{"line":79,"column":6}},{"start":{"line":79,"column":6},"end":{"line":79,"column":6}}]},"9":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":12}},{"start":{"line":81,"column":11},"end":{"line":81,"column":34}},{"start":{"line":82,"column":11},"end":{"line":82,"column":61}}]},"10":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":6},"end":{"line":87,"column":6}},{"start":{"line":87,"column":6},"end":{"line":87,"column":6}}]},"11":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":27}},{"start":{"line":89,"column":11},"end":{"line":89,"column":25}}]},"12":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":22},"end":{"line":94,"column":41}},{"start":{"line":94,"column":45},"end":{"line":94,"column":47}}]},"13":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":6},"end":{"line":97,"column":6}},{"start":{"line":97,"column":6},"end":{"line":97,"column":6}}]},"14":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":8}},{"start":{"line":102,"column":8},"end":{"line":102,"column":8}}]},"15":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":10},"end":{"line":103,"column":59}},{"start":{"line":104,"column":13},"end":{"line":104,"column":36}},{"start":{"line":105,"column":13},"end":{"line":105,"column":45}}]},"16":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":6}},{"start":{"line":115,"column":6},"end":{"line":115,"column":6}}]},"17":{"line":119,"type":"cond-expr","locations":[{"start":{"line":120,"column":10},"end":{"line":120,"column":27}},{"start":{"line":121,"column":10},"end":{"line":121,"column":27}}]}},"code":["\"use strict\"","","const hasEmptyLine = require(\"../../utils/hasEmptyLine\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"comment-empty-line-before\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected empty line before comment\",","  rejected: \"Unexpected empty line before comment\",","})","","const stylelintCommandPrefix = \"stylelint-\"","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    }, {","      actual: options,","      possible: {","        except: [\"first-nested\"],","        ignore: [","          \"stylelint-commands\",","          \"stylelint-command\",","          \"between-comments\",","          \"after-comment\",","        ],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    if (","      optionsMatches(options, \"ignore\", \"between-comments\")","    ) {","      result.warn((","        \"'comment-empty-line-before\\'s' \\\"between-comments\\\" option has been deprecated and in 8.0 will be removed. \" +","        \"Instead use the \\\"after-comment\\\" option.\"","      ), {","        stylelintType: \"deprecation\",","        stylelintReference: \"https://stylelint.io/user-guide/rules/comment-empty-line-before/\",","      })","    }","","    root.walkComments(comment => {","      // Ignore the first node","      if (comment === root.first) {","        return","      }","","      // Optionally ignore stylelint commands","      if (","        comment.text.indexOf(stylelintCommandPrefix) === 0","        && optionsMatches(options, \"ignore\", \"stylelint-commands\")","      ) {","        return","      }","","      // Optionally ignore newlines between comments","      const prev = comment.prev()","      if (","        prev","        && prev.type === \"comment\"","        && optionsMatches(options, \"ignore\", \"between-comments\")","      ) {","        return","      }","","      if (","        prev","        && prev.type === \"comment\"","        && optionsMatches(options, \"ignore\", \"after-comment\")","      ) {","        return","      }","","      if (","        comment.raws.inline","        || comment.inline","      ) {","        return","      }","","      const before = (comment.raws.before || \"\")","","      // Ignore shared-line comments","      if (before.indexOf(\"\\n\") === -1) {","        return","      }","","      const expectEmptyLineBefore = (() => {","        if (","          optionsMatches(options, \"except\", \"first-nested\")","          && comment.parent !== root","          && comment === comment.parent.first","        ) {","          return false","        }","        return expectation === \"always\"","      })()","","      const hasEmptyLineBefore = hasEmptyLine(before)","","      // Return if the expectation is met","      if (expectEmptyLineBefore === hasEmptyLineBefore) {","        return","      }","","      const message = expectEmptyLineBefore","        ? messages.expected","        : messages.rejected","","      report({","        message,","        node: comment,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"16":1,"18":1,"19":0,"20":0,"39":0,"40":0,"43":0,"46":0,"55":0,"57":0,"58":0,"62":0,"66":0,"70":0,"71":0,"76":0,"79":0,"84":0,"87":0,"91":0,"94":0,"97":0,"98":0,"101":0,"102":0,"107":0,"109":0,"112":0,"115":0,"116":0,"119":0,"123":0,"133":1,"134":1,"135":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/comment-no-empty/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/comment-no-empty/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":35}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":13,"column":0},"end":{"line":45,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":44,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":70}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"10":{"start":{"line":17,"column":6},"end":{"line":17,"column":12}},"11":{"start":{"line":20,"column":4},"end":{"line":43,"column":6}},"12":{"start":{"line":22,"column":6},"end":{"line":27,"column":7}},"13":{"start":{"line":26,"column":8},"end":{"line":26,"column":14}},"14":{"start":{"line":30,"column":6},"end":{"line":35,"column":7}},"15":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"16":{"start":{"line":37,"column":6},"end":{"line":42,"column":8}},"17":{"start":{"line":47,"column":0},"end":{"line":47,"column":24}},"18":{"start":{"line":48,"column":0},"end":{"line":48,"column":24}},"19":{"start":{"line":49,"column":0},"end":{"line":49,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":6}},{"start":{"line":22,"column":6},"end":{"line":22,"column":6}}]},"3":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":27}},{"start":{"line":24,"column":11},"end":{"line":24,"column":25}}]},"4":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"5":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":8},"end":{"line":31,"column":20}},{"start":{"line":32,"column":11},"end":{"line":32,"column":36}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"comment-no-empty\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected empty comment\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkComments(comment => {","      // To ignore inline SCSS comments","      if (","        comment.raws.inline","        || comment.inline","      ) {","        return","      }","","      // To ignore comments that are not empty","      if (","        comment.text","        && comment.text.length !== 0","      ) {","        return","      }","","      report({","        message: messages.rejected,","        node: comment,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"13":1,"14":0,"15":0,"16":0,"17":0,"20":0,"22":0,"26":0,"30":0,"34":0,"37":0,"47":1,"48":1,"49":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/comment-whitespace-inside/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/comment-whitespace-inside/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":1,"36":1,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":9},"end":{"line":18,"column":33}}},"3":{"name":"(anonymous_3)","line":30,"loc":{"start":{"line":30,"column":22},"end":{"line":30,"column":41}}},"4":{"name":"complain","line":81,"loc":{"start":{"line":81,"column":6},"end":{"line":81,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":17,"column":0},"end":{"line":92,"column":1}},"8":{"start":{"line":18,"column":2},"end":{"line":91,"column":3}},"9":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"10":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"11":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"12":{"start":{"line":30,"column":4},"end":{"line":90,"column":6}},"13":{"start":{"line":31,"column":6},"end":{"line":36,"column":7}},"14":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"15":{"start":{"line":38,"column":6},"end":{"line":38,"column":43}},"16":{"start":{"line":39,"column":6},"end":{"line":39,"column":52}},"17":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"18":{"start":{"line":43,"column":8},"end":{"line":43,"column":14}},"19":{"start":{"line":46,"column":6},"end":{"line":46,"column":59}},"20":{"start":{"line":47,"column":6},"end":{"line":47,"column":60}},"21":{"start":{"line":48,"column":6},"end":{"line":48,"column":35}},"22":{"start":{"line":49,"column":6},"end":{"line":49,"column":44}},"23":{"start":{"line":50,"column":6},"end":{"line":50,"column":46}},"24":{"start":{"line":51,"column":6},"end":{"line":51,"column":36}},"25":{"start":{"line":53,"column":6},"end":{"line":58,"column":7}},"26":{"start":{"line":57,"column":8},"end":{"line":57,"column":57}},"27":{"start":{"line":60,"column":6},"end":{"line":65,"column":7}},"28":{"start":{"line":64,"column":8},"end":{"line":64,"column":57}},"29":{"start":{"line":67,"column":6},"end":{"line":72,"column":7}},"30":{"start":{"line":71,"column":8},"end":{"line":71,"column":89}},"31":{"start":{"line":74,"column":6},"end":{"line":79,"column":7}},"32":{"start":{"line":78,"column":8},"end":{"line":78,"column":89}},"33":{"start":{"line":81,"column":6},"end":{"line":89,"column":7}},"34":{"start":{"line":82,"column":8},"end":{"line":88,"column":10}},"35":{"start":{"line":94,"column":0},"end":{"line":94,"column":24}},"36":{"start":{"line":95,"column":0},"end":{"line":95,"column":24}},"37":{"start":{"line":96,"column":0},"end":{"line":96,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":27}},{"start":{"line":33,"column":11},"end":{"line":33,"column":25}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"5":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":24},"end":{"line":49,"column":38}},{"start":{"line":49,"column":42},"end":{"line":49,"column":44}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":25},"end":{"line":50,"column":40}},{"start":{"line":50,"column":44},"end":{"line":50,"column":46}}]},"7":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"8":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":31}},{"start":{"line":55,"column":11},"end":{"line":55,"column":27}}]},"9":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"10":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":32}},{"start":{"line":62,"column":11},"end":{"line":62,"column":35}}]},"11":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":6},"end":{"line":67,"column":6}},{"start":{"line":67,"column":6},"end":{"line":67,"column":6}}]},"12":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":31}},{"start":{"line":69,"column":11},"end":{"line":69,"column":28}}]},"13":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":6},"end":{"line":74,"column":6}},{"start":{"line":74,"column":6},"end":{"line":74,"column":6}}]},"14":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":8},"end":{"line":75,"column":32}},{"start":{"line":76,"column":11},"end":{"line":76,"column":36}}]}},"code":["\"use strict\"","","const isWhitespace = require(\"../../utils/isWhitespace\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"comment-whitespace-inside\"","","const messages = ruleMessages(ruleName, {","  expectedOpening: \"Expected whitespace after \\\"/*\\\"\",","  rejectedOpening: \"Unexpected whitespace after \\\"/*\\\"\",","  expectedClosing: \"Expected whitespace before \\\"*/\\\"\",","  rejectedClosing: \"Unexpected whitespace before \\\"*/\\\"\",","})","","const rule = function (expectation) {","  return function (root, result) {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkComments(function (comment) {","      if (","        comment.raws.inline","        || comment.inline","      ) {","        return","      }","","      const rawComment = comment.toString()","      const firstFourChars = rawComment.substr(0, 4)","","      // Return early if sourcemap or copyright comment","      if (/^\\/\\*[#!]\\s/.test(firstFourChars)) {","        return","      }","","      const leftMatches = rawComment.match(/(^\\/\\*+)(\\s)?/)","      const rightMatches = rawComment.match(/(\\s)?(\\*+\\/)$/)","      const opener = leftMatches[1]","      const leftSpace = leftMatches[2] || \"\"","      const rightSpace = rightMatches[1] || \"\"","      const closer = rightMatches[2]","","      if (","        expectation === \"never\"","        && leftSpace !== \"\"","      ) {","        complain(messages.rejectedOpening, opener.length)","      }","","      if (","        expectation === \"always\"","        && !isWhitespace(leftSpace)","      ) {","        complain(messages.expectedOpening, opener.length)","      }","","      if (","        expectation === \"never\"","        && rightSpace !== \"\"","      ) {","        complain(messages.rejectedClosing, comment.toString().length - closer.length - 1)","      }","","      if (","        expectation === \"always\"","        && !isWhitespace(rightSpace)","      ) {","        complain(messages.expectedClosing, comment.toString().length - closer.length - 1)","      }","","      function complain(message, index) {","        report({","          message,","          index,","          result,","          ruleName,","          node: comment,","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"17":1,"18":0,"19":0,"26":0,"27":0,"30":0,"31":0,"35":0,"38":0,"39":0,"42":0,"43":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"53":0,"57":0,"60":0,"64":0,"67":0,"71":0,"74":0,"78":0,"81":1,"82":0,"94":1,"95":1,"96":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/comment-word-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/comment-word-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":41}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":23},"end":{"line":13,"column":70}},"10":{"start":{"line":16,"column":0},"end":{"line":50,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":49,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":21,"column":6}},"13":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"14":{"start":{"line":23,"column":6},"end":{"line":23,"column":12}},"15":{"start":{"line":26,"column":4},"end":{"line":48,"column":6}},"16":{"start":{"line":27,"column":6},"end":{"line":27,"column":31}},"17":{"start":{"line":28,"column":6},"end":{"line":28,"column":43}},"18":{"start":{"line":29,"column":6},"end":{"line":29,"column":52}},"19":{"start":{"line":32,"column":6},"end":{"line":34,"column":7}},"20":{"start":{"line":33,"column":8},"end":{"line":33,"column":14}},"21":{"start":{"line":36,"column":6},"end":{"line":36,"column":99}},"22":{"start":{"line":38,"column":6},"end":{"line":40,"column":7}},"23":{"start":{"line":39,"column":8},"end":{"line":39,"column":14}},"24":{"start":{"line":42,"column":6},"end":{"line":47,"column":8}},"25":{"start":{"line":52,"column":0},"end":{"line":52,"column":30}},"26":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}},"27":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"28":{"start":{"line":56,"column":0},"end":{"line":56,"column":21}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"3":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":26},"end":{"line":36,"column":64}},{"start":{"line":36,"column":68},"end":{"line":36,"column":99}}]},"4":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const containsString = require(\"../../utils/containsString\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"comment-word-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: pattern => `Unexpected word matching pattern \"${pattern}\"`,","})","","const rule = function (blacklist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkComments(comment => {","      const text = comment.text","      const rawComment = comment.toString()","      const firstFourChars = rawComment.substr(0, 4)","","      // Return early if sourcemap","      if (firstFourChars === \"/*# \") {","        return","      }","","      const matchesWord = matchesStringOrRegExp(text, blacklist) || containsString(text, blacklist)","","      if (!matchesWord) {","        return","      }","","      report({","        message: messages.rejected(matchesWord.pattern),","        node: comment,","        result,","        ruleName,","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"22":0,"23":0,"26":0,"27":0,"28":0,"29":0,"32":0,"33":0,"36":0,"38":0,"39":0,"42":0,"52":1,"54":1,"55":1,"56":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/containsString.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/containsString.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"containsString","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":14,"column":50}}},"2":{"name":"testAgainstString","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":46}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":26,"column":1}},"2":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"3":{"start":{"line":16,"column":4},"end":{"line":16,"column":47}},"4":{"start":{"line":19,"column":2},"end":{"line":24,"column":3}},"5":{"start":{"line":20,"column":4},"end":{"line":20,"column":63}},"6":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"7":{"start":{"line":22,"column":6},"end":{"line":22,"column":23}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":14}},"9":{"start":{"line":28,"column":0},"end":{"line":39,"column":1}},"10":{"start":{"line":29,"column":2},"end":{"line":29,"column":31}},"11":{"start":{"line":29,"column":19},"end":{"line":29,"column":31}},"12":{"start":{"line":30,"column":2},"end":{"line":32,"column":3}},"13":{"start":{"line":31,"column":4},"end":{"line":31,"column":16}},"14":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"15":{"start":{"line":35,"column":4},"end":{"line":35,"column":48}},"16":{"start":{"line":38,"column":2},"end":{"line":38,"column":14}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"4":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"5":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":27}},{"start":{"line":30,"column":31},"end":{"line":30,"column":72}}]},"6":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Checks if a string contains a value. The comparison value can be a string or"," * an array of strings."," *"," * Any strings starting and ending with `/` are ignored. Use the"," * matchesStringOrRegExp() util to match regexes."," */","module.exports = function containsString(","  input/*: string*/,","  comparison/*: string | Array<string>*/",")/*: false | { match: string, pattern: string }*/ {","  if (!Array.isArray(comparison)) {","    return testAgainstString(input, comparison)","  }","","  for (const comparisonItem of comparison) {","    const testResult = testAgainstString(input, comparisonItem)","    if (testResult) {","      return testResult","    }","  }","  return false","}","","function testAgainstString(value, comparison) {","  if (!comparison) return false","  if (comparison[0] === \"/\" && comparison[comparison.length - 1] === \"/\") {","    return false","  }","","  if (value.indexOf(comparison) >= 0) {","    return { match: value, pattern: comparison }","  }","","  return false","}",""],"l":{"11":1,"15":0,"16":0,"19":0,"20":0,"21":0,"22":0,"25":0,"28":1,"29":0,"30":0,"31":0,"34":0,"35":0,"38":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/custom-media-pattern/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/custom-media-pattern/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":64}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":39}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":15,"column":0},"end":{"line":50,"column":1}},"9":{"start":{"line":16,"column":2},"end":{"line":49,"column":3}},"10":{"start":{"line":17,"column":4},"end":{"line":23,"column":6}},"11":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"12":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"13":{"start":{"line":28,"column":4},"end":{"line":28,"column":77}},"14":{"start":{"line":30,"column":4},"end":{"line":48,"column":6}},"15":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"16":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"17":{"start":{"line":35,"column":6},"end":{"line":35,"column":66}},"18":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"19":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"20":{"start":{"line":41,"column":6},"end":{"line":47,"column":8}},"21":{"start":{"line":52,"column":0},"end":{"line":52,"column":24}},"22":{"start":{"line":53,"column":0},"end":{"line":53,"column":24}},"23":{"start":{"line":54,"column":0},"end":{"line":54,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":48},"end":{"line":28,"column":67}},{"start":{"line":28,"column":70},"end":{"line":28,"column":77}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"custom-media-pattern\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected custom media query name to match specified pattern\",","})","","const rule = function (pattern) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: pattern,","      possible: [","        _.isRegExp,","        _.isString,","      ],","    })","    if (!validOptions) {","      return","    }","","    const regexpPattern = _.isString(pattern) ? new RegExp(pattern) : pattern","","    root.walkAtRules(atRule => {","      if (atRule.name.toLowerCase() !== \"custom-media\") {","        return","      }","","      const customMediaName = atRule.params.match(/^--(\\S+)\\b/)[1]","","      if (regexpPattern.test(customMediaName)) {","        return","      }","","      report({","        message: messages.expected,","        node: atRule,","        index: atRuleParamIndex(atRule),","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"15":1,"16":0,"17":0,"24":0,"25":0,"28":0,"30":0,"31":0,"32":0,"35":0,"37":0,"38":0,"41":0,"52":1,"53":1,"54":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/atRuleParamIndex.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/atRuleParamIndex.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":3,"loc":{"start":{"line":3,"column":17},"end":{"line":3,"column":67}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":10,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":36}},"3":{"start":{"line":6,"column":2},"end":{"line":8,"column":3}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":41}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":14}}},"branchMap":{"1":{"line":6,"type":"if","locations":[{"start":{"line":6,"column":2},"end":{"line":6,"column":2}},{"start":{"line":6,"column":2},"end":{"line":6,"column":2}}]}},"code":["/* @flow */","\"use strict\"","module.exports = function (atRule/*: postcss$atRule*/)/*: number*/ {","  // Initial 1 is for the `@`","  let index = 1 + atRule.name.length","  if (atRule.raws.afterName) {","    index += atRule.raws.afterName.length","  }","  return index","}",""],"l":{"3":1,"5":0,"6":0,"7":0,"9":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/custom-property-empty-line-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/custom-property-empty-line-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":1,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0,0,0],"15":[0,0],"16":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":64}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":68}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":86}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":60}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":56}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":52}},"11":{"start":{"line":15,"column":0},"end":{"line":18,"column":2}},"12":{"start":{"line":20,"column":0},"end":{"line":120,"column":1}},"13":{"start":{"line":21,"column":2},"end":{"line":119,"column":3}},"14":{"start":{"line":22,"column":4},"end":{"line":42,"column":6}},"15":{"start":{"line":43,"column":4},"end":{"line":45,"column":5}},"16":{"start":{"line":44,"column":6},"end":{"line":44,"column":12}},"17":{"start":{"line":47,"column":4},"end":{"line":118,"column":6}},"18":{"start":{"line":48,"column":6},"end":{"line":49,"column":28}},"19":{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},"20":{"start":{"line":52,"column":8},"end":{"line":52,"column":14}},"21":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"22":{"start":{"line":55,"column":8},"end":{"line":55,"column":14}},"23":{"start":{"line":59,"column":6},"end":{"line":65,"column":7}},"24":{"start":{"line":64,"column":8},"end":{"line":64,"column":14}},"25":{"start":{"line":68,"column":6},"end":{"line":73,"column":7}},"26":{"start":{"line":72,"column":8},"end":{"line":72,"column":14}},"27":{"start":{"line":75,"column":6},"end":{"line":75,"column":73}},"28":{"start":{"line":78,"column":6},"end":{"line":83,"column":7}},"29":{"start":{"line":82,"column":8},"end":{"line":82,"column":54}},"30":{"start":{"line":86,"column":6},"end":{"line":92,"column":7}},"31":{"start":{"line":91,"column":8},"end":{"line":91,"column":54}},"32":{"start":{"line":95,"column":6},"end":{"line":102,"column":7}},"33":{"start":{"line":101,"column":8},"end":{"line":101,"column":54}},"34":{"start":{"line":104,"column":6},"end":{"line":104,"column":63}},"35":{"start":{"line":107,"column":6},"end":{"line":109,"column":7}},"36":{"start":{"line":108,"column":8},"end":{"line":108,"column":14}},"37":{"start":{"line":111,"column":6},"end":{"line":111,"column":83}},"38":{"start":{"line":112,"column":6},"end":{"line":117,"column":8}},"39":{"start":{"line":122,"column":0},"end":{"line":122,"column":24}},"40":{"start":{"line":123,"column":0},"end":{"line":123,"column":24}},"41":{"start":{"line":124,"column":0},"end":{"line":124,"column":21}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"5":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":58}},{"start":{"line":61,"column":11},"end":{"line":61,"column":22}},{"start":{"line":62,"column":11},"end":{"line":62,"column":41}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]},"7":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":69}},{"start":{"line":70,"column":11},"end":{"line":70,"column":50}}]},"8":{"line":75,"type":"cond-expr","locations":[{"start":{"line":75,"column":61},"end":{"line":75,"column":65}},{"start":{"line":75,"column":68},"end":{"line":75,"column":73}}]},"9":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":78,"column":6}},{"start":{"line":78,"column":6},"end":{"line":78,"column":6}}]},"10":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":57}},{"start":{"line":80,"column":11},"end":{"line":80,"column":32}}]},"11":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":6},"end":{"line":86,"column":6}},{"start":{"line":86,"column":6},"end":{"line":86,"column":6}}]},"12":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":58}},{"start":{"line":88,"column":11},"end":{"line":88,"column":22}},{"start":{"line":89,"column":11},"end":{"line":89,"column":41}}]},"13":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":6},"end":{"line":95,"column":6}},{"start":{"line":95,"column":6},"end":{"line":95,"column":6}}]},"14":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":66}},{"start":{"line":97,"column":11},"end":{"line":97,"column":22}},{"start":{"line":98,"column":11},"end":{"line":98,"column":27}},{"start":{"line":99,"column":11},"end":{"line":99,"column":45}}]},"15":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":6},"end":{"line":107,"column":6}},{"start":{"line":107,"column":6},"end":{"line":107,"column":6}}]},"16":{"line":111,"type":"cond-expr","locations":[{"start":{"line":111,"column":46},"end":{"line":111,"column":63}},{"start":{"line":111,"column":66},"end":{"line":111,"column":83}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const hasEmptyLine = require(\"../../utils/hasEmptyLine\")","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const isStandardSyntaxDeclaration = require(\"../../utils/isStandardSyntaxDeclaration\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"custom-property-empty-line-before\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected empty line before custom property\",","  rejected: \"Unexpected empty line before custom property\",","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    }, {","      actual: options,","      possible: {","        except: [","          \"first-nested\",","          \"after-comment\",","          \"after-custom-property\",","        ],","        ignore: [","          \"after-comment\",","          \"inside-single-line-block\",","        ],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop,","        parent = decl.parent","","      if (!isStandardSyntaxDeclaration(decl)) {","        return","      }","      if (!isCustomProperty(prop)) {","        return","      }","","      // Optionally ignore the node if a comment precedes it","      if (","        optionsMatches(options, \"ignore\", \"after-comment\")","        && decl.prev()","        && decl.prev().type === \"comment\"","      ) {","        return","      }","","      // Optionally ignore nodes inside single-line blocks","      if (","        optionsMatches(options, \"ignore\", \"inside-single-line-block\")","        && isSingleLineString(blockString(parent))","      ) {","        return","      }","","      let expectEmptyLineBefore = expectation === \"always\" ? true : false","","      // Optionally reverse the expectation for the first nested node","      if (","        optionsMatches(options, \"except\", \"first-nested\")","        && decl === parent.first","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Optionally reverse the expectation if a comment precedes this node","      if (","        optionsMatches(options, \"except\", \"after-comment\")","        && decl.prev()","        && decl.prev().type === \"comment\"","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Optionally reverse the expectation if a custom property precedes this node","      if (","        optionsMatches(options, \"except\", \"after-custom-property\")","        && decl.prev()","        && decl.prev().prop","        && isCustomProperty(decl.prev().prop)","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      const hasEmptyLineBefore = hasEmptyLine(decl.raws.before)","","      // Return if the expectation is met","      if (expectEmptyLineBefore === hasEmptyLineBefore) {","        return","      }","","      const message = expectEmptyLineBefore ? messages.expected : messages.rejected","      report({","        message,","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"20":1,"21":0,"22":0,"43":0,"44":0,"47":0,"48":0,"51":0,"52":0,"54":0,"55":0,"59":0,"64":0,"68":0,"72":0,"75":0,"78":0,"82":0,"86":0,"91":0,"95":0,"101":0,"104":0,"107":0,"108":0,"111":0,"112":0,"122":1,"123":1,"124":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCustomProperty.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCustomProperty.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":62}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":9,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":38}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a property is a custom one"," */","module.exports = function (property/*: string*/)/*: boolean*/ {","  return property.slice(0, 2) === \"--\"","}",""],"l":{"7":1,"8":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxDeclaration.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxDeclaration.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":58}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":33,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":9,"column":24}},"3":{"start":{"line":13,"column":2},"end":{"line":15,"column":3}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":16}},"5":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":16}},"7":{"start":{"line":23,"column":2},"end":{"line":25,"column":3}},"8":{"start":{"line":24,"column":4},"end":{"line":24,"column":16}},"9":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"10":{"start":{"line":29,"column":4},"end":{"line":29,"column":16}},"11":{"start":{"line":32,"column":2},"end":{"line":32,"column":13}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":2},"end":{"line":13,"column":2}},{"start":{"line":13,"column":2},"end":{"line":13,"column":2}}]},"2":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]},"3":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":2},"end":{"line":23,"column":2}},{"start":{"line":23,"column":2},"end":{"line":23,"column":2}}]},"4":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":6},"end":{"line":23,"column":21}},{"start":{"line":23,"column":25},"end":{"line":23,"column":40}}]},"5":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"6":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":21}},{"start":{"line":28,"column":25},"end":{"line":28,"column":76}},{"start":{"line":28,"column":80},"end":{"line":28,"column":120}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a declaration is standard"," */","module.exports = function (decl/*: Object*/)/*: boolean*/ {","  const prop = decl.prop,","    parent = decl.parent","","  // Declarations belong in a declaration block","","  if (parent.type === \"root\") {","    return false","  }","","  // SCSS var (e.g. $var: x), nested list (e.g. $list: (x)) or nested map (e.g. $map: (key:value))","  if (prop[0] === \"$\") {","    return false","  }","","  // Less var (e.g. @var: x), but exclude variable interpolation (e.g. @{var})","  if (prop[0] === \"@\" && prop[1] !== \"{\") {","    return false","  }","","  // SCSS nested properties (e.g. border: { style: solid; color: red; })","  if (parent.selector && parent.selector[parent.selector.length - 1] === \":\" && parent.selector.substring(0, 2) !== \"--\") {","    return false","  }","","  return true","}",""],"l":{"7":1,"8":0,"13":0,"14":0,"18":0,"19":0,"23":0,"24":0,"28":0,"29":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/custom-property-no-outside-root/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/custom-property-no-outside-root/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":14,"column":0},"end":{"line":47,"column":1}},"8":{"start":{"line":15,"column":2},"end":{"line":46,"column":3}},"9":{"start":{"line":16,"column":4},"end":{"line":16,"column":70}},"10":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"11":{"start":{"line":18,"column":6},"end":{"line":18,"column":12}},"12":{"start":{"line":21,"column":4},"end":{"line":26,"column":6}},"13":{"start":{"line":28,"column":4},"end":{"line":45,"column":6}},"14":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":14}},"16":{"start":{"line":34,"column":6},"end":{"line":44,"column":8}},"17":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"18":{"start":{"line":36,"column":10},"end":{"line":36,"column":16}},"19":{"start":{"line":38,"column":8},"end":{"line":43,"column":10}},"20":{"start":{"line":49,"column":0},"end":{"line":49,"column":24}},"21":{"start":{"line":50,"column":0},"end":{"line":50,"column":24}},"22":{"start":{"line":51,"column":0},"end":{"line":51,"column":21}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]}},"code":["\"use strict\"","","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"custom-property-no-outside-root\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected custom property\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed. Instead use the community 'stylelint-suitcss' plugin pack.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    root.walkRules(rule => {","      // Ignore rules whose selector is just `:root`","      if (rule.selector.toLowerCase().trim() === \":root\") {","        return","      }","","      rule.walkDecls(decl => {","        if (!isCustomProperty(decl.prop)) {","          return","        }","        report({","          message: messages.rejected,","          node: decl,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"14":1,"15":0,"16":0,"17":0,"18":0,"21":0,"28":0,"30":0,"31":0,"34":0,"35":0,"36":0,"38":0,"49":1,"50":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/custom-property-pattern/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/custom-property-pattern/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":64}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":42}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":15,"column":0},"end":{"line":48,"column":1}},"9":{"start":{"line":16,"column":2},"end":{"line":47,"column":3}},"10":{"start":{"line":17,"column":4},"end":{"line":23,"column":6}},"11":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"12":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"13":{"start":{"line":28,"column":4},"end":{"line":28,"column":77}},"14":{"start":{"line":30,"column":4},"end":{"line":46,"column":6}},"15":{"start":{"line":31,"column":6},"end":{"line":31,"column":28}},"16":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"17":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"18":{"start":{"line":36,"column":6},"end":{"line":38,"column":7}},"19":{"start":{"line":37,"column":8},"end":{"line":37,"column":14}},"20":{"start":{"line":40,"column":6},"end":{"line":45,"column":8}},"21":{"start":{"line":50,"column":0},"end":{"line":50,"column":24}},"22":{"start":{"line":51,"column":0},"end":{"line":51,"column":24}},"23":{"start":{"line":52,"column":0},"end":{"line":52,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":48},"end":{"line":28,"column":67}},{"start":{"line":28,"column":70},"end":{"line":28,"column":77}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"4":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":6}},{"start":{"line":36,"column":6},"end":{"line":36,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"custom-property-pattern\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected custom property name to match specified pattern\",","})","","const rule = function (pattern) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: pattern,","      possible: [","        _.isRegExp,","        _.isString,","      ],","    })","    if (!validOptions) {","      return","    }","","    const regexpPattern = _.isString(pattern) ? new RegExp(pattern) : pattern","","    root.walkDecls(decl => {","      const prop = decl.prop","","      if (!isCustomProperty(prop)) {","        return","      }","      if (regexpPattern.test(prop.slice(2))) {","        return","      }","","      report({","        message: messages.expected,","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"15":1,"16":0,"17":0,"24":0,"25":0,"28":0,"30":0,"31":0,"33":0,"34":0,"36":0,"37":0,"40":0,"50":1,"51":1,"52":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-bang-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-bang-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":77}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":66}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":47}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":58}},"8":{"start":{"line":12,"column":23},"end":{"line":12,"column":58}},"9":{"start":{"line":15,"column":0},"end":{"line":36,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const declarationBangSpaceChecker = require(\"../declarationBangSpaceChecker\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"declaration-bang-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\"!\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\"!\\\"\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    declarationBangSpaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declarationBangSpaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declarationBangSpaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":33}}},"2":{"name":"(anonymous_2)","line":8,"loc":{"start":{"line":8,"column":22},"end":{"line":8,"column":38}}},"3":{"name":"check","line":21,"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":71}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":41}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"4":{"start":{"line":7,"column":0},"end":{"line":31,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":19,"column":4}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":51}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":38}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":58}},"9":{"start":{"line":12,"column":4},"end":{"line":14,"column":5}},"10":{"start":{"line":13,"column":6},"end":{"line":13,"column":12}},"11":{"start":{"line":16,"column":4},"end":{"line":18,"column":6}},"12":{"start":{"line":17,"column":6},"end":{"line":17,"column":61}},"13":{"start":{"line":21,"column":2},"end":{"line":30,"column":3}},"14":{"start":{"line":22,"column":4},"end":{"line":29,"column":6}},"15":{"start":{"line":22,"column":52},"end":{"line":28,"column":6}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":12,"column":4}},{"start":{"line":12,"column":4},"end":{"line":12,"column":4}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../utils/declarationValueIndex\")","const report = require(\"../utils/report\")","const styleSearch = require(\"style-search\")","","module.exports = function (opts) {","  opts.root.walkDecls(function (decl) {","    const indexOffset = declarationValueIndex(decl)","    const declString = decl.toString()","    const valueString = decl.toString().slice(indexOffset)","    if (valueString.indexOf(\"!\") == -1) {","      return","    }","","    styleSearch({ source: valueString, target: \"!\" }, match => {","      check(declString, match.startIndex + indexOffset, decl)","    })","  })","","  function check(source, index, node) {","    opts.locationChecker({ source, index, err: m => report({","      message: m,","      node,","      index,","      result: opts.result,","      ruleName: opts.checkedRuleName,","    }),","    })","  }","}",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"16":0,"17":0,"21":1,"22":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-bang-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-bang-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":77}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":66}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":60}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":60}},"9":{"start":{"line":15,"column":0},"end":{"line":36,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const declarationBangSpaceChecker = require(\"../declarationBangSpaceChecker\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"declaration-bang-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\"!\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\"!\\\"\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    declarationBangSpaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-no-duplicate-properties/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":1,"54":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"checkRulesInNode","line":48,"loc":{"start":{"line":48,"column":4},"end":{"line":48,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":64}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":60}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":24},"end":{"line":14,"column":60}},"11":{"start":{"line":17,"column":0},"end":{"line":131,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":130,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":29,"column":6}},"14":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"15":{"start":{"line":31,"column":6},"end":{"line":31,"column":12}},"16":{"start":{"line":39,"column":4},"end":{"line":46,"column":6}},"17":{"start":{"line":40,"column":6},"end":{"line":45,"column":7}},"18":{"start":{"line":44,"column":8},"end":{"line":44,"column":30}},"19":{"start":{"line":48,"column":4},"end":{"line":129,"column":5}},"20":{"start":{"line":49,"column":6},"end":{"line":49,"column":22}},"21":{"start":{"line":50,"column":6},"end":{"line":50,"column":23}},"22":{"start":{"line":52,"column":6},"end":{"line":128,"column":8}},"23":{"start":{"line":53,"column":8},"end":{"line":58,"column":9}},"24":{"start":{"line":57,"column":10},"end":{"line":57,"column":33}},"25":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"26":{"start":{"line":61,"column":10},"end":{"line":61,"column":16}},"27":{"start":{"line":64,"column":8},"end":{"line":64,"column":31}},"28":{"start":{"line":65,"column":8},"end":{"line":65,"column":33}},"29":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"30":{"start":{"line":68,"column":10},"end":{"line":68,"column":16}},"31":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"32":{"start":{"line":71,"column":10},"end":{"line":71,"column":16}},"33":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"34":{"start":{"line":76,"column":10},"end":{"line":76,"column":16}},"35":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"36":{"start":{"line":81,"column":10},"end":{"line":81,"column":16}},"37":{"start":{"line":84,"column":8},"end":{"line":84,"column":64}},"38":{"start":{"line":86,"column":8},"end":{"line":124,"column":9}},"39":{"start":{"line":87,"column":10},"end":{"line":109,"column":11}},"40":{"start":{"line":89,"column":12},"end":{"line":97,"column":13}},"41":{"start":{"line":90,"column":14},"end":{"line":95,"column":16}},"42":{"start":{"line":96,"column":14},"end":{"line":96,"column":20}},"43":{"start":{"line":99,"column":12},"end":{"line":107,"column":13}},"44":{"start":{"line":100,"column":14},"end":{"line":105,"column":16}},"45":{"start":{"line":106,"column":14},"end":{"line":106,"column":20}},"46":{"start":{"line":108,"column":12},"end":{"line":108,"column":18}},"47":{"start":{"line":111,"column":10},"end":{"line":116,"column":11}},"48":{"start":{"line":115,"column":12},"end":{"line":115,"column":18}},"49":{"start":{"line":118,"column":10},"end":{"line":123,"column":12}},"50":{"start":{"line":126,"column":8},"end":{"line":126,"column":38}},"51":{"start":{"line":127,"column":8},"end":{"line":127,"column":40}},"52":{"start":{"line":133,"column":0},"end":{"line":133,"column":24}},"53":{"start":{"line":134,"column":0},"end":{"line":134,"column":24}},"54":{"start":{"line":135,"column":0},"end":{"line":135,"column":21}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"3":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":28}},{"start":{"line":42,"column":11},"end":{"line":42,"column":33}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"5":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":10},"end":{"line":54,"column":21}},{"start":{"line":55,"column":13},"end":{"line":55,"column":31}}]},"6":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"7":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"8":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"9":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":75,"column":8}},{"start":{"line":75,"column":8},"end":{"line":75,"column":8}}]},"10":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":8}},{"start":{"line":80,"column":8},"end":{"line":80,"column":8}}]},"11":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"12":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":10},"end":{"line":87,"column":10}},{"start":{"line":87,"column":10},"end":{"line":87,"column":10}}]},"13":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":89,"column":12}},{"start":{"line":89,"column":12},"end":{"line":89,"column":12}}]},"14":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":12}},{"start":{"line":99,"column":12},"end":{"line":99,"column":12}}]},"15":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":10},"end":{"line":111,"column":10}},{"start":{"line":111,"column":10},"end":{"line":111,"column":10}}]},"16":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":12},"end":{"line":112,"column":71}},{"start":{"line":113,"column":15},"end":{"line":113,"column":50}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"declaration-block-no-duplicate-properties\"","","const messages = ruleMessages(ruleName, {","  rejected: property => `Unexpected duplicate \"${property}\"`,","})","","const rule = function (on, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual: on }, {","      actual: options,","      possible: {","        ignore: [","          \"consecutive-duplicates\",","          \"consecutive-duplicates-with-different-values\",","        ],","        ignoreProperties: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    // In order to accommodate nested blocks (postcss-nested),","    // we need to run a shallow loop (instead of eachDecl() or eachRule(),","    // which loop recursively) and allow each nested block to accumulate","    // its own list of properties -- so that a property in a nested rule","    // does not conflict with the same property in the parent rule","    root.each(node => {","      if (","        node.type === \"rule\"","        || node.type === \"atrule\"","      ) {","        checkRulesInNode(node)","      }","    })","","    function checkRulesInNode(node) {","      const decls = []","      const values = []","","      node.each(child => {","        if (","          child.nodes","          && child.nodes.length","        ) {","          checkRulesInNode(child)","        }","","        if (child.type !== \"decl\") {","          return","        }","","        const prop = child.prop","        const value = child.value","","        if (!isStandardSyntaxProperty(prop)) {","          return","        }","        if (isCustomProperty(prop)) {","          return","        }","","        // Return early if the property is to be ignored","        if (optionsMatches(options, \"ignoreProperties\", prop)) {","          return","        }","","        // Ignore the src property as commonly duplicated in at-fontface","        if (prop.toLowerCase() === \"src\") {","          return","        }","","        const indexDuplicate = decls.indexOf(prop.toLowerCase())","","        if (indexDuplicate !== -1) {","          if (optionsMatches(options, \"ignore\", \"consecutive-duplicates-with-different-values\")) {","            // if duplicates are not consecutive","            if (indexDuplicate !== decls.length - 1) {","              report({","                message: messages.rejected(prop),","                node: child,","                result,","                ruleName,","              })","              return","            }","            // if values of consecutive duplicates are equal","            if (value === values[indexDuplicate]) {","              report({","                message: messages.rejected(value),","                node: child,","                result,","                ruleName,","              })","              return","            }","            return","          }","","          if (","            optionsMatches(options, \"ignore\", \"consecutive-duplicates\")","            && indexDuplicate === decls.length - 1","          ) {","            return","          }","","          report({","            message: messages.rejected(prop),","            node: child,","            result,","            ruleName,","          })","        }","","        decls.push(prop.toLowerCase())","        values.push(value.toLowerCase())","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"30":0,"31":0,"39":0,"40":0,"44":0,"48":1,"49":0,"50":0,"52":0,"53":0,"57":0,"60":0,"61":0,"64":0,"65":0,"67":0,"68":0,"70":0,"71":0,"75":0,"76":0,"80":0,"81":0,"84":0,"86":0,"87":0,"89":0,"90":0,"96":0,"99":0,"100":0,"106":0,"108":0,"111":0,"115":0,"118":0,"126":0,"127":0,"133":1,"134":1,"135":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxProperty.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxProperty.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":62}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":61}},"2":{"start":{"line":8,"column":0},"end":{"line":25,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":12,"column":3}},"4":{"start":{"line":11,"column":4},"end":{"line":11,"column":16}},"5":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":16}},"7":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"8":{"start":{"line":21,"column":4},"end":{"line":21,"column":16}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":13}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":2},"end":{"line":10,"column":2}},{"start":{"line":10,"column":2},"end":{"line":10,"column":2}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const hasInterpolation = require(\"../utils/hasInterpolation\")","/**"," * Check whether a property is standard"," */","module.exports = function (property/*: string*/)/*: boolean*/ {","  // SCSS var (e.g. $var: x), list (e.g. $list: (x)) or map (e.g. $map: (key:value))","  if (property[0] === \"$\") {","    return false","  }","","  // Less var (e.g. @var: x)","  if (property[0] === \"@\") {","    return false","  }","","  // SCSS or Less interpolation","  if (hasInterpolation(property)) {","    return false","  }","","  return true","}",""],"l":{"4":1,"8":1,"10":0,"11":0,"15":0,"16":0,"20":0,"21":0,"24":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-no-ignored-properties/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-no-ignored-properties/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":1,"35":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":128,"loc":{"start":{"line":128,"column":13},"end":{"line":128,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":58}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":32},"end":{"line":12,"column":73}},"9":{"start":{"line":15,"column":0},"end":{"line":126,"column":1}},"10":{"start":{"line":128,"column":0},"end":{"line":178,"column":1}},"11":{"start":{"line":129,"column":2},"end":{"line":177,"column":3}},"12":{"start":{"line":130,"column":4},"end":{"line":130,"column":70}},"13":{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},"14":{"start":{"line":133,"column":6},"end":{"line":133,"column":12}},"15":{"start":{"line":136,"column":4},"end":{"line":141,"column":6}},"16":{"start":{"line":143,"column":4},"end":{"line":143,"column":26}},"17":{"start":{"line":144,"column":4},"end":{"line":146,"column":6}},"18":{"start":{"line":145,"column":6},"end":{"line":145,"column":35}},"19":{"start":{"line":148,"column":4},"end":{"line":176,"column":6}},"20":{"start":{"line":149,"column":6},"end":{"line":149,"column":36}},"21":{"start":{"line":150,"column":6},"end":{"line":150,"column":60}},"22":{"start":{"line":151,"column":6},"end":{"line":151,"column":67}},"23":{"start":{"line":153,"column":6},"end":{"line":175,"column":8}},"24":{"start":{"line":154,"column":8},"end":{"line":154,"column":98}},"25":{"start":{"line":155,"column":8},"end":{"line":155,"column":93}},"26":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"27":{"start":{"line":158,"column":10},"end":{"line":158,"column":16}},"28":{"start":{"line":161,"column":8},"end":{"line":161,"column":58}},"29":{"start":{"line":163,"column":8},"end":{"line":174,"column":10}},"30":{"start":{"line":164,"column":10},"end":{"line":166,"column":11}},"31":{"start":{"line":165,"column":12},"end":{"line":165,"column":18}},"32":{"start":{"line":168,"column":10},"end":{"line":173,"column":12}},"33":{"start":{"line":180,"column":0},"end":{"line":180,"column":24}},"34":{"start":{"line":181,"column":0},"end":{"line":181,"column":24}},"35":{"start":{"line":182,"column":0},"end":{"line":182,"column":21}}},"branchMap":{"1":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":132,"column":4}},{"start":{"line":132,"column":4},"end":{"line":132,"column":4}}]},"2":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":157,"column":8}},{"start":{"line":157,"column":8},"end":{"line":157,"column":8}}]},"3":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":12},"end":{"line":157,"column":26}},{"start":{"line":157,"column":30},"end":{"line":157,"column":41}}]},"4":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":10},"end":{"line":164,"column":10}},{"start":{"line":164,"column":10},"end":{"line":164,"column":10}}]},"5":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":14},"end":{"line":164,"column":24}},{"start":{"line":164,"column":28},"end":{"line":164,"column":85}},{"start":{"line":164,"column":89},"end":{"line":164,"column":108}}]}},"code":["\"use strict\"","","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const postcss = require(\"postcss\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"declaration-block-no-ignored-properties\"","","const messages = ruleMessages(ruleName, {","  rejected: (ignored, cause) => `Unexpected \"${ignored}\" with \"${cause}\"`,","})","","const ignored = [","  {","    property: \"display\",","    value: \"inline\",","    ignoredProperties: [","      \"width\",","      \"min-width\",","      \"max-width\",","      \"height\",","      \"min-height\",","      \"max-height\",","      \"margin\",","      \"margin-top\",","      \"margin-bottom\",","      \"overflow\",","      \"overflow-x\",","      \"overflow-y\",","    ],","  },","  {","    property: \"display\",","    value: \"list-item\",","    ignoredProperties: [\"vertical-align\"],","  },","  {","    property: \"display\",","    value: \"block\",","    ignoredProperties: [\"vertical-align\"],","  },","  {","    property: \"display\",","    value: \"flex\",","    ignoredProperties: [\"vertical-align\"],","  },","  {","    property: \"display\",","    value: \"table\",","    ignoredProperties: [\"vertical-align\"],","  },","  {","    property: \"display\",","    value: \"/^table-.*$/\",","    ignoredProperties: [","      \"margin\",","      \"margin-top\",","      \"margin-right\",","      \"margin-bottom\",","      \"margin-left\",","    ],","  },","  {","    property: \"display\",","    value: \"/^table-(row|row-group|column|column-group|header-group|footer-group|caption).*$/\",","    ignoredProperties: [\"vertical-align\"],","  },","  {","    property: \"display\",","    value: \"/^table-(row|row-group).*$/\",","    ignoredProperties: [","      \"width\",","      \"min-width\",","      \"max-width\",","    ],","  },","  {","    property: \"display\",","    value: \"/^table-(column|column-group).*$/\",","    ignoredProperties: [","      \"height\",","      \"min-height\",","      \"max-height\",","    ],","  },","  {","    property: \"float\",","    value: \"left\",","    ignoredProperties: [\"vertical-align\"],","  },","  {","    property: \"float\",","    value: \"right\",","    ignoredProperties: [\"vertical-align\"],","  },","  {","    property: \"position\",","    value: \"static\",","    ignoredProperties: [","      \"top\",","      \"right\",","      \"bottom\",","      \"left\",","    ],","  },","  {","    property: \"position\",","    value: \"absolute\",","    ignoredProperties: [","      \"float\",","      \"clear\",","      \"vertical-align\",","    ],","  },","  {","    property: \"position\",","    value: \"fixed\",","    ignoredProperties: [","      \"float\",","      \"clear\",","      \"vertical-align\",","    ],","  },","]","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","","    if (!validOptions) {","      return","    }","","    result.warn((","      \"'declaration-block-no-ignored-properties' has been deprecated and in 8.0 will be removed.\"","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: \"https://stylelint.io/user-guide/rules/declaration-block-no-ignored-properties/\",","    })","","    const uniqueDecls = {}","    root.walkDecls(decl => {","      uniqueDecls[decl.prop] = decl","    })","","    Object.keys(uniqueDecls).forEach((prop, index) => {","      const decl = uniqueDecls[prop]","      const unprefixedProp = postcss.vendor.unprefixed(prop)","      const unprefixedValue = postcss.vendor.unprefixed(decl.value)","","      ignored.forEach(ignore => {","        const matchProperty = matchesStringOrRegExp(unprefixedProp.toLowerCase(), ignore.property)","        const matchValue = matchesStringOrRegExp(unprefixedValue.toLowerCase(), ignore.value)","","        if (!matchProperty || !matchValue) {","          return","        }","","        const ignoredProperties = ignore.ignoredProperties","","        decl.parent.nodes.forEach((node, nodeIndex) => {","          if (!node.prop || ignoredProperties.indexOf(node.prop.toLowerCase()) === -1 || index === nodeIndex) {","            return","          }","","          report({","            message: messages.rejected(node.prop, decl.toString()),","            node,","            result,","            ruleName,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"128":1,"129":0,"130":0,"132":0,"133":0,"136":0,"143":0,"144":0,"145":0,"148":0,"149":0,"150":0,"151":0,"153":0,"154":0,"155":0,"157":0,"158":0,"161":0,"163":0,"164":0,"165":0,"168":0,"180":1,"181":1,"182":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-no-redundant-longhand-properties/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":1,"38":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":40}}},"2":{"name":"check","line":42,"loc":{"start":{"line":42,"column":4},"end":{"line":42,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":69}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":21},"end":{"line":13,"column":61}},"10":{"start":{"line":16,"column":0},"end":{"line":76,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":75,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":37,"column":6}},"16":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"17":{"start":{"line":31,"column":8},"end":{"line":31,"column":14}},"18":{"start":{"line":34,"column":6},"end":{"line":36,"column":8}},"19":{"start":{"line":35,"column":8},"end":{"line":35,"column":57}},"20":{"start":{"line":39,"column":4},"end":{"line":39,"column":25}},"21":{"start":{"line":40,"column":4},"end":{"line":40,"column":27}},"22":{"start":{"line":42,"column":4},"end":{"line":74,"column":5}},"23":{"start":{"line":43,"column":6},"end":{"line":43,"column":37}},"24":{"start":{"line":46,"column":6},"end":{"line":73,"column":8}},"25":{"start":{"line":47,"column":8},"end":{"line":49,"column":9}},"26":{"start":{"line":48,"column":10},"end":{"line":48,"column":16}},"27":{"start":{"line":51,"column":8},"end":{"line":51,"column":44}},"28":{"start":{"line":53,"column":8},"end":{"line":53,"column":60}},"29":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"30":{"start":{"line":56,"column":10},"end":{"line":56,"column":16}},"31":{"start":{"line":59,"column":8},"end":{"line":72,"column":10}},"32":{"start":{"line":60,"column":10},"end":{"line":60,"column":112}},"33":{"start":{"line":62,"column":10},"end":{"line":64,"column":11}},"34":{"start":{"line":63,"column":12},"end":{"line":63,"column":18}},"35":{"start":{"line":66,"column":10},"end":{"line":71,"column":12}},"36":{"start":{"line":78,"column":0},"end":{"line":78,"column":24}},"37":{"start":{"line":79,"column":0},"end":{"line":79,"column":24}},"38":{"start":{"line":80,"column":0},"end":{"line":80,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"3":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":9},"end":{"line":35,"column":22}},{"start":{"line":35,"column":27},"end":{"line":35,"column":45}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":8}},{"start":{"line":47,"column":8},"end":{"line":47,"column":8}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"6":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":11},"end":{"line":60,"column":50}},{"start":{"line":60,"column":55},"end":{"line":60,"column":99}}]},"7":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":10},"end":{"line":62,"column":10}},{"start":{"line":62,"column":10},"end":{"line":62,"column":10}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const shorthandData = require(\"../../reference/shorthandData\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"declaration-block-no-redundant-longhand-properties\"","","const messages = ruleMessages(ruleName, {","  expected: props => `Expected shorthand property \"${props}\"`,","})","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignoreShorthands: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    const longhandProperties = _.transform(shorthandData, (result, values, key) => {","      if (optionsMatches(options, \"ignoreShorthands\", key)) {","        return","      }","","      values.forEach(value => {","        (result[value] || (result[value] = [])).push(key)","      })","    })","","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      const longhandDeclarations = {}","      // Shallow iteration so nesting doesn't produce","      // false positives","      statement.each(node => {","        if (node.type !== \"decl\") {","          return","        }","","        const prop = node.prop.toLowerCase()","","        const shorthandProperties = longhandProperties[prop]","","        if (!shorthandProperties) {","          return","        }","","        shorthandProperties.forEach(shorthandProperty => {","          (longhandDeclarations[shorthandProperty] || (longhandDeclarations[shorthandProperty] = [])).push(prop)","","          if (!_.isEqual(shorthandData[shorthandProperty].sort(), longhandDeclarations[shorthandProperty].sort())) {","            return","          }","","          report({","            ruleName,","            result,","            node,","            message: messages.expected(shorthandProperty),","          })","        })","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"25":0,"26":0,"29":0,"30":0,"31":0,"34":0,"35":0,"39":0,"40":0,"42":1,"43":0,"46":0,"47":0,"48":0,"51":0,"53":0,"55":0,"56":0,"59":0,"60":0,"62":0,"63":0,"66":0,"78":1,"79":1,"80":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/shorthandData.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/shorthandData.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":120,"column":1}}},"branchMap":{},"code":["\"use strict\"","","module.exports = {","  \"margin\": [","    \"margin-top\",","    \"margin-bottom\",","    \"margin-left\",","    \"margin-right\",","  ],","  \"padding\": [","    \"padding-top\",","    \"padding-bottom\",","    \"padding-left\",","    \"padding-right\",","  ],","  \"background\": [","    \"background-image\",","    \"background-size\",","    \"background-position\",","    \"background-repeat\",","    \"background-origin\",","    \"background-clip\",","    \"background-attachment\",","    \"background-color\",","  ],","  \"font\": [","    \"font-style\",","    \"font-variant\",","    \"font-weight\",","    \"font-stretch\",","    \"font-size\",","    \"font-family\",","    \"line-height\",","  ],","  \"border\": [","    \"border-top-width\",","    \"border-bottom-width\",","    \"border-left-width\",","    \"border-right-width\",","    \"border-top-style\",","    \"border-bottom-style\",","    \"border-left-style\",","    \"border-right-style\",","    \"border-top-color\",","    \"border-bottom-color\",","    \"border-left-color\",","    \"border-right-color\",","  ],","  \"border-top\": [","    \"border-top-width\",","    \"border-top-style\",","    \"border-top-color\",","  ],","  \"border-bottom\": [","    \"border-bottom-width\",","    \"border-bottom-style\",","    \"border-bottom-color\",","  ],","  \"border-left\": [","    \"border-left-width\",","    \"border-left-style\",","    \"border-left-color\",","  ],","  \"border-right\": [","    \"border-right-width\",","    \"border-right-style\",","    \"border-right-color\",","  ],","  \"border-width\": [","    \"border-top-width\",","    \"border-bottom-width\",","    \"border-left-width\",","    \"border-right-width\",","  ],","  \"border-style\": [","    \"border-top-style\",","    \"border-bottom-style\",","    \"border-left-style\",","    \"border-right-style\",","  ],","  \"border-color\": [","    \"border-top-color\",","    \"border-bottom-color\",","    \"border-left-color\",","    \"border-right-color\",","  ],","  \"list-style\": [","    \"list-style-type\",","    \"list-style-position\",","    \"list-style-image\",","  ],","  \"border-radius\": [","    \"border-top-right-radius\",","    \"border-top-left-radius\",","    \"border-bottom-right-radius\",","    \"border-bottom-left-radius\",","  ],","  \"transition\": [","    \"transition-delay\",","    \"transition-duration\",","    \"transition-property\",","    \"transition-timing-function\",","  ],","  \"-webkit-transition\": [","    \"-webkit-transition-delay\",","    \"-webkit-transition-duration\",","    \"-webkit-transition-property\",","    \"-webkit-transition-timing-function\",","  ],","  \"-moz-transition\": [","    \"-moz-transition-delay\",","    \"-moz-transition-duration\",","    \"-moz-transition-property\",","    \"-moz-transition-timing-function\",","  ],","  \"-o-transition\": [ \"-o-transition-delay\",","    \"-o-transition-duration\",","    \"-o-transition-property\",","    \"-o-transition-timing-function\" ],","}",""],"l":{"3":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-no-shorthand-property-overrides/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":1,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":31}}},"2":{"name":"check","line":24,"loc":{"start":{"line":24,"column":4},"end":{"line":24,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":68}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":11,"column":37},"end":{"line":11,"column":94}},"8":{"start":{"line":14,"column":0},"end":{"line":53,"column":1}},"9":{"start":{"line":15,"column":2},"end":{"line":52,"column":3}},"10":{"start":{"line":16,"column":4},"end":{"line":16,"column":70}},"11":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"12":{"start":{"line":18,"column":6},"end":{"line":18,"column":12}},"13":{"start":{"line":21,"column":4},"end":{"line":21,"column":25}},"14":{"start":{"line":22,"column":4},"end":{"line":22,"column":27}},"15":{"start":{"line":24,"column":4},"end":{"line":51,"column":5}},"16":{"start":{"line":25,"column":6},"end":{"line":25,"column":29}},"17":{"start":{"line":28,"column":6},"end":{"line":50,"column":8}},"18":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"19":{"start":{"line":30,"column":10},"end":{"line":30,"column":16}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":30}},"21":{"start":{"line":34,"column":8},"end":{"line":34,"column":63}},"22":{"start":{"line":35,"column":8},"end":{"line":38,"column":9}},"23":{"start":{"line":36,"column":10},"end":{"line":36,"column":49}},"24":{"start":{"line":37,"column":10},"end":{"line":37,"column":16}},"25":{"start":{"line":39,"column":8},"end":{"line":49,"column":10}},"26":{"start":{"line":40,"column":10},"end":{"line":42,"column":11}},"27":{"start":{"line":41,"column":12},"end":{"line":41,"column":18}},"28":{"start":{"line":43,"column":10},"end":{"line":48,"column":12}},"29":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"30":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"31":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":8}},{"start":{"line":29,"column":8},"end":{"line":29,"column":8}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":10},"end":{"line":40,"column":10}},{"start":{"line":40,"column":10},"end":{"line":40,"column":10}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const shorthandData = require(\"../../reference/shorthandData\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"declaration-block-no-shorthand-property-overrides\"","","const messages = ruleMessages(ruleName, {","  rejected: (shorthand, original) => `Unexpected shorthand \"${shorthand}\" after \"${original}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkRules(check)","    root.walkAtRules(check)","","    function check(statement) {","      const declarations = {}","      // Shallow iteration so nesting doesn't produce","      // false positives","      statement.each(node => {","        if (node.type !== \"decl\") {","          return","        }","        const prop = node.prop","","        const overrideables = shorthandData[prop.toLowerCase()]","        if (!overrideables) {","          declarations[prop.toLowerCase()] = prop","          return","        }","        overrideables.forEach(longhandProp => {","          if (!declarations.hasOwnProperty(longhandProp)) {","            return","          }","          report({","            ruleName,","            result,","            node,","            message: messages.rejected(prop, declarations[longhandProp]),","          })","        })","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"14":1,"15":0,"16":0,"17":0,"18":0,"21":0,"22":0,"24":1,"25":0,"28":0,"29":0,"30":0,"32":0,"34":0,"35":0,"36":0,"37":0,"39":0,"40":0,"41":0,"43":0,"55":1,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-properties-order/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-properties-order/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":1,"83":1,"84":1,"85":1,"86":1,"87":0,"88":0,"89":0,"90":1,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":1,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":1,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0,0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":45}}},"2":{"name":"checkNode","line":58,"loc":{"start":{"line":58,"column":4},"end":{"line":58,"column":29}}},"3":{"name":"checkOrder","line":119,"loc":{"start":{"line":119,"column":6},"end":{"line":119,"column":57}}},"4":{"name":"complain","line":187,"loc":{"start":{"line":187,"column":4},"end":{"line":187,"column":28}}},"5":{"name":"createExpectedOrder","line":204,"loc":{"start":{"line":204,"column":0},"end":{"line":204,"column":36}}},"6":{"name":"appendGroup","line":210,"loc":{"start":{"line":210,"column":2},"end":{"line":210,"column":30}}},"7":{"name":"appendItem","line":214,"loc":{"start":{"line":214,"column":2},"end":{"line":214,"column":45}}},"8":{"name":"getOrderData","line":240,"loc":{"start":{"line":240,"column":0},"end":{"line":240,"column":47}}},"9":{"name":"checkAlpabeticalOrder","line":252,"loc":{"start":{"line":252,"column":0},"end":{"line":252,"column":62}}},"10":{"name":"validatePrimaryOption","line":261,"loc":{"start":{"line":261,"column":0},"end":{"line":261,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":34}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":53}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":31},"end":{"line":14,"column":79}},"11":{"start":{"line":17,"column":0},"end":{"line":196,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":195,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":33,"column":6}},"14":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"15":{"start":{"line":35,"column":6},"end":{"line":35,"column":12}},"16":{"start":{"line":38,"column":4},"end":{"line":44,"column":6}},"17":{"start":{"line":46,"column":4},"end":{"line":46,"column":55}},"18":{"start":{"line":47,"column":4},"end":{"line":47,"column":80}},"19":{"start":{"line":49,"column":4},"end":{"line":49,"column":65}},"20":{"start":{"line":52,"column":4},"end":{"line":56,"column":6}},"21":{"start":{"line":53,"column":6},"end":{"line":55,"column":7}},"22":{"start":{"line":54,"column":8},"end":{"line":54,"column":23}},"23":{"start":{"line":58,"column":4},"end":{"line":185,"column":5}},"24":{"start":{"line":59,"column":6},"end":{"line":59,"column":28}},"25":{"start":{"line":61,"column":6},"end":{"line":117,"column":8}},"26":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"27":{"start":{"line":66,"column":10},"end":{"line":66,"column":26}},"28":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"29":{"start":{"line":70,"column":10},"end":{"line":70,"column":16}},"30":{"start":{"line":73,"column":8},"end":{"line":73,"column":31}},"31":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"32":{"start":{"line":76,"column":10},"end":{"line":76,"column":16}},"33":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"34":{"start":{"line":79,"column":10},"end":{"line":79,"column":16}},"35":{"start":{"line":82,"column":8},"end":{"line":82,"column":64}},"36":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"37":{"start":{"line":87,"column":10},"end":{"line":87,"column":58}},"38":{"start":{"line":90,"column":8},"end":{"line":97,"column":9}},"39":{"start":{"line":99,"column":8},"end":{"line":99,"column":52}},"40":{"start":{"line":100,"column":8},"end":{"line":100,"column":34}},"41":{"start":{"line":103,"column":8},"end":{"line":105,"column":9}},"42":{"start":{"line":104,"column":10},"end":{"line":104,"column":16}},"43":{"start":{"line":107,"column":8},"end":{"line":107,"column":136}},"44":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"45":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"46":{"start":{"line":113,"column":8},"end":{"line":116,"column":10}},"47":{"start":{"line":119,"column":6},"end":{"line":184,"column":7}},"48":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"49":{"start":{"line":122,"column":10},"end":{"line":122,"column":58}},"50":{"start":{"line":125,"column":8},"end":{"line":125,"column":63}},"51":{"start":{"line":126,"column":8},"end":{"line":126,"column":65}},"52":{"start":{"line":129,"column":8},"end":{"line":131,"column":9}},"53":{"start":{"line":130,"column":10},"end":{"line":130,"column":102}},"54":{"start":{"line":133,"column":8},"end":{"line":144,"column":9}},"55":{"start":{"line":136,"column":10},"end":{"line":136,"column":97}},"56":{"start":{"line":136,"column":83},"end":{"line":136,"column":96}},"57":{"start":{"line":137,"column":10},"end":{"line":143,"column":11}},"58":{"start":{"line":138,"column":12},"end":{"line":141,"column":14}},"59":{"start":{"line":142,"column":12},"end":{"line":142,"column":23}},"60":{"start":{"line":148,"column":8},"end":{"line":150,"column":9}},"61":{"start":{"line":149,"column":10},"end":{"line":149,"column":21}},"62":{"start":{"line":152,"column":8},"end":{"line":158,"column":9}},"63":{"start":{"line":153,"column":10},"end":{"line":157,"column":11}},"64":{"start":{"line":154,"column":12},"end":{"line":154,"column":23}},"65":{"start":{"line":156,"column":12},"end":{"line":156,"column":24}},"66":{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},"67":{"start":{"line":160,"column":10},"end":{"line":160,"column":22}},"68":{"start":{"line":163,"column":8},"end":{"line":165,"column":9}},"69":{"start":{"line":164,"column":10},"end":{"line":164,"column":21}},"70":{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},"71":{"start":{"line":168,"column":10},"end":{"line":168,"column":21}},"72":{"start":{"line":171,"column":8},"end":{"line":173,"column":9}},"73":{"start":{"line":172,"column":10},"end":{"line":172,"column":21}},"74":{"start":{"line":174,"column":8},"end":{"line":176,"column":9}},"75":{"start":{"line":175,"column":10},"end":{"line":175,"column":22}},"76":{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},"77":{"start":{"line":179,"column":10},"end":{"line":179,"column":21}},"78":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"79":{"start":{"line":182,"column":10},"end":{"line":182,"column":22}},"80":{"start":{"line":187,"column":4},"end":{"line":194,"column":5}},"81":{"start":{"line":188,"column":6},"end":{"line":193,"column":8}},"82":{"start":{"line":198,"column":0},"end":{"line":198,"column":30}},"83":{"start":{"line":200,"column":0},"end":{"line":200,"column":24}},"84":{"start":{"line":201,"column":0},"end":{"line":201,"column":24}},"85":{"start":{"line":202,"column":0},"end":{"line":202,"column":21}},"86":{"start":{"line":204,"column":0},"end":{"line":238,"column":1}},"87":{"start":{"line":205,"column":2},"end":{"line":205,"column":18}},"88":{"start":{"line":206,"column":2},"end":{"line":206,"column":26}},"89":{"start":{"line":208,"column":2},"end":{"line":208,"column":20}},"90":{"start":{"line":210,"column":2},"end":{"line":212,"column":3}},"91":{"start":{"line":211,"column":4},"end":{"line":211,"column":50}},"92":{"start":{"line":211,"column":26},"end":{"line":211,"column":49}},"93":{"start":{"line":214,"column":2},"end":{"line":235,"column":3}},"94":{"start":{"line":215,"column":4},"end":{"line":224,"column":5}},"95":{"start":{"line":219,"column":6},"end":{"line":221,"column":7}},"96":{"start":{"line":220,"column":8},"end":{"line":220,"column":29}},"97":{"start":{"line":222,"column":6},"end":{"line":222,"column":40}},"98":{"start":{"line":223,"column":6},"end":{"line":223,"column":12}},"99":{"start":{"line":226,"column":4},"end":{"line":234,"column":5}},"100":{"start":{"line":227,"column":6},"end":{"line":227,"column":34}},"101":{"start":{"line":228,"column":6},"end":{"line":228,"column":12}},"102":{"start":{"line":229,"column":11},"end":{"line":234,"column":5}},"103":{"start":{"line":230,"column":6},"end":{"line":230,"column":27}},"104":{"start":{"line":231,"column":6},"end":{"line":233,"column":8}},"105":{"start":{"line":232,"column":8},"end":{"line":232,"column":34}},"106":{"start":{"line":237,"column":2},"end":{"line":237,"column":14}},"107":{"start":{"line":240,"column":0},"end":{"line":250,"column":1}},"108":{"start":{"line":241,"column":2},"end":{"line":241,"column":41}},"109":{"start":{"line":245,"column":2},"end":{"line":248,"column":3}},"110":{"start":{"line":246,"column":4},"end":{"line":246,"column":74}},"111":{"start":{"line":247,"column":4},"end":{"line":247,"column":62}},"112":{"start":{"line":249,"column":2},"end":{"line":249,"column":18}},"113":{"start":{"line":252,"column":0},"end":{"line":259,"column":1}},"114":{"start":{"line":254,"column":2},"end":{"line":256,"column":3}},"115":{"start":{"line":255,"column":4},"end":{"line":255,"column":52}},"116":{"start":{"line":258,"column":2},"end":{"line":258,"column":69}},"117":{"start":{"line":261,"column":0},"end":{"line":299,"column":1}},"118":{"start":{"line":263,"column":2},"end":{"line":265,"column":3}},"119":{"start":{"line":264,"column":4},"end":{"line":264,"column":15}},"120":{"start":{"line":268,"column":2},"end":{"line":270,"column":3}},"121":{"start":{"line":269,"column":4},"end":{"line":269,"column":16}},"122":{"start":{"line":274,"column":2},"end":{"line":281,"column":3}},"123":{"start":{"line":275,"column":4},"end":{"line":277,"column":5}},"124":{"start":{"line":276,"column":6},"end":{"line":276,"column":17}},"125":{"start":{"line":278,"column":4},"end":{"line":278,"column":67}},"126":{"start":{"line":280,"column":4},"end":{"line":280,"column":16}},"127":{"start":{"line":283,"column":2},"end":{"line":283,"column":59}},"128":{"start":{"line":286,"column":2},"end":{"line":296,"column":3}},"129":{"start":{"line":287,"column":4},"end":{"line":289,"column":5}},"130":{"start":{"line":288,"column":6},"end":{"line":288,"column":17}},"131":{"start":{"line":290,"column":4},"end":{"line":293,"column":18}},"132":{"start":{"line":295,"column":4},"end":{"line":295,"column":16}},"133":{"start":{"line":298,"column":2},"end":{"line":298,"column":13}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"2":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":41},"end":{"line":47,"column":45}},{"start":{"line":47,"column":48},"end":{"line":47,"column":80}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"4":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":10},"end":{"line":53,"column":30}},{"start":{"line":53,"column":34},"end":{"line":53,"column":56}}]},"5":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":8}},{"start":{"line":65,"column":8},"end":{"line":65,"column":8}}]},"6":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":23}},{"start":{"line":65,"column":27},"end":{"line":65,"column":45}}]},"7":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":8}},{"start":{"line":69,"column":8},"end":{"line":69,"column":8}}]},"8":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":75,"column":8}},{"start":{"line":75,"column":8},"end":{"line":75,"column":8}}]},"9":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"10":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"11":{"line":93,"type":"cond-expr","locations":[{"start":{"line":93,"column":36},"end":{"line":93,"column":40}},{"start":{"line":93,"column":43},"end":{"line":93,"column":90}}]},"12":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":8},"end":{"line":103,"column":8}},{"start":{"line":103,"column":8},"end":{"line":103,"column":8}}]},"13":{"line":107,"type":"cond-expr","locations":[{"start":{"line":107,"column":46},"end":{"line":107,"column":95}},{"start":{"line":107,"column":98},"end":{"line":107,"column":136}}]},"14":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":8}},{"start":{"line":109,"column":8},"end":{"line":109,"column":8}}]},"15":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]},"16":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":8},"end":{"line":129,"column":8}},{"start":{"line":129,"column":8},"end":{"line":129,"column":8}}]},"17":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":12},"end":{"line":129,"column":35}},{"start":{"line":129,"column":39},"end":{"line":129,"column":63}}]},"18":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":8}},{"start":{"line":133,"column":8},"end":{"line":133,"column":8}}]},"19":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":12},"end":{"line":133,"column":34}},{"start":{"line":133,"column":38},"end":{"line":133,"column":62}}]},"20":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":10},"end":{"line":137,"column":10}},{"start":{"line":137,"column":10},"end":{"line":137,"column":10}}]},"21":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":14},"end":{"line":137,"column":36}},{"start":{"line":137,"column":40},"end":{"line":137,"column":72}},{"start":{"line":137,"column":76},"end":{"line":137,"column":169}}]},"22":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"23":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":12},"end":{"line":148,"column":48}},{"start":{"line":148,"column":52},"end":{"line":148,"column":75}},{"start":{"line":148,"column":79},"end":{"line":148,"column":102}}]},"24":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":8},"end":{"line":152,"column":8}},{"start":{"line":152,"column":8},"end":{"line":152,"column":8}}]},"25":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":12},"end":{"line":152,"column":48}},{"start":{"line":152,"column":52},"end":{"line":152,"column":75}},{"start":{"line":152,"column":79},"end":{"line":152,"column":101}}]},"26":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":10},"end":{"line":153,"column":10}},{"start":{"line":153,"column":10},"end":{"line":153,"column":10}}]},"27":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":159,"column":8}},{"start":{"line":159,"column":8},"end":{"line":159,"column":8}}]},"28":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":12},"end":{"line":159,"column":48}},{"start":{"line":159,"column":52},"end":{"line":159,"column":74}}]},"29":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":8},"end":{"line":163,"column":8}},{"start":{"line":163,"column":8},"end":{"line":163,"column":8}}]},"30":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":34}},{"start":{"line":163,"column":38},"end":{"line":163,"column":61}}]},"31":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":8},"end":{"line":167,"column":8}},{"start":{"line":167,"column":8},"end":{"line":167,"column":8}}]},"32":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":12},"end":{"line":167,"column":36}},{"start":{"line":167,"column":41},"end":{"line":167,"column":63}},{"start":{"line":167,"column":67},"end":{"line":167,"column":90}}]},"33":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":8},"end":{"line":171,"column":8}},{"start":{"line":171,"column":8},"end":{"line":171,"column":8}}]},"34":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":12},"end":{"line":171,"column":33}},{"start":{"line":171,"column":37},"end":{"line":171,"column":59}}]},"35":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":8},"end":{"line":174,"column":8}},{"start":{"line":174,"column":8},"end":{"line":174,"column":8}}]},"36":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":12},"end":{"line":174,"column":33}},{"start":{"line":174,"column":37},"end":{"line":174,"column":60}}]},"37":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":8},"end":{"line":178,"column":8}},{"start":{"line":178,"column":8},"end":{"line":178,"column":8}}]},"38":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":12},"end":{"line":178,"column":36}},{"start":{"line":178,"column":40},"end":{"line":178,"column":63}}]},"39":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":181,"column":8}},{"start":{"line":181,"column":8},"end":{"line":181,"column":8}}]},"40":{"line":181,"type":"binary-expr","locations":[{"start":{"line":181,"column":12},"end":{"line":181,"column":36}},{"start":{"line":181,"column":40},"end":{"line":181,"column":62}}]},"41":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":4},"end":{"line":215,"column":4}},{"start":{"line":215,"column":4},"end":{"line":215,"column":4}}]},"42":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":6},"end":{"line":219,"column":6}},{"start":{"line":219,"column":6},"end":{"line":219,"column":6}}]},"43":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"44":{"line":226,"type":"binary-expr","locations":[{"start":{"line":226,"column":8},"end":{"line":226,"column":19}},{"start":{"line":226,"column":23},"end":{"line":226,"column":46}}]},"45":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":11},"end":{"line":229,"column":11}},{"start":{"line":229,"column":11},"end":{"line":229,"column":11}}]},"46":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":2},"end":{"line":245,"column":2}},{"start":{"line":245,"column":2},"end":{"line":245,"column":2}}]},"47":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":6},"end":{"line":245,"column":16}},{"start":{"line":245,"column":20},"end":{"line":245,"column":52}}]},"48":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":2},"end":{"line":254,"column":2}},{"start":{"line":254,"column":2},"end":{"line":254,"column":2}}]},"49":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":2},"end":{"line":263,"column":2}},{"start":{"line":263,"column":2},"end":{"line":263,"column":2}}]},"50":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":2},"end":{"line":268,"column":2}},{"start":{"line":268,"column":2},"end":{"line":268,"column":2}}]},"51":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":2},"end":{"line":274,"column":2}},{"start":{"line":274,"column":2},"end":{"line":274,"column":2}}]},"52":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":4},"end":{"line":275,"column":4}},{"start":{"line":275,"column":4},"end":{"line":275,"column":4}}]},"53":{"line":278,"type":"binary-expr","locations":[{"start":{"line":278,"column":11},"end":{"line":278,"column":32}},{"start":{"line":278,"column":36},"end":{"line":278,"column":67}}]},"54":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":2},"end":{"line":286,"column":2}},{"start":{"line":286,"column":2},"end":{"line":286,"column":2}}]},"55":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":4},"end":{"line":287,"column":4}},{"start":{"line":287,"column":4},"end":{"line":287,"column":4}}]}},"code":["\"use strict\"","","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","","const ruleName = \"declaration-block-properties-order\"","","const messages = ruleMessages(ruleName, {","  expected: (first, second) => `Expected \"${first}\" to come before \"${second}\"`,","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: validatePrimaryOption,","    }, {","      actual: options,","      possible: {","        unspecified: [","          \"top\",","          \"bottom\",","          \"ignore\",","          \"bottomAlphabetical\",","        ],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    result.warn((","      \"'declaration-block-properties-order'has been deprecated and in 8.0 will be removed. \" +","      \"Instead use the community 'stylelint-order' plugin pack.\"","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: \"https://stylelint.io/user-guide/rules/declaration-block-properties-order/\",","    })","","    const alphabetical = expectation === \"alphabetical\"","    const expectedOrder = alphabetical ? null : createExpectedOrder(expectation)","    // By default, ignore unspecified properties","    const unspecified = _.get(options, [\"unspecified\"], \"ignore\")","","    // Shallow loop","    root.each(node => {","      if (node.type === \"rule\" || node.type === \"atrule\") {","        checkNode(node)","      }","    })","","    function checkNode(node) {","      const allPropData = []","","      node.each(child => {","        // If the child has nested nodes with child","        // (e.g. a rule nested within a rule), make","        // sure to check the children","        if (child.nodes && child.nodes.length) {","          checkNode(child)","        }","","        if (child.type !== \"decl\") {","          return","        }","","        const prop = child.prop","","        if (!isStandardSyntaxProperty(prop)) {","          return","        }","        if (isCustomProperty(prop)) {","          return","        }","","        let unprefixedPropName = postcss.vendor.unprefixed(prop)","","        // Hack to allow -moz-osx-font-smoothing to be understood","        // just like -webkit-font-smoothing","        if (unprefixedPropName.indexOf(\"osx-\") === 0) {","          unprefixedPropName = unprefixedPropName.slice(4)","        }","","        const propData = {","          name: prop,","          unprefixedName: unprefixedPropName,","          orderData: alphabetical ? null : getOrderData(expectedOrder, unprefixedPropName),","          before: child.raws.before,","          index: allPropData.length,","          node: child,","        }","","        const previousPropData = _.last(allPropData)","        allPropData.push(propData)","","        // Skip first decl","        if (!previousPropData) {","          return","        }","","        const isCorrectOrder = alphabetical ? checkAlpabeticalOrder(previousPropData, propData) : checkOrder(previousPropData, propData)","","        if (isCorrectOrder) {","          return","        }","","        complain({","          message: messages.expected(propData.name, previousPropData.name),","          node: child,","        })","      })","","      function checkOrder(firstPropData, secondPropData) {","        // If the unprefixed property names are the same, resort to alphabetical ordering","        if (firstPropData.unprefixedName === secondPropData.unprefixedName) {","          return firstPropData.name <= secondPropData.name","        }","","        const firstPropIsUnspecified = !firstPropData.orderData","        const secondPropIsUnspecified = !secondPropData.orderData","","        // Now check actual known properties ...","        if (!firstPropIsUnspecified && !secondPropIsUnspecified) {","          return firstPropData.orderData.expectedPosition <= secondPropData.orderData.expectedPosition","        }","","        if (firstPropIsUnspecified && !secondPropIsUnspecified) {","          // If first prop is unspecified, look for a specified prop before it to","          // compare to the current prop","          const priorSpecifiedPropData = _.findLast(allPropData.slice(0, -1), d => !!d.orderData)","          if (priorSpecifiedPropData && priorSpecifiedPropData.orderData && priorSpecifiedPropData.orderData.expectedPosition > secondPropData.orderData.expectedPosition) {","            complain({","              message: messages.expected(secondPropData.name, priorSpecifiedPropData.name),","              node: secondPropData.node,","            })","            return true // avoid logging another warning","          }","        }","","        // Now deal with unspecified props ...","        // Starting with bottomAlphabetical as it requires more specific conditionals","        if (unspecified === \"bottomAlphabetical\" && !firstPropIsUnspecified && secondPropIsUnspecified) {","          return true","        }","","        if (unspecified === \"bottomAlphabetical\" && secondPropIsUnspecified && firstPropIsUnspecified) {","          if (checkAlpabeticalOrder(firstPropData, secondPropData)) {","            return true","          } else {","            return false","          }","        }","        if (unspecified === \"bottomAlphabetical\" && firstPropIsUnspecified) {","          return false","        }","","        if (firstPropIsUnspecified && secondPropIsUnspecified) {","          return true","        }","","        if (unspecified === \"ignore\" && (firstPropIsUnspecified || secondPropIsUnspecified)) {","          return true","        }","","        if (unspecified === \"top\" && firstPropIsUnspecified) {","          return true","        }","        if (unspecified === \"top\" && secondPropIsUnspecified) {","          return false","        }","","        if (unspecified === \"bottom\" && secondPropIsUnspecified) {","          return true","        }","        if (unspecified === \"bottom\" && firstPropIsUnspecified) {","          return false","        }","      }","    }","","    function complain(opts) {","      report({","        message: opts.message,","        node: opts.node,","        result,","        ruleName,","      })","    }","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule","","function createExpectedOrder(input) {","  const order = {}","  let expectedPosition = 0","","  appendGroup(input)","","  function appendGroup(items) {","    items.forEach(item => appendItem(item, false))","  }","","  function appendItem(item, inFlexibleGroup) {","    if (_.isString(item)) {","      // In flexible groups, the expectedPosition does not ascend","      // to make that flexibility work;","      // otherwise, it will always ascend","      if (!inFlexibleGroup) {","        expectedPosition += 1","      }","      order[item] = { expectedPosition }","      return","    }","","    if (!item.order || item.order === \"strict\") {","      appendGroup(item.properties)","      return","    } else if (item.order === \"flexible\") {","      expectedPosition += 1","      item.properties.forEach(property => {","        appendItem(property, true)","      })","    }","  }","","  return order","}","","function getOrderData(expectedOrder, propName) {","  let orderData = expectedOrder[propName]","  // If prop was not specified but has a hyphen","  // (e.g. `padding-top`), try looking for the segment preceding the hyphen","  // and use that index","  if (!orderData && propName.lastIndexOf(\"-\") !== -1) {","    const propNamePreHyphen = propName.slice(0, propName.lastIndexOf(\"-\"))","    orderData = getOrderData(expectedOrder, propNamePreHyphen)","  }","  return orderData","}","","function checkAlpabeticalOrder(firstPropData, secondPropData) {","  // If unprefixed prop names are the same, compare the prefixed versions","  if (firstPropData.unprefixedName === secondPropData.unprefixedName) {","    return firstPropData.name <= secondPropData.name","  }","","  return firstPropData.unprefixedName < secondPropData.unprefixedName","}","","function validatePrimaryOption(actualOptions) {","  // Return true early if alphabetical","  if (actualOptions === \"alphabetical\") {","    return true","  }","","  // Otherwise, begin checking array options","  if (!Array.isArray(actualOptions)) {","    return false","  }","","  // Every item in the array must be a string or an object","  // with a \"properties\" property","  if (!actualOptions.every(item => {","    if (_.isString(item)) {","      return true","    }","    return _.isPlainObject(item) && !_.isUndefined(item.properties)","  })) {","    return false","  }","","  const objectItems = actualOptions.filter(_.isPlainObject)","","  // Every object-item's \"order\" property must be \"strict\" or \"flexible\"","  if (!objectItems.every(item => {","    if (_.isUndefined(item.order)) {","      return true","    }","    return _.includes([","      \"strict\",","      \"flexible\",","    ], item.order)","  })) {","    return false","  }","","  return true","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"34":0,"35":0,"38":0,"46":0,"47":0,"49":0,"52":0,"53":0,"54":0,"58":1,"59":0,"61":0,"65":0,"66":0,"69":0,"70":0,"73":0,"75":0,"76":0,"78":0,"79":0,"82":0,"86":0,"87":0,"90":0,"99":0,"100":0,"103":0,"104":0,"107":0,"109":0,"110":0,"113":0,"119":1,"121":0,"122":0,"125":0,"126":0,"129":0,"130":0,"133":0,"136":0,"137":0,"138":0,"142":0,"148":0,"149":0,"152":0,"153":0,"154":0,"156":0,"159":0,"160":0,"163":0,"164":0,"167":0,"168":0,"171":0,"172":0,"174":0,"175":0,"178":0,"179":0,"181":0,"182":0,"187":1,"188":0,"198":1,"200":1,"201":1,"202":1,"204":1,"205":0,"206":0,"208":0,"210":1,"211":0,"214":1,"215":0,"219":0,"220":0,"222":0,"223":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"237":0,"240":1,"241":0,"245":0,"246":0,"247":0,"249":0,"252":1,"254":0,"255":0,"258":0,"261":1,"263":0,"264":0,"268":0,"269":0,"274":0,"275":0,"276":0,"278":0,"280":0,"283":0,"286":0,"287":0,"288":0,"290":0,"295":0,"298":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-semicolon-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-semicolon-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":66}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":60}},"9":{"start":{"line":13,"column":0},"end":{"line":17,"column":2}},"10":{"start":{"line":14,"column":23},"end":{"line":14,"column":53}},"11":{"start":{"line":15,"column":32},"end":{"line":15,"column":96}},"12":{"start":{"line":16,"column":32},"end":{"line":16,"column":98}},"13":{"start":{"line":19,"column":0},"end":{"line":72,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":20,"column":69}},"15":{"start":{"line":22,"column":2},"end":{"line":71,"column":3}},"16":{"start":{"line":23,"column":4},"end":{"line":30,"column":6}},"17":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"18":{"start":{"line":32,"column":6},"end":{"line":32,"column":12}},"19":{"start":{"line":35,"column":4},"end":{"line":70,"column":6}},"20":{"start":{"line":37,"column":6},"end":{"line":37,"column":36}},"21":{"start":{"line":38,"column":6},"end":{"line":43,"column":7}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":14}},"23":{"start":{"line":45,"column":6},"end":{"line":45,"column":34}},"24":{"start":{"line":46,"column":6},"end":{"line":48,"column":7}},"25":{"start":{"line":47,"column":8},"end":{"line":47,"column":14}},"26":{"start":{"line":51,"column":6},"end":{"line":51,"column":54}},"27":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"28":{"start":{"line":53,"column":8},"end":{"line":53,"column":14}},"29":{"start":{"line":56,"column":6},"end":{"line":69,"column":8}},"30":{"start":{"line":61,"column":10},"end":{"line":67,"column":12}},"31":{"start":{"line":74,"column":0},"end":{"line":74,"column":24}},"32":{"start":{"line":75,"column":0},"end":{"line":75,"column":24}},"33":{"start":{"line":76,"column":0},"end":{"line":76,"column":21}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":34}},{"start":{"line":40,"column":11},"end":{"line":40,"column":35}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]},"5":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const nextNonCommentNode = require(\"../../utils/nextNonCommentNode\")","const rawNodeString = require(\"../../utils/rawNodeString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"declaration-block-semicolon-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\";\\\"\",","  expectedAfterMultiLine: () => \"Expected newline after \\\";\\\" in a multi-line declaration block\",","  rejectedAfterMultiLine: () => \"Unexpected newline after \\\";\\\" in a multi-line declaration block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      // Ignore last declaration if there's no trailing semicolon","      const parentRule = decl.parent","      if (","        !parentRule.raws.semicolon","        && parentRule.last === decl","      ) {","        return","      }","","      const nextNode = decl.next()","      if (!nextNode) {","        return","      }","","      // Allow end-of-line comment","      const nodeToCheck = nextNonCommentNode(nextNode)","      if (!nodeToCheck) {","        return","      }","","      checker.afterOneOnly({","        source: rawNodeString(nodeToCheck),","        index: -1,","        lineCheckStr: blockString(parentRule),","        err: m => {","          report({","            message: m,","            node: decl,","            index: decl.toString().length + 1,","            result,","            ruleName,","          })","        },","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"15":0,"16":0,"19":1,"20":0,"22":0,"23":0,"31":0,"32":0,"35":0,"37":0,"38":0,"42":0,"45":0,"46":0,"47":0,"51":0,"52":0,"53":0,"56":0,"61":0,"74":1,"75":1,"76":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-semicolon-newline-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":9},"end":{"line":20,"column":33}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":19},"end":{"line":33,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":61}},"7":{"start":{"line":11,"column":0},"end":{"line":15,"column":2}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":55}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":98}},"10":{"start":{"line":14,"column":33},"end":{"line":14,"column":103}},"11":{"start":{"line":17,"column":0},"end":{"line":60,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":69}},"13":{"start":{"line":20,"column":2},"end":{"line":59,"column":3}},"14":{"start":{"line":21,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":33,"column":4},"end":{"line":58,"column":6}},"18":{"start":{"line":34,"column":6},"end":{"line":34,"column":36}},"19":{"start":{"line":35,"column":6},"end":{"line":40,"column":7}},"20":{"start":{"line":39,"column":8},"end":{"line":39,"column":14}},"21":{"start":{"line":42,"column":6},"end":{"line":42,"column":40}},"22":{"start":{"line":44,"column":6},"end":{"line":57,"column":8}},"23":{"start":{"line":49,"column":10},"end":{"line":55,"column":12}},"24":{"start":{"line":62,"column":0},"end":{"line":62,"column":24}},"25":{"start":{"line":63,"column":0},"end":{"line":63,"column":24}},"26":{"start":{"line":64,"column":0},"end":{"line":64,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"3":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":34}},{"start":{"line":37,"column":11},"end":{"line":37,"column":35}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"declaration-block-semicolon-newline-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected newline before \\\";\\\"\",","  expectedBeforeMultiLine: () => \"Expected newline before \\\";\\\" in a multi-line declaration block\",","  rejectedBeforeMultiLine: () => \"Unexpected whitespace before \\\";\\\" in a multi-line declaration block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","","  return function (root, result) {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(function (decl) {","      const parentRule = decl.parent","      if (","        !parentRule.raws.semicolon","        && parentRule.last === decl","      ) {","        return","      }","","      const declString = decl.toString()","","      checker.beforeAllowingIndentation({","        source: declString,","        index: declString.length,","        lineCheckStr: blockString(parentRule),","        err: m => {","          report({","            message: m,","            node: decl,","            index: decl.toString().length - 1,","            result,","            ruleName,","          })","        },","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"13":0,"14":0,"17":1,"18":0,"20":0,"21":0,"29":0,"30":0,"33":0,"34":0,"35":0,"39":0,"42":0,"44":0,"49":0,"62":1,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-semicolon-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":1,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":36}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":9},"end":{"line":22,"column":33}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":19},"end":{"line":36,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":66}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":58}},"8":{"start":{"line":12,"column":0},"end":{"line":17,"column":2}},"9":{"start":{"line":13,"column":23},"end":{"line":13,"column":58}},"10":{"start":{"line":14,"column":23},"end":{"line":14,"column":58}},"11":{"start":{"line":15,"column":33},"end":{"line":15,"column":103}},"12":{"start":{"line":16,"column":33},"end":{"line":16,"column":103}},"13":{"start":{"line":19,"column":0},"end":{"line":64,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":20,"column":67}},"15":{"start":{"line":22,"column":2},"end":{"line":63,"column":3}},"16":{"start":{"line":23,"column":4},"end":{"line":31,"column":6}},"17":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"18":{"start":{"line":33,"column":6},"end":{"line":33,"column":12}},"19":{"start":{"line":36,"column":4},"end":{"line":62,"column":6}},"20":{"start":{"line":38,"column":6},"end":{"line":38,"column":36}},"21":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"22":{"start":{"line":40,"column":8},"end":{"line":40,"column":14}},"23":{"start":{"line":43,"column":6},"end":{"line":43,"column":34}},"24":{"start":{"line":44,"column":6},"end":{"line":46,"column":7}},"25":{"start":{"line":45,"column":8},"end":{"line":45,"column":14}},"26":{"start":{"line":48,"column":6},"end":{"line":61,"column":8}},"27":{"start":{"line":53,"column":10},"end":{"line":59,"column":12}},"28":{"start":{"line":66,"column":0},"end":{"line":66,"column":24}},"29":{"start":{"line":67,"column":0},"end":{"line":67,"column":24}},"30":{"start":{"line":68,"column":0},"end":{"line":68,"column":21}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":10},"end":{"line":39,"column":36}},{"start":{"line":39,"column":40},"end":{"line":39,"column":64}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":6}},{"start":{"line":44,"column":6},"end":{"line":44,"column":6}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const rawNodeString = require(\"../../utils/rawNodeString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"declaration-block-semicolon-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\";\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\";\\\"\",","  expectedAfterSingleLine: () => \"Expected single space after \\\";\\\" in a single-line declaration block\",","  rejectedAfterSingleLine: () => \"Unexpected whitespace after \\\";\\\" in a single-line declaration block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","","  return function (root, result) {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(function (decl) {","      // Ignore last declaration if there's no trailing semicolon","      const parentRule = decl.parent","      if (!parentRule.raws.semicolon && parentRule.last === decl) {","        return","      }","","      const nextDecl = decl.next()","      if (!nextDecl) {","        return","      }","","      checker.after({","        source: rawNodeString(nextDecl),","        index: -1,","        lineCheckStr: blockString(parentRule),","        err: m => {","          report({","            message: m,","            node: decl,","            index: decl.toString().length + 1,","            result,","            ruleName,","          })","        },","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"14":0,"15":0,"16":0,"19":1,"20":0,"22":0,"23":0,"32":0,"33":0,"36":0,"38":0,"39":0,"40":0,"43":0,"44":0,"45":0,"48":0,"53":0,"66":1,"67":1,"68":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-semicolon-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":59}},"7":{"start":{"line":11,"column":0},"end":{"line":16,"column":2}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":60}},"9":{"start":{"line":13,"column":24},"end":{"line":13,"column":60}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":105}},"11":{"start":{"line":15,"column":34},"end":{"line":15,"column":105}},"12":{"start":{"line":18,"column":0},"end":{"line":60,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":19,"column":67}},"14":{"start":{"line":21,"column":2},"end":{"line":59,"column":3}},"15":{"start":{"line":22,"column":4},"end":{"line":30,"column":6}},"16":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"17":{"start":{"line":32,"column":6},"end":{"line":32,"column":12}},"18":{"start":{"line":35,"column":4},"end":{"line":58,"column":6}},"19":{"start":{"line":37,"column":6},"end":{"line":37,"column":36}},"20":{"start":{"line":38,"column":6},"end":{"line":40,"column":7}},"21":{"start":{"line":39,"column":8},"end":{"line":39,"column":14}},"22":{"start":{"line":42,"column":6},"end":{"line":42,"column":40}},"23":{"start":{"line":44,"column":6},"end":{"line":57,"column":8}},"24":{"start":{"line":49,"column":10},"end":{"line":55,"column":12}},"25":{"start":{"line":62,"column":0},"end":{"line":62,"column":24}},"26":{"start":{"line":63,"column":0},"end":{"line":63,"column":24}},"27":{"start":{"line":64,"column":0},"end":{"line":64,"column":21}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"3":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":10},"end":{"line":38,"column":36}},{"start":{"line":38,"column":40},"end":{"line":38,"column":64}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"declaration-block-semicolon-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\";\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\";\\\"\",","  expectedBeforeSingleLine: () => \"Expected single space before \\\";\\\" in a single-line declaration block\",","  rejectedBeforeSingleLine: () => \"Unexpected whitespace before \\\";\\\" in a single-line declaration block\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      // Ignore last declaration if there's no trailing semicolon","      const parentRule = decl.parent","      if (!parentRule.raws.semicolon && parentRule.last === decl) {","        return","      }","","      const declString = decl.toString()","","      checker.before({","        source: declString,","        index: declString.length,","        lineCheckStr: blockString(parentRule),","        err: m => {","          report({","            message: m,","            node: decl,","            index: decl.toString().length - 1,","            result,","            ruleName,","          })","        },","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"13":0,"14":0,"15":0,"18":1,"19":0,"21":0,"22":0,"31":0,"32":0,"35":0,"37":0,"38":0,"39":0,"42":0,"44":0,"49":0,"62":1,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-single-line-max-declarations/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":68}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":65}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":24},"end":{"line":14,"column":74}},"11":{"start":{"line":17,"column":0},"end":{"line":50,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":49,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"14":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"15":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"16":{"start":{"line":27,"column":4},"end":{"line":48,"column":6}},"17":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"18":{"start":{"line":29,"column":8},"end":{"line":29,"column":14}},"19":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"21":{"start":{"line":35,"column":6},"end":{"line":35,"column":67}},"22":{"start":{"line":35,"column":46},"end":{"line":35,"column":66}},"23":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"24":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"25":{"start":{"line":41,"column":6},"end":{"line":47,"column":8}},"26":{"start":{"line":52,"column":0},"end":{"line":52,"column":24}},"27":{"start":{"line":53,"column":0},"end":{"line":53,"column":24}},"28":{"start":{"line":54,"column":0},"end":{"line":54,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]}},"code":["\"use strict\"","","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const blockString = require(\"../../utils/blockString\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","","const ruleName = \"declaration-block-single-line-max-declarations\"","","const messages = ruleMessages(ruleName, {","  expected: quantity => `Expected no more than ${quantity} declaration(s)`,","})","","const rule = function (quantity) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: quantity,","      possible: [_.isNumber],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isSingleLineString(blockString(rule))) {","        return","      }","      if (!rule.nodes) {","        return","      }","","      const decls = rule.nodes.filter(node => node.type === \"decl\")","","      if (decls.length <= quantity) {","        return","      }","","      report({","        message: messages.expected(quantity),","        node: rule,","        index: beforeBlockString(rule, { noRawBefore: true }).length,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"23":0,"24":0,"27":0,"28":0,"29":0,"31":0,"32":0,"35":0,"37":0,"38":0,"41":0,"52":1,"53":1,"54":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-trailing-semicolon/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-block-trailing-semicolon/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":1,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}},"2":{"name":"checkLastNode","line":48,"loc":{"start":{"line":48,"column":4},"end":{"line":48,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":55}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":15,"column":0},"end":{"line":73,"column":1}},"8":{"start":{"line":16,"column":2},"end":{"line":72,"column":3}},"9":{"start":{"line":17,"column":4},"end":{"line":23,"column":6}},"10":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"11":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"12":{"start":{"line":28,"column":4},"end":{"line":39,"column":6}},"13":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"14":{"start":{"line":30,"column":8},"end":{"line":30,"column":14}},"15":{"start":{"line":32,"column":6},"end":{"line":34,"column":7}},"16":{"start":{"line":33,"column":8},"end":{"line":33,"column":14}},"17":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"18":{"start":{"line":36,"column":8},"end":{"line":36,"column":14}},"19":{"start":{"line":38,"column":6},"end":{"line":38,"column":27}},"20":{"start":{"line":41,"column":4},"end":{"line":46,"column":6}},"21":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":14}},"23":{"start":{"line":45,"column":6},"end":{"line":45,"column":25}},"24":{"start":{"line":48,"column":4},"end":{"line":71,"column":5}},"25":{"start":{"line":49,"column":6},"end":{"line":49,"column":17}},"26":{"start":{"line":51,"column":6},"end":{"line":56,"column":7}},"27":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"28":{"start":{"line":53,"column":10},"end":{"line":53,"column":16}},"29":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"30":{"start":{"line":57,"column":6},"end":{"line":62,"column":7}},"31":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"32":{"start":{"line":59,"column":10},"end":{"line":59,"column":16}},"33":{"start":{"line":61,"column":8},"end":{"line":61,"column":35}},"34":{"start":{"line":64,"column":6},"end":{"line":70,"column":8}},"35":{"start":{"line":75,"column":0},"end":{"line":75,"column":24}},"36":{"start":{"line":76,"column":0},"end":{"line":76,"column":24}},"37":{"start":{"line":77,"column":0},"end":{"line":77,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"4":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"5":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"7":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"8":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"9":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]}},"code":["\"use strict\"","","const hasBlock = require(\"../../utils/hasBlock\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"declaration-block-trailing-semicolon\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected a trailing semicolon\",","  rejected: \"Unexpected trailing semicolon\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      if (atRule.parent === root) {","        return","      }","      if (atRule !== atRule.parent.last) {","        return","      }","      if (hasBlock(atRule)) {","        return","      }","      checkLastNode(atRule)","    })","","    root.walkDecls(decl => {","      if (decl !== decl.parent.last) {","        return","      }","      checkLastNode(decl)","    })","","    function checkLastNode(node) {","      let message","","      if (expectation === \"always\") {","        if (node.parent.raws.semicolon) {","          return","        }","        message = messages.expected","      }","      if (expectation === \"never\") {","        if (!node.parent.raws.semicolon) {","          return","        }","        message = messages.rejected","      }","","      report({","        message,","        node,","        index: node.toString().trim().length - 1,","        result,","        ruleName,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"15":1,"16":0,"17":0,"24":0,"25":0,"28":0,"29":0,"30":0,"32":0,"33":0,"35":0,"36":0,"38":0,"41":0,"42":0,"43":0,"45":0,"48":1,"49":0,"51":0,"52":0,"53":0,"55":0,"57":0,"58":0,"59":0,"61":0,"64":0,"75":1,"76":1,"77":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-colon-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-colon-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":1,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":86}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":66}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":50}},"8":{"start":{"line":12,"column":0},"end":{"line":15,"column":2}},"9":{"start":{"line":13,"column":23},"end":{"line":13,"column":53}},"10":{"start":{"line":14,"column":32},"end":{"line":14,"column":92}},"11":{"start":{"line":17,"column":0},"end":{"line":66,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":69}},"13":{"start":{"line":19,"column":2},"end":{"line":65,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":26,"column":6}},"15":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"17":{"start":{"line":31,"column":4},"end":{"line":64,"column":6}},"18":{"start":{"line":32,"column":6},"end":{"line":34,"column":7}},"19":{"start":{"line":33,"column":8},"end":{"line":33,"column":14}},"20":{"start":{"line":37,"column":6},"end":{"line":37,"column":95}},"21":{"start":{"line":41,"column":6},"end":{"line":41,"column":76}},"22":{"start":{"line":43,"column":6},"end":{"line":63,"column":7}},"23":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"24":{"start":{"line":45,"column":10},"end":{"line":45,"column":18}},"25":{"start":{"line":47,"column":8},"end":{"line":47,"column":120}},"26":{"start":{"line":49,"column":8},"end":{"line":62,"column":10}},"27":{"start":{"line":54,"column":12},"end":{"line":60,"column":14}},"28":{"start":{"line":68,"column":0},"end":{"line":68,"column":24}},"29":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"30":{"start":{"line":70,"column":0},"end":{"line":70,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"3":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":60},"end":{"line":37,"column":77}},{"start":{"line":37,"column":81},"end":{"line":37,"column":83}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":8}},{"start":{"line":44,"column":8},"end":{"line":44,"column":8}}]},"5":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":82},"end":{"line":47,"column":116}},{"start":{"line":47,"column":119},"end":{"line":47,"column":120}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const isStandardSyntaxDeclaration = require(\"../../utils/isStandardSyntaxDeclaration\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","","const ruleName = \"declaration-colon-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\":\\\"\",","  expectedAfterMultiLine: () => \"Expected newline after \\\":\\\" with a multi-line declaration\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (!isStandardSyntaxDeclaration(decl)) {","        return","      }","","      // Get the raw prop, and only the prop","      const endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || \"\").length - 1","","      // The extra characters tacked onto the end ensure that there is a character to check","      // after the colon. Otherwise, with `background:pink` the character after the","      const propPlusColon = decl.toString().slice(0, endOfPropIndex) + \"xxx\"","","      for (let i = 0, l = propPlusColon.length; i < l; i++) {","        if (propPlusColon[i] !== \":\") {","          continue","        }","        const indexToCheck = propPlusColon.substr(propPlusColon[i], 3) === \"/*\" ? propPlusColon.indexOf(\"*/\", i) + 1 : i","","        checker.afterOneOnly({","          source: propPlusColon,","          index: indexToCheck,","          lineCheckStr: decl.value,","          err: m => {","            report({","              message: m,","              node: decl,","              index: indexToCheck,","              result,","              ruleName,","            })","          },","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"27":0,"28":0,"31":0,"32":0,"33":0,"37":0,"41":0,"43":0,"44":0,"45":0,"47":0,"49":0,"54":0,"68":1,"69":1,"70":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-colon-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-colon-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":79}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"6":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":58}},"8":{"start":{"line":12,"column":23},"end":{"line":12,"column":58}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":99}},"10":{"start":{"line":16,"column":0},"end":{"line":38,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":67}},"12":{"start":{"line":18,"column":2},"end":{"line":37,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":26,"column":6}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":31,"column":4},"end":{"line":36,"column":6}},"17":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":24}},"19":{"start":{"line":42,"column":0},"end":{"line":42,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const declarationColonSpaceChecker = require(\"../declarationColonSpaceChecker\")","","const ruleName = \"declaration-colon-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\":\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\":\\\"\",","  expectedAfterSingleLine: () => \"Expected single space after \\\":\\\" with a single-line declaration\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    declarationColonSpaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"16":1,"17":0,"18":0,"19":0,"27":0,"28":0,"31":0,"40":1,"41":1,"42":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declarationColonSpaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declarationColonSpaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":71}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":83}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":7,"column":0},"end":{"line":41,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":40,"column":4}},"6":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"7":{"start":{"line":10,"column":6},"end":{"line":10,"column":12}},"8":{"start":{"line":14,"column":4},"end":{"line":14,"column":93}},"9":{"start":{"line":18,"column":4},"end":{"line":18,"column":74}},"10":{"start":{"line":20,"column":4},"end":{"line":39,"column":5}},"11":{"start":{"line":21,"column":6},"end":{"line":23,"column":7}},"12":{"start":{"line":22,"column":8},"end":{"line":22,"column":16}},"13":{"start":{"line":24,"column":6},"end":{"line":37,"column":8}},"14":{"start":{"line":29,"column":10},"end":{"line":35,"column":12}},"15":{"start":{"line":38,"column":6},"end":{"line":38,"column":11}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":9,"column":4}},{"start":{"line":9,"column":4},"end":{"line":9,"column":4}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":58},"end":{"line":14,"column":75}},{"start":{"line":14,"column":79},"end":{"line":14,"column":81}}]},"3":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":6}},{"start":{"line":21,"column":6},"end":{"line":21,"column":6}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../utils/declarationValueIndex\")","const isStandardSyntaxDeclaration = require(\"../utils/isStandardSyntaxDeclaration\")","const report = require(\"../utils/report\")","","module.exports = function (opts) {","  opts.root.walkDecls(decl => {","    if (!isStandardSyntaxDeclaration(decl)) {","      return","    }","","    // Get the raw prop, and only the prop","    const endOfPropIndex = declarationValueIndex(decl) + (decl.raws.between || \"\").length - 1","","    // The extra characters tacked onto the end ensure that there is a character to check","    // after the colon. Otherwise, with `background:pink` the character after the","    const propPlusColon = decl.toString().slice(0, endOfPropIndex) + \"xxx\"","","    for (let i = 0, l = propPlusColon.length; i < l; i++) {","      if (propPlusColon[i] !== \":\") {","        continue","      }","      opts.locationChecker({","        source: propPlusColon,","        index: i,","        lineCheckStr: decl.value,","        err: m => {","          report({","            message: m,","            node: decl,","            index: decl.prop.toString().length + 1,","            result: opts.result,","            ruleName: opts.checkedRuleName,","          })","        },","      })","      break","    }","  })","}",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"10":0,"14":0,"18":0,"20":0,"21":0,"22":0,"24":0,"29":0,"38":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-colon-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-colon-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":79}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":60}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":60}},"9":{"start":{"line":15,"column":0},"end":{"line":36,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const declarationColonSpaceChecker = require(\"../declarationColonSpaceChecker\")","","const ruleName = \"declaration-colon-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\":\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\":\\\"\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    declarationColonSpaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-empty-line-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-empty-line-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":1,"43":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0,0,0,0],"17":[0,0],"18":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":64}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":68}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":86}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":60}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":56}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":48}},"11":{"start":{"line":15,"column":0},"end":{"line":18,"column":2}},"12":{"start":{"line":20,"column":0},"end":{"line":131,"column":1}},"13":{"start":{"line":21,"column":2},"end":{"line":130,"column":3}},"14":{"start":{"line":22,"column":4},"end":{"line":43,"column":6}},"15":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"16":{"start":{"line":45,"column":6},"end":{"line":45,"column":12}},"17":{"start":{"line":48,"column":4},"end":{"line":129,"column":6}},"18":{"start":{"line":49,"column":6},"end":{"line":50,"column":28}},"19":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"20":{"start":{"line":53,"column":8},"end":{"line":53,"column":14}},"21":{"start":{"line":55,"column":6},"end":{"line":57,"column":7}},"22":{"start":{"line":56,"column":8},"end":{"line":56,"column":14}},"23":{"start":{"line":60,"column":6},"end":{"line":66,"column":7}},"24":{"start":{"line":65,"column":8},"end":{"line":65,"column":14}},"25":{"start":{"line":69,"column":6},"end":{"line":75,"column":7}},"26":{"start":{"line":74,"column":8},"end":{"line":74,"column":14}},"27":{"start":{"line":78,"column":6},"end":{"line":83,"column":7}},"28":{"start":{"line":82,"column":8},"end":{"line":82,"column":14}},"29":{"start":{"line":85,"column":6},"end":{"line":87,"column":15}},"30":{"start":{"line":90,"column":6},"end":{"line":95,"column":7}},"31":{"start":{"line":94,"column":8},"end":{"line":94,"column":54}},"32":{"start":{"line":98,"column":6},"end":{"line":104,"column":7}},"33":{"start":{"line":103,"column":8},"end":{"line":103,"column":54}},"34":{"start":{"line":107,"column":6},"end":{"line":115,"column":7}},"35":{"start":{"line":114,"column":8},"end":{"line":114,"column":54}},"36":{"start":{"line":118,"column":6},"end":{"line":118,"column":63}},"37":{"start":{"line":121,"column":6},"end":{"line":123,"column":7}},"38":{"start":{"line":122,"column":8},"end":{"line":122,"column":14}},"39":{"start":{"line":125,"column":6},"end":{"line":127,"column":27}},"40":{"start":{"line":128,"column":6},"end":{"line":128,"column":55}},"41":{"start":{"line":133,"column":0},"end":{"line":133,"column":24}},"42":{"start":{"line":134,"column":0},"end":{"line":134,"column":24}},"43":{"start":{"line":135,"column":0},"end":{"line":135,"column":21}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"4":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"5":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":58}},{"start":{"line":62,"column":11},"end":{"line":62,"column":22}},{"start":{"line":63,"column":11},"end":{"line":63,"column":41}}]},"6":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":6}},{"start":{"line":69,"column":6},"end":{"line":69,"column":6}}]},"7":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":62}},{"start":{"line":71,"column":11},"end":{"line":71,"column":22}},{"start":{"line":72,"column":11},"end":{"line":72,"column":38}}]},"8":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":78,"column":6}},{"start":{"line":78,"column":6},"end":{"line":78,"column":6}}]},"9":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":69}},{"start":{"line":80,"column":11},"end":{"line":80,"column":50}}]},"10":{"line":85,"type":"cond-expr","locations":[{"start":{"line":86,"column":10},"end":{"line":86,"column":14}},{"start":{"line":87,"column":10},"end":{"line":87,"column":15}}]},"11":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":6},"end":{"line":90,"column":6}},{"start":{"line":90,"column":6},"end":{"line":90,"column":6}}]},"12":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":8},"end":{"line":91,"column":57}},{"start":{"line":92,"column":11},"end":{"line":92,"column":32}}]},"13":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":6},"end":{"line":98,"column":6}},{"start":{"line":98,"column":6},"end":{"line":98,"column":6}}]},"14":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":58}},{"start":{"line":100,"column":11},"end":{"line":100,"column":22}},{"start":{"line":101,"column":11},"end":{"line":101,"column":41}}]},"15":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":6},"end":{"line":107,"column":6}},{"start":{"line":107,"column":6},"end":{"line":107,"column":6}}]},"16":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":62}},{"start":{"line":109,"column":11},"end":{"line":109,"column":22}},{"start":{"line":110,"column":11},"end":{"line":110,"column":27}},{"start":{"line":111,"column":11},"end":{"line":111,"column":51}},{"start":{"line":112,"column":11},"end":{"line":112,"column":46}}]},"17":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":6},"end":{"line":121,"column":6}},{"start":{"line":121,"column":6},"end":{"line":121,"column":6}}]},"18":{"line":125,"type":"cond-expr","locations":[{"start":{"line":126,"column":10},"end":{"line":126,"column":27}},{"start":{"line":127,"column":10},"end":{"line":127,"column":27}}]}},"code":["\"use strict\"","","const blockString = require(\"../../utils/blockString\")","const hasEmptyLine = require(\"../../utils/hasEmptyLine\")","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const isStandardSyntaxDeclaration = require(\"../../utils/isStandardSyntaxDeclaration\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"declaration-empty-line-before\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected empty line before declaration\",","  rejected: \"Unexpected empty line before declaration\",","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    }, {","      actual: options,","      possible: {","        except: [","          \"first-nested\",","          \"after-comment\",","          \"after-declaration\",","        ],","        ignore: [","          \"after-comment\",","          \"after-declaration\",","          \"inside-single-line-block\",","        ],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop,","        parent = decl.parent","","      if (!isStandardSyntaxDeclaration(decl)) {","        return","      }","      if (isCustomProperty(prop)) {","        return","      }","","      // Optionally ignore the node if a comment precedes it","      if (","        optionsMatches(options, \"ignore\", \"after-comment\")","        && decl.prev()","        && decl.prev().type === \"comment\"","      ) {","        return","      }","","      // Optionally ignore the node if a declaration precedes it","      if (","        optionsMatches(options, \"ignore\", \"after-declaration\")","        && decl.prev()","        && decl.prev().type === \"decl\"","      ) {","        return","      }","","      // Optionally ignore nodes inside single-line blocks","      if (","        optionsMatches(options, \"ignore\", \"inside-single-line-block\")","        && isSingleLineString(blockString(parent))","      ) {","        return","      }","","      let expectEmptyLineBefore = expectation === \"always\"","        ? true","        : false","","      // Optionally reverse the expectation for the first nested node","      if (","        optionsMatches(options, \"except\", \"first-nested\")","        && decl === parent.first","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Optionally reverse the expectation if a comment precedes this node","      if (","        optionsMatches(options, \"except\", \"after-comment\")","        && decl.prev()","        && decl.prev().type === \"comment\"","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Optionally reverse the expectation if a declaration precedes this node","      if (","        optionsMatches(options, \"except\", \"after-declaration\")","        && decl.prev()","        && decl.prev().prop","        && isStandardSyntaxDeclaration(decl.prev())","        && !isCustomProperty(decl.prev().prop)","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Check for at least one empty line","      const hasEmptyLineBefore = hasEmptyLine(decl.raws.before)","","      // Return if the expectation is met","      if (expectEmptyLineBefore === hasEmptyLineBefore) {","        return","      }","","      const message = expectEmptyLineBefore","        ? messages.expected","        : messages.rejected","      report({ message, node: decl, result, ruleName })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"20":1,"21":0,"22":0,"44":0,"45":0,"48":0,"49":0,"52":0,"53":0,"55":0,"56":0,"60":0,"65":0,"69":0,"74":0,"78":0,"82":0,"85":0,"90":0,"94":0,"98":0,"103":0,"107":0,"114":0,"118":0,"121":0,"122":0,"125":0,"128":0,"133":1,"134":1,"135":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-no-important/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-no-important/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":13,"column":0},"end":{"line":34,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":33,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":70}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"10":{"start":{"line":17,"column":6},"end":{"line":17,"column":12}},"11":{"start":{"line":20,"column":4},"end":{"line":32,"column":6}},"12":{"start":{"line":21,"column":6},"end":{"line":23,"column":7}},"13":{"start":{"line":22,"column":8},"end":{"line":22,"column":14}},"14":{"start":{"line":25,"column":6},"end":{"line":31,"column":8}},"15":{"start":{"line":36,"column":0},"end":{"line":36,"column":24}},"16":{"start":{"line":37,"column":0},"end":{"line":37,"column":24}},"17":{"start":{"line":38,"column":0},"end":{"line":38,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":6}},{"start":{"line":21,"column":6},"end":{"line":21,"column":6}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"declaration-no-important\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected !important\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (!decl.important) {","        return","      }","","      report({","        message: messages.rejected,","        node: decl,","        word: \"important\",","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"13":1,"14":0,"15":0,"16":0,"17":0,"20":0,"21":0,"22":0,"25":0,"36":1,"37":1,"38":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-property-unit-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-property-unit-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":34}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":30},"end":{"line":41,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":51}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":54}},"11":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"12":{"start":{"line":16,"column":32},"end":{"line":16,"column":86}},"13":{"start":{"line":19,"column":0},"end":{"line":73,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":72,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":24,"column":6}},"16":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"17":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"18":{"start":{"line":29,"column":4},"end":{"line":71,"column":6}},"19":{"start":{"line":30,"column":6},"end":{"line":31,"column":26}},"20":{"start":{"line":33,"column":6},"end":{"line":33,"column":60}},"21":{"start":{"line":35,"column":6},"end":{"line":35,"column":126}},"22":{"start":{"line":35,"column":72},"end":{"line":35,"column":125}},"23":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"24":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"25":{"start":{"line":41,"column":6},"end":{"line":70,"column":8}},"26":{"start":{"line":43,"column":8},"end":{"line":48,"column":9}},"27":{"start":{"line":47,"column":10},"end":{"line":47,"column":22}},"28":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"29":{"start":{"line":50,"column":10},"end":{"line":50,"column":16}},"30":{"start":{"line":53,"column":8},"end":{"line":53,"column":47}},"31":{"start":{"line":55,"column":8},"end":{"line":61,"column":9}},"32":{"start":{"line":60,"column":10},"end":{"line":60,"column":16}},"33":{"start":{"line":63,"column":8},"end":{"line":69,"column":10}},"34":{"start":{"line":75,"column":0},"end":{"line":75,"column":24}},"35":{"start":{"line":76,"column":0},"end":{"line":76,"column":24}},"36":{"start":{"line":77,"column":0},"end":{"line":77,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]},"4":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":10},"end":{"line":44,"column":34}},{"start":{"line":45,"column":13},"end":{"line":45,"column":47}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"6":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"7":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":10},"end":{"line":56,"column":15}},{"start":{"line":57,"column":13},"end":{"line":57,"column":17}},{"start":{"line":58,"column":13},"end":{"line":58,"column":61}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const getUnitFromValueNode = require(\"../../utils/getUnitFromValueNode\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const valueParser = require(\"postcss-value-parser\")","const postcss = require(\"postcss\")","","const ruleName = \"declaration-property-unit-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,","})","","const rule = function (blacklist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isObject],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop,","        value = decl.value","","      const unprefixedProp = postcss.vendor.unprefixed(prop)","","      const propBlacklist = _.find(blacklist, (list, propIdentifier) => matchesStringOrRegExp(unprefixedProp, propIdentifier))","","      if (!propBlacklist) {","        return","      }","","      valueParser(value).walk(function (node) {","        // Ignore wrong units within `url` function","        if (","          node.type === \"function\"","          && node.value.toLowerCase() === \"url\"","        ) {","          return false","        }","        if (node.type === \"string\") {","          return","        }","","        const unit = getUnitFromValueNode(node)","","        if (","          !unit","          || unit","          && propBlacklist.indexOf(unit.toLowerCase()) === -1","        ) {","          return","        }","","        report({","          message: messages.rejected(prop, unit),","          node: decl,","          index: declarationValueIndex(decl) + node.sourceIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"16":0,"19":1,"20":0,"21":0,"25":0,"26":0,"29":0,"30":0,"33":0,"35":0,"37":0,"38":0,"41":0,"43":0,"47":0,"49":0,"50":0,"53":0,"55":0,"60":0,"63":0,"75":1,"76":1,"77":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/getUnitFromValueNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/getUnitFromValueNode.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":17},"end":{"line":14,"column":58}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":64}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":51}},"5":{"start":{"line":14,"column":0},"end":{"line":36,"column":1}},"6":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"7":{"start":{"line":16,"column":4},"end":{"line":16,"column":15}},"8":{"start":{"line":19,"column":2},"end":{"line":23,"column":19}},"9":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"10":{"start":{"line":26,"column":4},"end":{"line":26,"column":15}},"11":{"start":{"line":29,"column":2},"end":{"line":29,"column":44}},"12":{"start":{"line":31,"column":2},"end":{"line":33,"column":3}},"13":{"start":{"line":32,"column":4},"end":{"line":32,"column":15}},"14":{"start":{"line":35,"column":2},"end":{"line":35,"column":24}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":6},"end":{"line":15,"column":11}},{"start":{"line":15,"column":15},"end":{"line":15,"column":19}},{"start":{"line":15,"column":23},"end":{"line":15,"column":34}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"4":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":6},"end":{"line":25,"column":26}},{"start":{"line":25,"column":30},"end":{"line":25,"column":59}},{"start":{"line":25,"column":63},"end":{"line":25,"column":91}},{"start":{"line":25,"column":95},"end":{"line":25,"column":116}}]},"5":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const blurInterpolation = require(\"./blurInterpolation\")","const _ = require(\"lodash\")","const isStandardSyntaxValue = require(\"./isStandardSyntaxValue\")","const valueParser = require(\"postcss-value-parser\")","","/**"," * Get unit from value node"," *"," * Returns `null` if the unit is not found."," */","module.exports = function (node/*: Object*/)/*: ?string*/ {","  if (!node || node && !node.value) {","    return null","  }","","  const value = blurInterpolation(node.value, \"\")","  // ignore hack unit","  .replace(\"\\\\0\", \"\").replace(\"\\\\9\", \"\")","  // ignore decimal place","  .replace(\".\", \"\")","","  if (node.type !== \"word\" || !isStandardSyntaxValue(value) || !_.isFinite(parseInt(value)) || node.value[0] === \"#\") {","    return null","  }","","  const parsedUnit = valueParser.unit(value)","","  if (!parsedUnit) {","    return null","  }","","  return parsedUnit.unit","}",""],"l":{"4":1,"5":1,"6":1,"7":1,"14":1,"15":0,"16":0,"19":0,"25":0,"26":0,"29":0,"31":0,"32":0,"35":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/blurInterpolation.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/blurInterpolation.js","s":{"1":1,"2":0,"3":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":3,"loc":{"start":{"line":3,"column":17},"end":{"line":3,"column":59}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":102}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":45}}},"branchMap":{"1":{"line":4,"type":"cond-expr","locations":[{"start":{"line":4,"column":84},"end":{"line":4,"column":96}},{"start":{"line":4,"column":99},"end":{"line":4,"column":102}}]},"2":{"line":4,"type":"binary-expr","locations":[{"start":{"line":4,"column":31},"end":{"line":4,"column":51}},{"start":{"line":4,"column":55},"end":{"line":4,"column":81}}]}},"code":["/* @flow */","\"use strict\"","module.exports = function (source/*: string*/)/*: string*/ {","  const blurChar/*: string*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \"","","  return source.replace(/[#@{}]+/g, blurChar)","}",""],"l":{"3":1,"4":0,"6":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-property-unit-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-property-unit-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":34}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":30},"end":{"line":41,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":51}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":54}},"11":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"12":{"start":{"line":16,"column":32},"end":{"line":16,"column":86}},"13":{"start":{"line":19,"column":0},"end":{"line":66,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":65,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":24,"column":6}},"16":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"17":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"18":{"start":{"line":29,"column":4},"end":{"line":64,"column":6}},"19":{"start":{"line":30,"column":6},"end":{"line":31,"column":26}},"20":{"start":{"line":33,"column":6},"end":{"line":33,"column":60}},"21":{"start":{"line":35,"column":6},"end":{"line":35,"column":126}},"22":{"start":{"line":35,"column":72},"end":{"line":35,"column":125}},"23":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"24":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"25":{"start":{"line":41,"column":6},"end":{"line":63,"column":8}},"26":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"27":{"start":{"line":44,"column":10},"end":{"line":44,"column":22}},"28":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"29":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"30":{"start":{"line":50,"column":8},"end":{"line":50,"column":47}},"31":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"32":{"start":{"line":53,"column":10},"end":{"line":53,"column":16}},"33":{"start":{"line":56,"column":8},"end":{"line":62,"column":10}},"34":{"start":{"line":68,"column":0},"end":{"line":68,"column":24}},"35":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"36":{"start":{"line":70,"column":0},"end":{"line":70,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]},"4":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":12},"end":{"line":43,"column":36}},{"start":{"line":43,"column":40},"end":{"line":43,"column":74}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"6":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"7":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":17}},{"start":{"line":52,"column":21},"end":{"line":52,"column":79}}]},"8":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":22},"end":{"line":52,"column":26}},{"start":{"line":52,"column":30},"end":{"line":52,"column":71}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const getUnitFromValueNode = require(\"../../utils/getUnitFromValueNode\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const valueParser = require(\"postcss-value-parser\")","const postcss = require(\"postcss\")","","const ruleName = \"declaration-property-unit-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: (property, unit) => `Unexpected unit \"${unit}\" for property \"${property}\"`,","})","","const rule = function (whitelist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isObject],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop,","        value = decl.value","","      const unprefixedProp = postcss.vendor.unprefixed(prop)","","      const propWhitelist = _.find(whitelist, (list, propIdentifier) => matchesStringOrRegExp(unprefixedProp, propIdentifier))","","      if (!propWhitelist) {","        return","      }","","      valueParser(value).walk(function (node) {","        // Ignore wrong units within `url` function","        if (node.type === \"function\" && node.value.toLowerCase() === \"url\") {","          return false","        }","        if (node.type === \"string\") {","          return","        }","","        const unit = getUnitFromValueNode(node)","","        if (!unit || (unit && propWhitelist.indexOf(unit.toLowerCase())) !== -1) {","          return","        }","","        report({","          message: messages.rejected(prop, unit),","          node: decl,","          index: declarationValueIndex(decl) + node.sourceIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"16":0,"19":1,"20":0,"21":0,"25":0,"26":0,"29":0,"30":0,"33":0,"35":0,"37":0,"38":0,"41":0,"43":0,"44":0,"46":0,"47":0,"50":0,"52":0,"53":0,"56":0,"68":1,"69":1,"70":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-property-value-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-property-value-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":55}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":89}},"10":{"start":{"line":16,"column":0},"end":{"line":49,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":48,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":21,"column":6}},"13":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"14":{"start":{"line":23,"column":6},"end":{"line":23,"column":12}},"15":{"start":{"line":26,"column":4},"end":{"line":47,"column":6}},"16":{"start":{"line":27,"column":6},"end":{"line":28,"column":26}},"17":{"start":{"line":30,"column":6},"end":{"line":30,"column":60}},"18":{"start":{"line":31,"column":6},"end":{"line":31,"column":126}},"19":{"start":{"line":31,"column":72},"end":{"line":31,"column":125}},"20":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"21":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"22":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"23":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"24":{"start":{"line":41,"column":6},"end":{"line":46,"column":8}},"25":{"start":{"line":51,"column":0},"end":{"line":51,"column":24}},"26":{"start":{"line":52,"column":0},"end":{"line":52,"column":24}},"27":{"start":{"line":53,"column":0},"end":{"line":53,"column":21}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const postcss = require(\"postcss\")","","const ruleName = \"declaration-property-value-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,","})","","const rule = function (blacklist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isObject],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop,","        value = decl.value","","      const unprefixedProp = postcss.vendor.unprefixed(prop)","      const propBlacklist = _.find(blacklist, (list, propIdentifier) => matchesStringOrRegExp(unprefixedProp, propIdentifier))","","      if (_.isEmpty(propBlacklist)) {","        return","      }","","      if (!matchesStringOrRegExp(value, propBlacklist)) {","        return","      }","","      report({","        message: messages.rejected(prop, value),","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"22":0,"23":0,"26":0,"27":0,"30":0,"31":0,"33":0,"34":0,"37":0,"38":0,"41":0,"51":1,"52":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-property-value-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/declaration-property-value-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":55}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":89}},"10":{"start":{"line":16,"column":0},"end":{"line":49,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":48,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":21,"column":6}},"13":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"14":{"start":{"line":23,"column":6},"end":{"line":23,"column":12}},"15":{"start":{"line":26,"column":4},"end":{"line":47,"column":6}},"16":{"start":{"line":27,"column":6},"end":{"line":28,"column":26}},"17":{"start":{"line":30,"column":6},"end":{"line":30,"column":60}},"18":{"start":{"line":31,"column":6},"end":{"line":31,"column":126}},"19":{"start":{"line":31,"column":72},"end":{"line":31,"column":125}},"20":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"21":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"22":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"23":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"24":{"start":{"line":41,"column":6},"end":{"line":46,"column":8}},"25":{"start":{"line":51,"column":0},"end":{"line":51,"column":24}},"26":{"start":{"line":52,"column":0},"end":{"line":52,"column":24}},"27":{"start":{"line":53,"column":0},"end":{"line":53,"column":21}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const postcss = require(\"postcss\")","","const ruleName = \"declaration-property-value-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: (property, value) => `Unexpected value \"${value}\" for property \"${property}\"`,","})","","const rule = function (whitelist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isObject],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop,","        value = decl.value","","      const unprefixedProp = postcss.vendor.unprefixed(prop)","      const propWhitelist = _.find(whitelist, (list, propIdentifier) => matchesStringOrRegExp(unprefixedProp, propIdentifier))","","      if (_.isEmpty(propWhitelist)) {","        return","      }","","      if (matchesStringOrRegExp(value, propWhitelist)) {","        return","      }","","      report({","        message: messages.rejected(prop, value),","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"22":0,"23":0,"26":0,"27":0,"30":0,"31":0,"33":0,"34":0,"37":0,"38":0,"41":0,"51":1,"52":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/font-family-name-quotes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/font-family-name-quotes/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":1,"67":1,"68":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"isSystemFontKeyword","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":35}}},"2":{"name":"quotesRecommended","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":35}}},"3":{"name":"quotesRequired","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":32}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":13},"end":{"line":44,"column":36}}},"5":{"name":"checkFamilyName","line":76,"loc":{"start":{"line":76,"column":4},"end":{"line":76,"column":46}}},"6":{"name":"complain","line":128,"loc":{"start":{"line":128,"column":4},"end":{"line":128,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":52}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":58}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":42}},"9":{"start":{"line":13,"column":0},"end":{"line":16,"column":2}},"10":{"start":{"line":14,"column":22},"end":{"line":14,"column":58}},"11":{"start":{"line":15,"column":22},"end":{"line":15,"column":60}},"12":{"start":{"line":18,"column":0},"end":{"line":26,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":20,"column":15}},"15":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"16":{"start":{"line":23,"column":4},"end":{"line":23,"column":15}},"17":{"start":{"line":25,"column":2},"end":{"line":25,"column":14}},"18":{"start":{"line":31,"column":0},"end":{"line":33,"column":1}},"19":{"start":{"line":32,"column":2},"end":{"line":32,"column":37}},"20":{"start":{"line":37,"column":0},"end":{"line":42,"column":1}},"21":{"start":{"line":38,"column":2},"end":{"line":41,"column":4}},"22":{"start":{"line":39,"column":4},"end":{"line":40,"column":5}},"23":{"start":{"line":44,"column":0},"end":{"line":138,"column":1}},"24":{"start":{"line":45,"column":2},"end":{"line":137,"column":3}},"25":{"start":{"line":46,"column":4},"end":{"line":53,"column":6}},"26":{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},"27":{"start":{"line":55,"column":6},"end":{"line":55,"column":12}},"28":{"start":{"line":58,"column":4},"end":{"line":74,"column":6}},"29":{"start":{"line":59,"column":6},"end":{"line":59,"column":53}},"30":{"start":{"line":61,"column":6},"end":{"line":63,"column":7}},"31":{"start":{"line":62,"column":8},"end":{"line":62,"column":14}},"32":{"start":{"line":65,"column":6},"end":{"line":73,"column":8}},"33":{"start":{"line":66,"column":8},"end":{"line":66,"column":44}},"34":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"35":{"start":{"line":69,"column":10},"end":{"line":69,"column":77}},"36":{"start":{"line":72,"column":8},"end":{"line":72,"column":40}},"37":{"start":{"line":76,"column":4},"end":{"line":126,"column":5}},"38":{"start":{"line":77,"column":6},"end":{"line":79,"column":7}},"39":{"start":{"line":78,"column":8},"end":{"line":78,"column":14}},"40":{"start":{"line":80,"column":6},"end":{"line":82,"column":7}},"41":{"start":{"line":81,"column":8},"end":{"line":81,"column":14}},"42":{"start":{"line":84,"column":6},"end":{"line":84,"column":69}},"43":{"start":{"line":87,"column":6},"end":{"line":87,"column":58}},"44":{"start":{"line":91,"column":6},"end":{"line":96,"column":7}},"45":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"46":{"start":{"line":93,"column":10},"end":{"line":93,"column":66}},"47":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"48":{"start":{"line":98,"column":6},"end":{"line":98,"column":45}},"49":{"start":{"line":99,"column":6},"end":{"line":99,"column":51}},"50":{"start":{"line":101,"column":6},"end":{"line":125,"column":7}},"51":{"start":{"line":103,"column":10},"end":{"line":105,"column":11}},"52":{"start":{"line":104,"column":12},"end":{"line":104,"column":68}},"53":{"start":{"line":106,"column":10},"end":{"line":106,"column":16}},"54":{"start":{"line":109,"column":10},"end":{"line":111,"column":11}},"55":{"start":{"line":110,"column":12},"end":{"line":110,"column":68}},"56":{"start":{"line":112,"column":10},"end":{"line":114,"column":11}},"57":{"start":{"line":113,"column":12},"end":{"line":113,"column":68}},"58":{"start":{"line":115,"column":10},"end":{"line":115,"column":16}},"59":{"start":{"line":118,"column":10},"end":{"line":120,"column":11}},"60":{"start":{"line":119,"column":12},"end":{"line":119,"column":68}},"61":{"start":{"line":121,"column":10},"end":{"line":123,"column":11}},"62":{"start":{"line":122,"column":12},"end":{"line":122,"column":68}},"63":{"start":{"line":124,"column":10},"end":{"line":124,"column":16}},"64":{"start":{"line":128,"column":4},"end":{"line":136,"column":5}},"65":{"start":{"line":129,"column":6},"end":{"line":135,"column":8}},"66":{"start":{"line":140,"column":0},"end":{"line":140,"column":24}},"67":{"start":{"line":141,"column":0},"end":{"line":141,"column":24}},"68":{"start":{"line":142,"column":0},"end":{"line":142,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":12},"end":{"line":39,"column":35}},{"start":{"line":39,"column":39},"end":{"line":39,"column":84}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"5":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":6}},{"start":{"line":61,"column":6},"end":{"line":61,"column":6}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"7":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":6},"end":{"line":77,"column":6}},{"start":{"line":77,"column":6},"end":{"line":77,"column":6}}]},"8":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"9":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":24},"end":{"line":84,"column":44}},{"start":{"line":84,"column":48},"end":{"line":84,"column":69}}]},"10":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":6},"end":{"line":91,"column":6}},{"start":{"line":91,"column":6},"end":{"line":91,"column":6}}]},"11":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":10},"end":{"line":91,"column":66}},{"start":{"line":91,"column":70},"end":{"line":91,"column":97}}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]},"13":{"line":101,"type":"switch","locations":[{"start":{"line":102,"column":8},"end":{"line":106,"column":16}},{"start":{"line":108,"column":8},"end":{"line":115,"column":16}},{"start":{"line":117,"column":8},"end":{"line":124,"column":16}}]},"14":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":10},"end":{"line":103,"column":10}},{"start":{"line":103,"column":10},"end":{"line":103,"column":10}}]},"15":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":10},"end":{"line":109,"column":10}},{"start":{"line":109,"column":10},"end":{"line":109,"column":10}}]},"16":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":14},"end":{"line":109,"column":26}},{"start":{"line":109,"column":30},"end":{"line":109,"column":39}}]},"17":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":10},"end":{"line":112,"column":10}},{"start":{"line":112,"column":10},"end":{"line":112,"column":10}}]},"18":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":14},"end":{"line":112,"column":25}},{"start":{"line":112,"column":29},"end":{"line":112,"column":39}}]},"19":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":10},"end":{"line":118,"column":10}},{"start":{"line":118,"column":10},"end":{"line":118,"column":10}}]},"20":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":14},"end":{"line":118,"column":23}},{"start":{"line":118,"column":27},"end":{"line":118,"column":36}}]},"21":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":10},"end":{"line":121,"column":10}},{"start":{"line":121,"column":10},"end":{"line":121,"column":10}}]},"22":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":14},"end":{"line":121,"column":22}},{"start":{"line":121,"column":26},"end":{"line":121,"column":36}}]}},"code":["\"use strict\"","","const findFontFamily = require(\"../../utils/findFontFamily\")","const isStandardSyntaxValue = require(\"../../utils/isStandardSyntaxValue\")","const isVariable = require(\"../../utils/isVariable\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","","const ruleName = \"font-family-name-quotes\"","","const messages = ruleMessages(ruleName, {","  expected: family => `Expected quotes around \"${family}\"`,","  rejected: family => `Unexpected quotes around \"${family}\"`,","})","","function isSystemFontKeyword(font) {","  if (font.indexOf(\"-apple-\") === 0) {","    return true","  }","  if (font === \"BlinkMacSystemFont\") {","    return true","  }","  return false","}","","// \"To avoid mistakes in escaping, it is recommended to quote font family names","// that contain white space, digits, or punctuation characters other than hyphens\"","// (https://www.w3.org/TR/CSS2/fonts.html#font-family-prop)","function quotesRecommended(family) {","  return !/^[-a-zA-Z]+$/.test(family)","}","","// Quotes are required if the family is not a valid CSS identifier","// (regexes from https://mathiasbynens.be/notes/unquoted-font-family)","function quotesRequired(family) {","  return family.split(/\\s+/).some(word => {","    return (/^(-?\\d|--)/.test(word) || !/^[-_a-zA-Z0-9\\u00A0-\\u10FFFF]+$/.test(word)","    )","  })","}","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always-where-required\",","        \"always-where-recommended\",","        \"always-unless-keyword\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(/^font(-family)?$/i, decl => {","      const fontFamilies = findFontFamily(decl.value)","","      if (fontFamilies.length === 0) {","        return","      }","","      fontFamilies.forEach(fontFamilyNode => {","        let rawFamily = fontFamilyNode.value","","        if (fontFamilyNode.quote) {","          rawFamily = fontFamilyNode.quote + rawFamily + fontFamilyNode.quote","        }","","        checkFamilyName(rawFamily, decl)","      })","    })","","    function checkFamilyName(rawFamily, decl) {","      if (!isStandardSyntaxValue(rawFamily)) {","        return","      }","      if (isVariable(rawFamily)) {","        return","      }","","      const hasQuotes = rawFamily[0] === \"'\" || rawFamily[0] === \"\\\"\"","","      // Clean the family of its quotes","      const family = rawFamily.replace(/^['\"]|['\"]$/g, \"\")","","      // Disallow quotes around (case-insensitive) keywords","      // and system font keywords in all cases","      if (keywordSets.fontFamilyKeywords.has(family.toLowerCase()) || isSystemFontKeyword(family)) {","        if (hasQuotes) {","          return complain(messages.rejected(family), family, decl)","        }","        return","      }","","      const required = quotesRequired(family)","      const recommended = quotesRecommended(family)","","      switch (expectation) {","        case \"always-unless-keyword\":","          if (!hasQuotes) {","            return complain(messages.expected(family), family, decl)","          }","          return","","        case \"always-where-recommended\":","          if (!recommended && hasQuotes) {","            return complain(messages.rejected(family), family, decl)","          }","          if (recommended && !hasQuotes) {","            return complain(messages.expected(family), family, decl)","          }","          return","","        case \"always-where-required\":","          if (!required && hasQuotes) {","            return complain(messages.rejected(family), family, decl)","          }","          if (required && !hasQuotes) {","            return complain(messages.expected(family), family, decl)","          }","          return","      }","    }","","    function complain(message, family, decl) {","      report({","        result,","        ruleName,","        message,","        node: decl,","        word: family,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"15":0,"18":1,"19":0,"20":0,"22":0,"23":0,"25":0,"31":1,"32":0,"37":1,"38":0,"39":0,"44":1,"45":0,"46":0,"54":0,"55":0,"58":0,"59":0,"61":0,"62":0,"65":0,"66":0,"68":0,"69":0,"72":0,"76":1,"77":0,"78":0,"80":0,"81":0,"84":0,"87":0,"91":0,"92":0,"93":0,"95":0,"98":0,"99":0,"101":0,"103":0,"104":0,"106":0,"109":0,"110":0,"112":0,"113":0,"115":0,"118":0,"119":0,"121":0,"122":0,"124":0,"128":1,"129":0,"140":1,"141":1,"142":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/findFontFamily.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/findFontFamily.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"joinValueNodes","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":66}}},"2":{"name":"findFontFamily","line":25,"loc":{"start":{"line":25,"column":17},"end":{"line":25,"column":79}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":55}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":40}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":64}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":52}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":58}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":70}},"8":{"start":{"line":13,"column":0},"end":{"line":17,"column":1}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":74}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":18}},"11":{"start":{"line":25,"column":0},"end":{"line":99,"column":1}},"12":{"start":{"line":26,"column":2},"end":{"line":26,"column":25}},"13":{"start":{"line":28,"column":2},"end":{"line":28,"column":46}},"14":{"start":{"line":31,"column":2},"end":{"line":33,"column":3}},"15":{"start":{"line":32,"column":4},"end":{"line":32,"column":32}},"16":{"start":{"line":35,"column":2},"end":{"line":35,"column":35}},"17":{"start":{"line":36,"column":2},"end":{"line":36,"column":28}},"18":{"start":{"line":38,"column":2},"end":{"line":96,"column":4}},"19":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"20":{"start":{"line":40,"column":6},"end":{"line":40,"column":18}},"21":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"22":{"start":{"line":43,"column":6},"end":{"line":43,"column":12}},"23":{"start":{"line":46,"column":4},"end":{"line":46,"column":56}},"24":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"25":{"start":{"line":50,"column":6},"end":{"line":50,"column":12}},"26":{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},"27":{"start":{"line":55,"column":6},"end":{"line":55,"column":12}},"28":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"29":{"start":{"line":60,"column":6},"end":{"line":60,"column":12}},"30":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"31":{"start":{"line":65,"column":6},"end":{"line":65,"column":12}},"32":{"start":{"line":69,"column":4},"end":{"line":71,"column":5}},"33":{"start":{"line":70,"column":6},"end":{"line":70,"column":12}},"34":{"start":{"line":74,"column":4},"end":{"line":76,"column":5}},"35":{"start":{"line":75,"column":6},"end":{"line":75,"column":12}},"36":{"start":{"line":79,"column":4},"end":{"line":85,"column":5}},"37":{"start":{"line":80,"column":6},"end":{"line":80,"column":34}},"38":{"start":{"line":81,"column":6},"end":{"line":81,"column":39}},"39":{"start":{"line":82,"column":6},"end":{"line":82,"column":12}},"40":{"start":{"line":83,"column":11},"end":{"line":85,"column":5}},"41":{"start":{"line":84,"column":6},"end":{"line":84,"column":12}},"42":{"start":{"line":87,"column":4},"end":{"line":87,"column":32}},"43":{"start":{"line":89,"column":4},"end":{"line":95,"column":5}},"44":{"start":{"line":90,"column":6},"end":{"line":90,"column":87}},"45":{"start":{"line":91,"column":6},"end":{"line":91,"column":35}},"46":{"start":{"line":92,"column":6},"end":{"line":92,"column":28}},"47":{"start":{"line":94,"column":6},"end":{"line":94,"column":35}},"48":{"start":{"line":98,"column":2},"end":{"line":98,"column":21}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":35}},{"start":{"line":31,"column":39},"end":{"line":31,"column":109}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"6":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"7":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"8":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":61}},{"start":{"line":59,"column":65},"end":{"line":59,"column":116}}]},"9":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"10":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]},"11":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":24}},{"start":{"line":69,"column":28},"end":{"line":69,"column":58}},{"start":{"line":69,"column":62},"end":{"line":69,"column":78}},{"start":{"line":69,"column":82},"end":{"line":69,"column":121}}]},"12":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":74,"column":4}},{"start":{"line":74,"column":4},"end":{"line":74,"column":4}}]},"13":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"14":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":9},"end":{"line":79,"column":35}},{"start":{"line":79,"column":39},"end":{"line":79,"column":63}},{"start":{"line":79,"column":67},"end":{"line":79,"column":90}},{"start":{"line":79,"column":95},"end":{"line":79,"column":120}}]},"15":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":11},"end":{"line":83,"column":11}},{"start":{"line":83,"column":11},"end":{"line":83,"column":11}}]},"16":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":15},"end":{"line":83,"column":41}},{"start":{"line":83,"column":45},"end":{"line":83,"column":69}}]},"17":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]}},"code":["/* @flow */","\"use strict\"","","const keywordSets = require(\"../reference/keywordSets\")","const isNumbery = require(\"./isNumbery\")","const isStandardSyntaxValue = require(\"./isStandardSyntaxValue\")","const isValidFontSize = require(\"./isValidFontSize\")","const isVariable = require(\"./isVariable\")","const postcssValueParser = require(\"postcss-value-parser\")","","const nodeTypesToCheck = new Set([ \"word\", \"string\", \"space\", \"div\" ])","","function joinValueNodes(firstNode, secondNode, charactersBetween) {","  firstNode.value = firstNode.value + charactersBetween + secondNode.value","","  return firstNode","}","","/**"," * Get the font-families within a `font` shorthand property value."," *"," * @param {string} value"," * @return {object} Collection font-family nodes"," */","module.exports = function findFontFamily(value/*: string*/)/*: Array<Object>*/ {","  const fontFamilies = []","","  const valueNodes = postcssValueParser(value)","","  // Handle `inherit`, `initial` and etc","  if (valueNodes.nodes.length === 1 && keywordSets.basicKeywords.has(valueNodes.nodes[0].value.toLowerCase())) {","    return [valueNodes.nodes[0]]","  }","","  let needMergeNodesByValue = false","  let mergeCharacters = null","","  valueNodes.walk((valueNode, index, nodes) => {","    if (valueNode.type === \"function\") {","      return false","    }","    if (!nodeTypesToCheck.has(valueNode.type)) {","      return","    }","","    const valueLowerCase = valueNode.value.toLowerCase()","","    // Ignore non standard syntax","    if (!isStandardSyntaxValue(valueLowerCase)) {","      return","    }","","    // Ignore variables","    if (isVariable(valueLowerCase)) {","      return","    }","","    // Ignore keywords for other font parts","    if (keywordSets.fontShorthandKeywords.has(valueLowerCase) && !keywordSets.fontFamilyKeywords.has(valueLowerCase)) {","      return","    }","","    // Ignore font-sizes","    if (isValidFontSize(valueNode.value)) {","      return","    }","","    // Ignore anything come after a <font-size>/, because it's a line-height","    if (nodes[index - 1] && nodes[index - 1].value === \"/\" && nodes[index - 2] && isValidFontSize(nodes[index - 2].value)) {","      return","    }","","    // Ignore number values","    if (isNumbery(valueLowerCase)) {","      return","    }","","    // Detect when a space or comma is dividing a list of font-families, and save the joining character.","    if ((valueNode.type === \"space\" || valueNode.type === \"div\" && valueNode.value !== \",\") && fontFamilies.length !== 0) {","      needMergeNodesByValue = true","      mergeCharacters = valueNode.value","      return","    } else if (valueNode.type === \"space\" || valueNode.type === \"div\") {","      return","    }","","    const fontFamily = valueNode","","    if (needMergeNodesByValue) {","      joinValueNodes(fontFamilies[fontFamilies.length - 1], valueNode, mergeCharacters)","      needMergeNodesByValue = false","      mergeCharacters = null","    } else {","      fontFamilies.push(fontFamily)","    }","  })","","  return fontFamilies","}",""],"l":{"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"16":0,"25":1,"26":0,"28":0,"31":0,"32":0,"35":0,"36":0,"38":0,"39":0,"40":0,"42":0,"43":0,"46":0,"49":0,"50":0,"54":0,"55":0,"59":0,"60":0,"64":0,"65":0,"69":0,"70":0,"74":0,"75":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"87":0,"89":0,"90":0,"91":0,"92":0,"94":0,"98":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isNumbery.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isNumbery.js","s":{"1":1,"2":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":34}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":10,"column":1}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":60}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":9},"end":{"line":9,"column":34}},{"start":{"line":9,"column":38},"end":{"line":9,"column":60}}]}},"code":["// Too weird for Flow","\"use strict\"","","/**"," * Check whether it's a number or a number-like string:"," * i.e. when coerced to a number it == itself."," */","module.exports = function (value) {","  return value.trim().length !== 0 && Number(value) == value","}",""],"l":{"8":1,"9":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isValidFontSize.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isValidFontSize.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":58}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":55}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"3":{"start":{"line":10,"column":0},"end":{"line":34,"column":1}},"4":{"start":{"line":11,"column":2},"end":{"line":13,"column":3}},"5":{"start":{"line":12,"column":4},"end":{"line":12,"column":16}},"6":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"7":{"start":{"line":16,"column":4},"end":{"line":16,"column":15}},"8":{"start":{"line":19,"column":2},"end":{"line":19,"column":43}},"9":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"10":{"start":{"line":21,"column":4},"end":{"line":21,"column":16}},"11":{"start":{"line":24,"column":2},"end":{"line":24,"column":30}},"12":{"start":{"line":26,"column":2},"end":{"line":28,"column":3}},"13":{"start":{"line":27,"column":4},"end":{"line":27,"column":15}},"14":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"15":{"start":{"line":30,"column":4},"end":{"line":30,"column":15}},"16":{"start":{"line":33,"column":2},"end":{"line":33,"column":14}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":2},"end":{"line":11,"column":2}},{"start":{"line":11,"column":2},"end":{"line":11,"column":2}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"4":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"5":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const keywordSets = require(\"../reference/keywordSets\")","const valueParser = require(\"postcss-value-parser\")","","/**"," * Check if a word is a font-size value."," */","module.exports = function (word/*: string*/)/*: boolean*/ {","  if (!word) {","    return false","  }","","  if (keywordSets.fontSizeKeywords.has(word)) {","    return true","  }","","  const numberUnit = valueParser.unit(word)","  if (!numberUnit) {","    return false","  }","","  const unit = numberUnit.unit","","  if (unit === \"%\") {","    return true","  }","  if (keywordSets.lengthUnits.has(unit.toLowerCase())) {","    return true","  }","","  return false","}",""],"l":{"4":1,"5":1,"10":1,"11":0,"12":0,"15":0,"16":0,"19":0,"20":0,"21":0,"24":0,"26":0,"27":0,"29":0,"30":0,"33":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isVariable.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isVariable.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":58}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":9,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":50}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a word is a variable i.e var(--custom-property)."," */","module.exports = function (word/*: string*/)/*: boolean*/ {","  return word.toLowerCase().slice(0, 4) === \"var(\"","}",""],"l":{"7":1,"8":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/font-family-no-duplicate-names/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/font-family-no-duplicate-names/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":1,"42":1,"43":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":40}}},"2":{"name":"complain","line":69,"loc":{"start":{"line":69,"column":4},"end":{"line":69,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":60}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":20},"end":{"line":15,"column":55}},"12":{"start":{"line":18,"column":0},"end":{"line":18,"column":111}},"13":{"start":{"line":18,"column":36},"end":{"line":18,"column":111}},"14":{"start":{"line":20,"column":0},"end":{"line":79,"column":1}},"15":{"start":{"line":21,"column":2},"end":{"line":78,"column":3}},"16":{"start":{"line":22,"column":4},"end":{"line":28,"column":6}},"17":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"18":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"19":{"start":{"line":33,"column":4},"end":{"line":67,"column":6}},"20":{"start":{"line":34,"column":6},"end":{"line":34,"column":32}},"21":{"start":{"line":35,"column":6},"end":{"line":35,"column":35}},"22":{"start":{"line":37,"column":6},"end":{"line":37,"column":53}},"23":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"24":{"start":{"line":40,"column":8},"end":{"line":40,"column":14}},"25":{"start":{"line":43,"column":6},"end":{"line":66,"column":8}},"26":{"start":{"line":44,"column":8},"end":{"line":44,"column":50}},"27":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"28":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"29":{"start":{"line":50,"column":8},"end":{"line":58,"column":9}},"30":{"start":{"line":51,"column":10},"end":{"line":54,"column":11}},"31":{"start":{"line":52,"column":12},"end":{"line":52,"column":111}},"32":{"start":{"line":53,"column":12},"end":{"line":53,"column":18}},"33":{"start":{"line":56,"column":10},"end":{"line":56,"column":30}},"34":{"start":{"line":57,"column":10},"end":{"line":57,"column":16}},"35":{"start":{"line":60,"column":8},"end":{"line":63,"column":9}},"36":{"start":{"line":61,"column":10},"end":{"line":61,"column":109}},"37":{"start":{"line":62,"column":10},"end":{"line":62,"column":16}},"38":{"start":{"line":65,"column":8},"end":{"line":65,"column":31}},"39":{"start":{"line":69,"column":4},"end":{"line":77,"column":5}},"40":{"start":{"line":70,"column":6},"end":{"line":76,"column":8}},"41":{"start":{"line":81,"column":0},"end":{"line":81,"column":24}},"42":{"start":{"line":82,"column":0},"end":{"line":82,"column":24}},"43":{"start":{"line":83,"column":0},"end":{"line":83,"column":21}}},"branchMap":{"1":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":36},"end":{"line":18,"column":47}},{"start":{"line":18,"column":51},"end":{"line":18,"column":111}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":10},"end":{"line":51,"column":10}},{"start":{"line":51,"column":10},"end":{"line":51,"column":10}}]},"7":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const findFontFamily = require(\"../../utils/findFontFamily\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","const _ = require(\"lodash\")","const optionsMatches = require(\"../../utils/optionsMatches\")","","const ruleName = \"font-family-no-duplicate-names\"","","const messages = ruleMessages(ruleName, {","  rejected: name => `Unexpected duplicate name ${name}`,","})","","const isFamilyNameKeyword = node => !node.quote && keywordSets.fontFamilyKeywords.has(node.value.toLowerCase())","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignoreFontFamilyNames: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(/^font(-family)?$/i, decl => {","      const keywords = new Set()","      const familyNames = new Set()","","      const fontFamilies = findFontFamily(decl.value)","","      if (fontFamilies.length === 0) {","        return","      }","","      fontFamilies.forEach(fontFamilyNode => {","        const family = fontFamilyNode.value.trim()","","        if (optionsMatches(options, \"ignoreFontFamilyNames\", fontFamilyNode.value.trim())) {","          return","        }","","        if (isFamilyNameKeyword(fontFamilyNode)) {","          if (keywords.has(family.toLowerCase())) {","            complain(messages.rejected(family), declarationValueIndex(decl) + fontFamilyNode.sourceIndex, decl)","            return","          }","","          keywords.add(family)","          return","        }","","        if (familyNames.has(family)) {","          complain(messages.rejected(family), declarationValueIndex(decl) + fontFamilyNode.sourceIndex, decl)","          return","        }","","        familyNames.add(family)","      })","    })","","    function complain(message, index, decl) {","      report({","        result,","        ruleName,","        message,","        node: decl,","        index,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"20":1,"21":0,"22":0,"29":0,"30":0,"33":0,"34":0,"35":0,"37":0,"39":0,"40":0,"43":0,"44":0,"46":0,"47":0,"50":0,"51":0,"52":0,"53":0,"56":0,"57":0,"60":0,"61":0,"62":0,"65":0,"69":1,"70":0,"81":1,"82":1,"83":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/font-weight-notation/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/font-weight-notation/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":1,"17":1,"18":1,"19":1,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":1,"61":1,"62":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":13},"end":{"line":30,"column":45}}},"2":{"name":"checkFont","line":59,"loc":{"start":{"line":59,"column":4},"end":{"line":59,"column":29}}},"3":{"name":"checkWeight","line":74,"loc":{"start":{"line":74,"column":4},"end":{"line":74,"column":44}}},"4":{"name":"complain","line":110,"loc":{"start":{"line":110,"column":6},"end":{"line":110,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":52}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":60}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":58}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":27}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":34}},"12":{"start":{"line":15,"column":0},"end":{"line":15,"column":39}},"13":{"start":{"line":17,"column":0},"end":{"line":20,"column":2}},"14":{"start":{"line":18,"column":20},"end":{"line":18,"column":59}},"15":{"start":{"line":19,"column":24},"end":{"line":19,"column":71}},"16":{"start":{"line":22,"column":0},"end":{"line":22,"column":33}},"17":{"start":{"line":23,"column":0},"end":{"line":23,"column":33}},"18":{"start":{"line":24,"column":0},"end":{"line":24,"column":31}},"19":{"start":{"line":25,"column":0},"end":{"line":28,"column":1}},"20":{"start":{"line":30,"column":0},"end":{"line":121,"column":1}},"21":{"start":{"line":31,"column":2},"end":{"line":120,"column":3}},"22":{"start":{"line":32,"column":4},"end":{"line":44,"column":6}},"23":{"start":{"line":45,"column":4},"end":{"line":47,"column":5}},"24":{"start":{"line":46,"column":6},"end":{"line":46,"column":12}},"25":{"start":{"line":49,"column":4},"end":{"line":57,"column":6}},"26":{"start":{"line":50,"column":6},"end":{"line":52,"column":7}},"27":{"start":{"line":51,"column":8},"end":{"line":51,"column":37}},"28":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"29":{"start":{"line":55,"column":8},"end":{"line":55,"column":23}},"30":{"start":{"line":59,"column":4},"end":{"line":72,"column":5}},"31":{"start":{"line":60,"column":6},"end":{"line":60,"column":54}},"32":{"start":{"line":64,"column":6},"end":{"line":64,"column":60}},"33":{"start":{"line":66,"column":6},"end":{"line":71,"column":7}},"34":{"start":{"line":67,"column":8},"end":{"line":70,"column":9}},"35":{"start":{"line":68,"column":10},"end":{"line":68,"column":34}},"36":{"start":{"line":69,"column":10},"end":{"line":69,"column":16}},"37":{"start":{"line":74,"column":4},"end":{"line":119,"column":5}},"38":{"start":{"line":75,"column":6},"end":{"line":77,"column":7}},"39":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"40":{"start":{"line":78,"column":6},"end":{"line":80,"column":7}},"41":{"start":{"line":79,"column":8},"end":{"line":79,"column":14}},"42":{"start":{"line":81,"column":6},"end":{"line":83,"column":7}},"43":{"start":{"line":82,"column":8},"end":{"line":82,"column":14}},"44":{"start":{"line":85,"column":6},"end":{"line":87,"column":7}},"45":{"start":{"line":86,"column":8},"end":{"line":86,"column":14}},"46":{"start":{"line":89,"column":6},"end":{"line":89,"column":63}},"47":{"start":{"line":91,"column":6},"end":{"line":95,"column":7}},"48":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"49":{"start":{"line":93,"column":10},"end":{"line":93,"column":55}},"50":{"start":{"line":97,"column":6},"end":{"line":108,"column":7}},"51":{"start":{"line":98,"column":8},"end":{"line":103,"column":9}},"52":{"start":{"line":99,"column":10},"end":{"line":101,"column":11}},"53":{"start":{"line":100,"column":12},"end":{"line":100,"column":48}},"54":{"start":{"line":102,"column":10},"end":{"line":102,"column":16}},"55":{"start":{"line":104,"column":8},"end":{"line":106,"column":9}},"56":{"start":{"line":105,"column":10},"end":{"line":105,"column":61}},"57":{"start":{"line":107,"column":8},"end":{"line":107,"column":14}},"58":{"start":{"line":110,"column":6},"end":{"line":118,"column":7}},"59":{"start":{"line":111,"column":8},"end":{"line":117,"column":10}},"60":{"start":{"line":123,"column":0},"end":{"line":123,"column":24}},"61":{"start":{"line":124,"column":0},"end":{"line":124,"column":24}},"62":{"start":{"line":125,"column":0},"end":{"line":125,"column":21}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"5":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":12},"end":{"line":67,"column":50}},{"start":{"line":67,"column":54},"end":{"line":67,"column":75}},{"start":{"line":67,"column":79},"end":{"line":67,"column":95}},{"start":{"line":67,"column":99},"end":{"line":67,"column":137}},{"start":{"line":67,"column":141},"end":{"line":67,"column":196}}]},"6":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":6}},{"start":{"line":75,"column":6},"end":{"line":75,"column":6}}]},"7":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":78,"column":6}},{"start":{"line":78,"column":6},"end":{"line":78,"column":6}}]},"8":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"9":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":10},"end":{"line":81,"column":55}},{"start":{"line":81,"column":59},"end":{"line":81,"column":104}}]},"10":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":6},"end":{"line":85,"column":6}},{"start":{"line":85,"column":6},"end":{"line":85,"column":6}}]},"11":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":10},"end":{"line":85,"column":55}},{"start":{"line":85,"column":59},"end":{"line":85,"column":128}}]},"12":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":6},"end":{"line":91,"column":6}},{"start":{"line":91,"column":6},"end":{"line":91,"column":6}}]},"13":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]},"14":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":6},"end":{"line":97,"column":6}},{"start":{"line":97,"column":6},"end":{"line":97,"column":6}}]},"15":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":8}},{"start":{"line":98,"column":8},"end":{"line":98,"column":8}}]},"16":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":10},"end":{"line":99,"column":10}},{"start":{"line":99,"column":10},"end":{"line":99,"column":10}}]},"17":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":8},"end":{"line":104,"column":8}},{"start":{"line":104,"column":8},"end":{"line":104,"column":8}}]},"18":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":74}},{"start":{"line":104,"column":78},"end":{"line":104,"column":122}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const isNumbery = require(\"../../utils/isNumbery\")","const isStandardSyntaxValue = require(\"../../utils/isStandardSyntaxValue\")","const isVariable = require(\"../../utils/isVariable\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","","const ruleName = \"font-weight-notation\"","","const messages = ruleMessages(ruleName, {","  expected: type => `Expected ${type} font-weight notation`,","  invalidNamed: name => `Unexpected invalid font-weight name \"${name}\"`,","})","","const INHERIT_KEYWORD = \"inherit\"","const INITIAL_KEYWORD = \"initial\"","const NORMAL_KEYWORD = \"normal\"","const WEIGHTS_WITH_KEYWORD_EQUIVALENTS = [","  \"400\",","  \"700\",","]","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"numeric\",","        \"named-where-possible\",","      ],","    }, {","      actual: options,","      possible: {","        ignore: [\"relative\"],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (decl.prop.toLowerCase() === \"font-weight\") {","        checkWeight(decl.value, decl)","      }","","      if (decl.prop.toLowerCase() === \"font\") {","        checkFont(decl)","      }","    })","","    function checkFont(decl) {","      const valueList = postcss.list.space(decl.value)","      // We do not need to more carefully distinguish font-weight","      // numbers from unitless line-heights because line-heights in","      // `font` values need to be part of a font-size/line-height pair","      const hasNumericFontWeight = valueList.some(isNumbery)","","      for (const value of postcss.list.space(decl.value)) {","        if (value.toLowerCase() === NORMAL_KEYWORD && !hasNumericFontWeight || isNumbery(value) || value.toLowerCase() !== NORMAL_KEYWORD && keywordSets.fontWeightKeywords.has(value.toLowerCase())) {","          checkWeight(value, decl)","          return","        }","      }","    }","","    function checkWeight(weightValue, decl) {","      if (!isStandardSyntaxValue(weightValue)) {","        return","      }","      if (isVariable(weightValue)) {","        return","      }","      if (weightValue.toLowerCase() === INHERIT_KEYWORD || weightValue.toLowerCase() === INITIAL_KEYWORD) {","        return","      }","","      if (optionsMatches(options, \"ignore\", \"relative\") && keywordSets.fontWeightRelativeKeywords.has(weightValue.toLowerCase())) {","        return","      }","","      const weightValueOffset = decl.value.indexOf(weightValue)","","      if (expectation === \"numeric\") {","        if (!isNumbery(weightValue)) {","          return complain(messages.expected(\"numeric\"))","        }","      }","","      if (expectation === \"named-where-possible\") {","        if (isNumbery(weightValue)) {","          if (_.includes(WEIGHTS_WITH_KEYWORD_EQUIVALENTS, weightValue)) {","            complain(messages.expected(\"named\"))","          }","          return","        }","        if (!keywordSets.fontWeightKeywords.has(weightValue.toLowerCase()) && weightValue.toLowerCase() !== NORMAL_KEYWORD) {","          return complain(messages.invalidNamed(weightValue))","        }","        return","      }","","      function complain(message) {","        report({","          ruleName,","          result,","          message,","          node: decl,","          index: declarationValueIndex(decl) + weightValueOffset,","        })","      }","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"15":1,"17":1,"18":0,"19":0,"22":1,"23":1,"24":1,"25":1,"30":1,"31":0,"32":0,"45":0,"46":0,"49":0,"50":0,"51":0,"54":0,"55":0,"59":1,"60":0,"64":0,"66":0,"67":0,"68":0,"69":0,"74":1,"75":0,"76":0,"78":0,"79":0,"81":0,"82":0,"85":0,"86":0,"89":0,"91":0,"92":0,"93":0,"97":0,"98":0,"99":0,"100":0,"102":0,"104":0,"105":0,"107":0,"110":1,"111":0,"123":1,"124":1,"125":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":1,"30":1,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":34}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":30},"end":{"line":31,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":51}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"11":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"12":{"start":{"line":16,"column":20},"end":{"line":16,"column":51}},"13":{"start":{"line":19,"column":0},"end":{"line":52,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":51,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":24,"column":6}},"16":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"17":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"18":{"start":{"line":28,"column":4},"end":{"line":50,"column":6}},"19":{"start":{"line":29,"column":6},"end":{"line":29,"column":30}},"20":{"start":{"line":31,"column":6},"end":{"line":49,"column":8}},"21":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"22":{"start":{"line":33,"column":10},"end":{"line":33,"column":16}},"23":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"24":{"start":{"line":36,"column":10},"end":{"line":36,"column":16}},"25":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"26":{"start":{"line":39,"column":10},"end":{"line":39,"column":16}},"27":{"start":{"line":42,"column":8},"end":{"line":48,"column":10}},"28":{"start":{"line":54,"column":0},"end":{"line":54,"column":30}},"29":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"30":{"start":{"line":57,"column":0},"end":{"line":57,"column":24}},"31":{"start":{"line":58,"column":0},"end":{"line":58,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]},"4":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const isStandardSyntaxFunction = require(\"../../utils/isStandardSyntaxFunction\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const valueParser = require(\"postcss-value-parser\")","const postcss = require(\"postcss\")","","const ruleName = \"function-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: name => `Unexpected function \"${name}\"`,","})","","const rule = function (blacklist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","    root.walkDecls(decl => {","      const value = decl.value","","      valueParser(value).walk(function (node) {","        if (node.type !== \"function\") {","          return","        }","        if (!isStandardSyntaxFunction(node)) {","          return","        }","        if (!matchesStringOrRegExp(postcss.vendor.unprefixed(node.value).toLowerCase(), blacklist)) {","          return","        }","","        report({","          message: messages.rejected(node.value),","          node: decl,","          index: declarationValueIndex(decl) + node.sourceIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"16":0,"19":1,"20":0,"21":0,"25":0,"26":0,"28":0,"29":0,"31":0,"32":0,"33":0,"35":0,"36":0,"38":0,"39":0,"42":0,"54":1,"56":1,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-calc-no-unspaced-operator/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-calc-no-unspaced-operator/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":1,"63":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":31}}},"2":{"name":"complain","line":26,"loc":{"start":{"line":26,"column":4},"end":{"line":26,"column":44}}},"3":{"name":"checkSymbol","line":46,"loc":{"start":{"line":46,"column":8},"end":{"line":46,"column":37}}},"4":{"name":"blurVariables","line":100,"loc":{"start":{"line":100,"column":0},"end":{"line":100,"column":31}}},"5":{"name":"newlineBefore","line":104,"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":47}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":53}},"9":{"start":{"line":13,"column":0},"end":{"line":17,"column":2}},"10":{"start":{"line":14,"column":30},"end":{"line":14,"column":83}},"11":{"start":{"line":15,"column":29},"end":{"line":15,"column":81}},"12":{"start":{"line":16,"column":42},"end":{"line":16,"column":90}},"13":{"start":{"line":19,"column":0},"end":{"line":98,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":97,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":21,"column":70}},"16":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"17":{"start":{"line":23,"column":6},"end":{"line":23,"column":12}},"18":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"19":{"start":{"line":27,"column":6},"end":{"line":27,"column":56}},"20":{"start":{"line":30,"column":4},"end":{"line":96,"column":6}},"21":{"start":{"line":31,"column":6},"end":{"line":95,"column":8}},"22":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"23":{"start":{"line":33,"column":10},"end":{"line":33,"column":16}},"24":{"start":{"line":36,"column":8},"end":{"line":36,"column":80}},"25":{"start":{"line":37,"column":8},"end":{"line":37,"column":46}},"26":{"start":{"line":38,"column":8},"end":{"line":38,"column":129}},"27":{"start":{"line":39,"column":8},"end":{"line":39,"column":55}},"28":{"start":{"line":41,"column":8},"end":{"line":41,"column":24}},"29":{"start":{"line":42,"column":8},"end":{"line":42,"column":24}},"30":{"start":{"line":43,"column":8},"end":{"line":43,"column":24}},"31":{"start":{"line":44,"column":8},"end":{"line":44,"column":24}},"32":{"start":{"line":46,"column":8},"end":{"line":94,"column":9}},"33":{"start":{"line":47,"column":10},"end":{"line":51,"column":11}},"34":{"start":{"line":53,"column":10},"end":{"line":93,"column":12}},"35":{"start":{"line":54,"column":12},"end":{"line":54,"column":42}},"36":{"start":{"line":60,"column":12},"end":{"line":81,"column":13}},"37":{"start":{"line":61,"column":14},"end":{"line":61,"column":70}},"38":{"start":{"line":64,"column":14},"end":{"line":66,"column":15}},"39":{"start":{"line":65,"column":16},"end":{"line":65,"column":22}},"40":{"start":{"line":69,"column":14},"end":{"line":71,"column":15}},"41":{"start":{"line":70,"column":16},"end":{"line":70,"column":22}},"42":{"start":{"line":74,"column":14},"end":{"line":76,"column":15}},"43":{"start":{"line":75,"column":16},"end":{"line":75,"column":22}},"44":{"start":{"line":79,"column":14},"end":{"line":79,"column":98}},"45":{"start":{"line":80,"column":14},"end":{"line":80,"column":20}},"46":{"start":{"line":83,"column":12},"end":{"line":83,"column":138}},"47":{"start":{"line":84,"column":12},"end":{"line":86,"column":13}},"48":{"start":{"line":85,"column":14},"end":{"line":85,"column":86}},"49":{"start":{"line":88,"column":12},"end":{"line":88,"column":177}},"50":{"start":{"line":90,"column":12},"end":{"line":92,"column":13}},"51":{"start":{"line":91,"column":14},"end":{"line":91,"column":85}},"52":{"start":{"line":100,"column":0},"end":{"line":102,"column":1}},"53":{"start":{"line":101,"column":2},"end":{"line":101,"column":53}},"54":{"start":{"line":104,"column":0},"end":{"line":111,"column":1}},"55":{"start":{"line":105,"column":2},"end":{"line":105,"column":24}},"56":{"start":{"line":106,"column":2},"end":{"line":109,"column":3}},"57":{"start":{"line":107,"column":4},"end":{"line":107,"column":40}},"58":{"start":{"line":107,"column":29},"end":{"line":107,"column":40}},"59":{"start":{"line":108,"column":4},"end":{"line":108,"column":11}},"60":{"start":{"line":110,"column":2},"end":{"line":110,"column":14}},"61":{"start":{"line":113,"column":0},"end":{"line":113,"column":24}},"62":{"start":{"line":114,"column":0},"end":{"line":114,"column":24}},"63":{"start":{"line":115,"column":0},"end":{"line":115,"column":21}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":36}},{"start":{"line":32,"column":40},"end":{"line":32,"column":75}}]},"4":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":79},"end":{"line":38,"column":96}},{"start":{"line":38,"column":100},"end":{"line":38,"column":102}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":12}},{"start":{"line":60,"column":12},"end":{"line":60,"column":12}}]},"6":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":17},"end":{"line":60,"column":31}},{"start":{"line":60,"column":35},"end":{"line":60,"column":49}},{"start":{"line":60,"column":54},"end":{"line":60,"column":92}}]},"7":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":14},"end":{"line":64,"column":14}},{"start":{"line":64,"column":14},"end":{"line":64,"column":14}}]},"8":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":14},"end":{"line":69,"column":14}},{"start":{"line":69,"column":14},"end":{"line":69,"column":14}}]},"9":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":14},"end":{"line":74,"column":14}},{"start":{"line":74,"column":14},"end":{"line":74,"column":14}}]},"10":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":29},"end":{"line":83,"column":58}},{"start":{"line":83,"column":62},"end":{"line":83,"column":98}},{"start":{"line":83,"column":102},"end":{"line":83,"column":138}}]},"11":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":12}},{"start":{"line":84,"column":12},"end":{"line":84,"column":12}}]},"12":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":28},"end":{"line":88,"column":57}},{"start":{"line":88,"column":61},"end":{"line":88,"column":97}},{"start":{"line":88,"column":101},"end":{"line":88,"column":131}},{"start":{"line":88,"column":135},"end":{"line":88,"column":177}}]},"13":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":12},"end":{"line":90,"column":12}},{"start":{"line":90,"column":12},"end":{"line":90,"column":12}}]},"14":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":9},"end":{"line":106,"column":14}},{"start":{"line":106,"column":18},"end":{"line":106,"column":42}}]},"15":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]}},"code":["\"use strict\"","","const isWhitespace = require(\"../../utils/isWhitespace\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const balancedMatch = require(\"balanced-match\")","const styleSearch = require(\"style-search\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"function-calc-no-unspaced-operator\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: operator => `Expected single space before \"${operator}\" operator`,","  expectedAfter: operator => `Expected single space after \"${operator}\" operator`,","  expectedOperatorBeforeSign: operator => `Expected an operator before sign \"${operator}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    function complain(message, node, index) {","      report({ message, node, index, result, ruleName })","    }","","    root.walkDecls(decl => {","      valueParser(decl.value).walk(node => {","        if (node.type !== \"function\" || node.value.toLowerCase() !== \"calc\") {","          return","        }","","        const parensMatch = balancedMatch(\"(\", \")\", valueParser.stringify(node))","        const rawExpression = parensMatch.body","        const expressionIndex = decl.source.start.column + decl.prop.length + (decl.raws.between || \"\").length + node.sourceIndex","        const expression = blurVariables(rawExpression)","","        checkSymbol(\"+\")","        checkSymbol(\"-\")","        checkSymbol(\"*\")","        checkSymbol(\"/\")","","        function checkSymbol(symbol) {","          const styleSearchOptions = {","            source: expression,","            target: symbol,","            functionArguments: \"skip\",","          }","","          styleSearch(styleSearchOptions, match => {","            const index = match.startIndex","","            // Deal with signs.","            // (@ and $ are considered \"digits\" here to allow for variable syntaxes","            // that permit signs in front of variables, e.g. `-$number`)","            // As is \".\" to deal with fractional numbers without a leading zero","            if ((symbol === \"+\" || symbol === \"-\") && /[\\d@\\$.]/.test(expression[index + 1])) {","              const expressionBeforeSign = expression.substr(0, index)","","              // Ignore signs that directly follow a opening bracket","              if (expressionBeforeSign[expressionBeforeSign.length - 1] === \"(\") {","                return","              }","","              // Ignore signs at the beginning of the expression","              if (/^\\s*$/.test(expressionBeforeSign)) {","                return","              }","","              // Otherwise, ensure that there is a real operator preceeding them","              if (/[\\*/+-]\\s*$/.test(expressionBeforeSign)) {","                return","              }","","              // And if not, complain","              complain(messages.expectedOperatorBeforeSign(symbol), decl, expressionIndex + index)","              return","            }","","            const beforeOk = expression[index - 1] === \" \" && !isWhitespace(expression[index - 2]) || newlineBefore(expression, index - 1)","            if (!beforeOk) {","              complain(messages.expectedBefore(symbol), decl, expressionIndex + index)","            }","","            const afterOk = expression[index + 1] === \" \" && !isWhitespace(expression[index + 2]) || expression[index + 1] === \"\\n\" || expression.substr(index + 1, 2) === \"\\r\\n\"","","            if (!afterOk) {","              complain(messages.expectedAfter(symbol), decl, expressionIndex + index)","            }","          })","        }","      })","    })","  }","}","","function blurVariables(source) {","  return source.replace(/[\\$@][^\\)\\s]+|#{.+?}/g, \"0\")","}","","function newlineBefore(str, startIndex) {","  let index = startIndex","  while (index && isWhitespace(str[index])) {","    if (str[index] === \"\\n\") return true","    index--","  }","  return false","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"15":0,"16":0,"19":1,"20":0,"21":0,"22":0,"23":0,"26":1,"27":0,"30":0,"31":0,"32":0,"33":0,"36":0,"37":0,"38":0,"39":0,"41":0,"42":0,"43":0,"44":0,"46":1,"47":0,"53":0,"54":0,"60":0,"61":0,"64":0,"65":0,"69":0,"70":0,"74":0,"75":0,"79":0,"80":0,"83":0,"84":0,"85":0,"88":0,"90":0,"91":0,"100":1,"101":0,"104":1,"105":0,"106":0,"107":0,"108":0,"110":0,"113":1,"114":1,"115":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-comma-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-comma-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":73}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":47}},"6":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":53}},"8":{"start":{"line":12,"column":32},"end":{"line":12,"column":87}},"9":{"start":{"line":13,"column":32},"end":{"line":13,"column":92}},"10":{"start":{"line":16,"column":0},"end":{"line":38,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":69}},"12":{"start":{"line":18,"column":2},"end":{"line":37,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":26,"column":6}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":31,"column":4},"end":{"line":36,"column":6}},"17":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":24}},"19":{"start":{"line":42,"column":0},"end":{"line":42,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const functionCommaSpaceChecker = require(\"../functionCommaSpaceChecker\")","","const ruleName = \"function-comma-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\",\\\"\",","  expectedAfterMultiLine: () => \"Expected newline after \\\",\\\" in a multi-line function\",","  rejectedAfterMultiLine: () => \"Unexpected whitespace after \\\",\\\" in a multi-line function\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    functionCommaSpaceChecker({","      root,","      result,","      locationChecker: checker.afterOneOnly,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"16":1,"17":0,"18":0,"19":0,"27":0,"28":0,"31":0,"40":1,"41":1,"42":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/functionCommaSpaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/functionCommaSpaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":71}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":77}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"7":{"start":{"line":10,"column":0},"end":{"line":62,"column":1}},"8":{"start":{"line":11,"column":2},"end":{"line":61,"column":4}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":63}},"10":{"start":{"line":14,"column":4},"end":{"line":60,"column":6}},"11":{"start":{"line":15,"column":6},"end":{"line":17,"column":7}},"12":{"start":{"line":16,"column":8},"end":{"line":16,"column":14}},"13":{"start":{"line":19,"column":6},"end":{"line":21,"column":7}},"14":{"start":{"line":20,"column":8},"end":{"line":20,"column":14}},"15":{"start":{"line":24,"column":6},"end":{"line":26,"column":7}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":14}},"17":{"start":{"line":28,"column":6},"end":{"line":38,"column":10}},"18":{"start":{"line":29,"column":8},"end":{"line":29,"column":53}},"19":{"start":{"line":31,"column":8},"end":{"line":31,"column":57}},"20":{"start":{"line":33,"column":8},"end":{"line":33,"column":51}},"21":{"start":{"line":36,"column":8},"end":{"line":36,"column":87}},"22":{"start":{"line":37,"column":8},"end":{"line":37,"column":21}},"23":{"start":{"line":40,"column":6},"end":{"line":59,"column":8}},"24":{"start":{"line":45,"column":8},"end":{"line":58,"column":10}},"25":{"start":{"line":49,"column":12},"end":{"line":49,"column":125}},"26":{"start":{"line":50,"column":12},"end":{"line":56,"column":14}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":6},"end":{"line":15,"column":6}},{"start":{"line":15,"column":6},"end":{"line":15,"column":6}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":6},"end":{"line":19,"column":6}},{"start":{"line":19,"column":6},"end":{"line":19,"column":6}}]},"3":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":6}},{"start":{"line":24,"column":6},"end":{"line":24,"column":6}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../utils/declarationValueIndex\")","const isStandardSyntaxFunction = require(\"../utils/isStandardSyntaxFunction\")","const report = require(\"../utils/report\")","const _ = require(\"lodash\")","const styleSearch = require(\"style-search\")","const valueParser = require(\"postcss-value-parser\")","","module.exports = function (opts) {","  opts.root.walkDecls(decl => {","    const declValue = _.get(decl, \"raws.value.raw\", decl.value)","","    valueParser(declValue).walk(valueNode => {","      if (valueNode.type !== \"function\") {","        return","      }","","      if (!isStandardSyntaxFunction(valueNode)) {","        return","      }","","      // Ignore `url()` arguments, which may contain data URIs or other funky stuff","      if (valueNode.value.toLowerCase() === \"url\") {","        return","      }","","      const functionArguments = (() => {","        let result = valueParser.stringify(valueNode)","        // Remove function name and opening paren","        result = result.slice(valueNode.value.length + 1)","        // Remove closing paren","        result = result.slice(0, result.length - 1)","        // 1. Remove comments including preceeding whitespace (when only succeeded by whitespace)","        // 2. Remove all other comments, but leave adjacent whitespace intact","        result = result.replace(/(\\ *\\/(\\*.*\\*\\/(?!\\S)|\\/.*)|(\\/(\\*.*\\*\\/|\\/.*)))/, \"\")","        return result","      })()","","      styleSearch({","        source: functionArguments,","        target: \",\",","        functionArguments: \"skip\",","      }, match => {","        opts.locationChecker({","          source: functionArguments,","          index: match.startIndex,","          err: message => {","            const index = declarationValueIndex(decl) + valueNode.value.length + 1 + valueNode.sourceIndex + match.startIndex","            report({","              index,","              message,","              node: decl,","              result: opts.result,","              ruleName: opts.checkedRuleName,","            })","          },","        })","      })","    })","  })","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"11":0,"12":0,"14":0,"15":0,"16":0,"19":0,"20":0,"24":0,"25":0,"28":0,"29":0,"31":0,"33":0,"36":0,"37":0,"40":0,"45":0,"49":0,"50":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-comma-newline-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-comma-newline-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":73}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"6":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":55}},"8":{"start":{"line":12,"column":33},"end":{"line":12,"column":89}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":94}},"10":{"start":{"line":16,"column":0},"end":{"line":38,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":69}},"12":{"start":{"line":18,"column":2},"end":{"line":37,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":26,"column":6}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":31,"column":4},"end":{"line":36,"column":6}},"17":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":24}},"19":{"start":{"line":42,"column":0},"end":{"line":42,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const functionCommaSpaceChecker = require(\"../functionCommaSpaceChecker\")","","const ruleName = \"function-comma-newline-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected newline before \\\",\\\"\",","  expectedBeforeMultiLine: () => \"Expected newline before \\\",\\\" in a multi-line function\",","  rejectedBeforeMultiLine: () => \"Unexpected whitespace before \\\",\\\" in a multi-line function\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    functionCommaSpaceChecker({","      root,","      result,","      locationChecker: checker.beforeAllowingIndentation,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"16":1,"17":0,"18":0,"19":0,"27":0,"28":0,"31":0,"40":1,"41":1,"42":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-comma-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-comma-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":73}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":45}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":58}},"8":{"start":{"line":12,"column":23},"end":{"line":12,"column":58}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":94}},"10":{"start":{"line":14,"column":33},"end":{"line":14,"column":94}},"11":{"start":{"line":17,"column":0},"end":{"line":40,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":33,"column":4},"end":{"line":38,"column":6}},"18":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const functionCommaSpaceChecker = require(\"../functionCommaSpaceChecker\")","","const ruleName = \"function-comma-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\",\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\",\\\"\",","  expectedAfterSingleLine: () => \"Expected single space after \\\",\\\" in a single-line function\",","  rejectedAfterSingleLine: () => \"Unexpected whitespace after \\\",\\\" in a single-line function\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    functionCommaSpaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"29":0,"30":0,"33":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-comma-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-comma-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":73}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":46}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":60}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":60}},"9":{"start":{"line":13,"column":34},"end":{"line":13,"column":96}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":96}},"11":{"start":{"line":17,"column":0},"end":{"line":40,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":33,"column":4},"end":{"line":38,"column":6}},"18":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const functionCommaSpaceChecker = require(\"../functionCommaSpaceChecker\")","","const ruleName = \"function-comma-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\",\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\",\\\"\",","  expectedBeforeSingleLine: () => \"Expected single space before \\\",\\\" in a single-line function\",","  rejectedBeforeSingleLine: () => \"Unexpected whitespace before \\\",\\\" in a single-line function\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    functionCommaSpaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"29":0,"30":0,"33":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-linear-gradient-no-nonstandard-direction/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":1,"40":1,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"isStandardDirection","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":51}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":13},"end":{"line":32,"column":31}}},"3":{"name":"complain","line":65,"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":78}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":68}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":15,"column":0},"end":{"line":30,"column":1}},"9":{"start":{"line":16,"column":2},"end":{"line":16,"column":150}},"10":{"start":{"line":18,"column":2},"end":{"line":18,"column":38}},"11":{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},"12":{"start":{"line":20,"column":4},"end":{"line":20,"column":16}},"13":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"14":{"start":{"line":23,"column":4},"end":{"line":23,"column":15}},"15":{"start":{"line":26,"column":2},"end":{"line":28,"column":3}},"16":{"start":{"line":27,"column":4},"end":{"line":27,"column":15}},"17":{"start":{"line":29,"column":2},"end":{"line":29,"column":14}},"18":{"start":{"line":32,"column":0},"end":{"line":77,"column":1}},"19":{"start":{"line":33,"column":2},"end":{"line":76,"column":3}},"20":{"start":{"line":34,"column":4},"end":{"line":34,"column":70}},"21":{"start":{"line":35,"column":4},"end":{"line":37,"column":5}},"22":{"start":{"line":36,"column":6},"end":{"line":36,"column":12}},"23":{"start":{"line":39,"column":4},"end":{"line":75,"column":6}},"24":{"start":{"line":40,"column":6},"end":{"line":74,"column":8}},"25":{"start":{"line":41,"column":8},"end":{"line":41,"column":56}},"26":{"start":{"line":44,"column":8},"end":{"line":50,"column":9}},"27":{"start":{"line":45,"column":10},"end":{"line":47,"column":11}},"28":{"start":{"line":46,"column":12},"end":{"line":46,"column":18}},"29":{"start":{"line":48,"column":10},"end":{"line":48,"column":20}},"30":{"start":{"line":49,"column":10},"end":{"line":49,"column":16}},"31":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"32":{"start":{"line":56,"column":10},"end":{"line":56,"column":16}},"33":{"start":{"line":59,"column":8},"end":{"line":59,"column":63}},"34":{"start":{"line":60,"column":8},"end":{"line":63,"column":9}},"35":{"start":{"line":61,"column":10},"end":{"line":61,"column":20}},"36":{"start":{"line":62,"column":10},"end":{"line":62,"column":16}},"37":{"start":{"line":65,"column":8},"end":{"line":73,"column":9}},"38":{"start":{"line":66,"column":10},"end":{"line":72,"column":12}},"39":{"start":{"line":79,"column":0},"end":{"line":79,"column":24}},"40":{"start":{"line":80,"column":0},"end":{"line":80,"column":24}},"41":{"start":{"line":81,"column":0},"end":{"line":81,"column":21}}},"branchMap":{"1":{"line":16,"type":"cond-expr","locations":[{"start":{"line":16,"column":32},"end":{"line":16,"column":91}},{"start":{"line":16,"column":94},"end":{"line":16,"column":150}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"3":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"4":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"5":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":6},"end":{"line":26,"column":26}},{"start":{"line":26,"column":30},"end":{"line":26,"column":55}}]},"6":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"7":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":8}},{"start":{"line":44,"column":8},"end":{"line":44,"column":8}}]},"8":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":10},"end":{"line":45,"column":10}},{"start":{"line":45,"column":10},"end":{"line":45,"column":10}}]},"9":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"10":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]}},"code":["\"use strict\"","","const functionArgumentsSearch = require(\"../../utils/functionArgumentsSearch\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const postcss = require(\"postcss\")","","const ruleName = \"function-linear-gradient-no-nonstandard-direction\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected nonstandard direction\",","})","","function isStandardDirection(source, withToPrefix) {","  const regexp = withToPrefix ? /^to (top|left|bottom|right)(?: (top|left|bottom|right))?$/ : /^(top|left|bottom|right)(?: (top|left|bottom|right))?$/","","  const matches = source.match(regexp)","  if (!matches) {","    return false","  }","  if (matches.length === 2) {","    return true","  }","  // Cannot repeat side-or-corner, e.g. \"to top top\"","  if (matches.length === 3 && matches[1] !== matches[2]) {","    return true","  }","  return false","}","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      functionArgumentsSearch(decl.toString().toLowerCase(), \"linear-gradient\", (expression, expressionIndex) => {","        const firstArg = expression.split(\",\")[0].trim()","","        // If the first character is a number, we can assume the user intends an angle","        if (/[\\d\\.]/.test(firstArg[0])) {","          if (/^[\\d\\.]+(?:deg|grad|rad|turn)$/.test(firstArg)) {","            return","          }","          complain()","          return","        }","","        // The first argument may not be a direction: it may be an angle,","        // or a color stop (in which case user gets default direction, \"to bottom\")","        // cf. https://drafts.csswg.org/css-images-3/#linear-gradient-syntax","        if (!/left|right|top|bottom/.test(firstArg)) {","          return","        }","","        const withToPrefix = !postcss.vendor.prefix(decl.value)","        if (!isStandardDirection(firstArg, withToPrefix)) {","          complain()","          return","        }","","        function complain() {","          report({","            message: messages.rejected,","            node: decl,","            index: expressionIndex,","            result,","            ruleName,","          })","        }","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"15":1,"16":0,"18":0,"19":0,"20":0,"22":0,"23":0,"26":0,"27":0,"29":0,"32":1,"33":0,"34":0,"35":0,"36":0,"39":0,"40":0,"41":0,"44":0,"45":0,"46":0,"48":0,"49":0,"55":0,"56":0,"59":0,"60":0,"61":0,"62":0,"65":1,"66":0,"79":1,"80":1,"81":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/functionArgumentsSearch.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/functionArgumentsSearch.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":21,"column":2}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":47}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"3":{"start":{"line":17,"column":0},"end":{"line":33,"column":1}},"4":{"start":{"line":22,"column":2},"end":{"line":32,"column":4}},"5":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"6":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"7":{"start":{"line":30,"column":4},"end":{"line":30,"column":80}},"8":{"start":{"line":31,"column":4},"end":{"line":31,"column":50}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["/* @flow */","\"use strict\"","","const balancedMatch = require(\"balanced-match\")","const styleSearch = require(\"style-search\")","","/**"," * Search a CSS string for functions by name."," * For every match, invoke the callback, passing the function's"," * \"argument(s) string\" (whatever is inside the parentheses)"," * as an argument."," *"," * Callback will be called once for every matching function found,"," * with the function's \"argument(s) string\" and its starting index"," * as the arguments."," */","module.exports = function (","  source/*: string*/,","  functionName/*: string*/,","  callback/*: Function*/",") {","  styleSearch({","    source,","    target: functionName,","    functionNames: \"check\",","  }, match => {","    if (source[match.endIndex] !== \"(\") {","      return","    }","    const parensMatch = balancedMatch(\"(\", \")\", source.substr(match.startIndex))","    callback(parensMatch.body, match.endIndex + 1)","  })","}",""],"l":{"4":1,"5":1,"17":1,"22":0,"27":0,"28":0,"30":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-max-empty-lines/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-max-empty-lines/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":19},"end":{"line":12,"column":63}},"9":{"start":{"line":15,"column":0},"end":{"line":59,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":37}},"11":{"start":{"line":18,"column":2},"end":{"line":58,"column":3}},"12":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"13":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"14":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"15":{"start":{"line":27,"column":4},"end":{"line":57,"column":6}},"16":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"17":{"start":{"line":29,"column":8},"end":{"line":29,"column":14}},"18":{"start":{"line":32,"column":6},"end":{"line":32,"column":40}},"19":{"start":{"line":33,"column":6},"end":{"line":33,"column":66}},"20":{"start":{"line":34,"column":6},"end":{"line":34,"column":70}},"21":{"start":{"line":36,"column":6},"end":{"line":56,"column":8}},"22":{"start":{"line":41,"column":8},"end":{"line":55,"column":9}},"23":{"start":{"line":43,"column":10},"end":{"line":43,"column":38}},"24":{"start":{"line":44,"column":10},"end":{"line":46,"column":11}},"25":{"start":{"line":45,"column":12},"end":{"line":45,"column":22}},"26":{"start":{"line":48,"column":10},"end":{"line":54,"column":12}},"27":{"start":{"line":61,"column":0},"end":{"line":61,"column":24}},"28":{"start":{"line":62,"column":0},"end":{"line":62,"column":24}},"29":{"start":{"line":63,"column":0},"end":{"line":63,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":8}},{"start":{"line":41,"column":8},"end":{"line":41,"column":8}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":93}},{"start":{"line":41,"column":97},"end":{"line":41,"column":184}}]},"5":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":10},"end":{"line":44,"column":10}},{"start":{"line":44,"column":10},"end":{"line":44,"column":10}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"function-max-empty-lines\"","","const messages = ruleMessages(ruleName, {","  expected: max => `Expected no more than ${max} empty line(s)`,","})","","const rule = function (max) {","  const maxAdjacentNewlines = max + 1","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: max,","      possible: _.isNumber,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (decl.value.indexOf(\"(\") === -1) {","        return","      }","","      const declString = decl.toString()","      const repeatLFNewLines = _.repeat(\"\\n\", maxAdjacentNewlines)","      const repeatCRLFNewLines = _.repeat(\"\\r\\n\", maxAdjacentNewlines)","","      styleSearch({","        source: declString,","        target: \"\\n\",","        functionArguments: \"only\",","      }, match => {","        if (declString.substr(match.startIndex + 1, maxAdjacentNewlines) === repeatLFNewLines || declString.substr(match.startIndex + 1, maxAdjacentNewlines * 2) === repeatCRLFNewLines) {","          // Put index at `\\r` if it's CRLF, otherwise leave it at `\\n`","          let index = match.startIndex","          if (declString[index - 1] === \"\\r\") {","            index -= 1","          }","","          report({","            message: messages.expected(max),","            node: decl,","            index,","            result,","            ruleName,","          })","        }","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"16":0,"18":0,"19":0,"23":0,"24":0,"27":0,"28":0,"29":0,"32":0,"33":0,"34":0,"36":0,"41":0,"43":0,"44":0,"45":0,"48":0,"61":1,"62":1,"63":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-name-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-name-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":1,"15":11,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":1,"42":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":13},"end":{"line":24,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":30},"end":{"line":46,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":58}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":51}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"11":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"12":{"start":{"line":16,"column":34},"end":{"line":16,"column":76}},"13":{"start":{"line":19,"column":0},"end":{"line":19,"column":54}},"14":{"start":{"line":20,"column":0},"end":{"line":22,"column":2}},"15":{"start":{"line":21,"column":2},"end":{"line":21,"column":68}},"16":{"start":{"line":24,"column":0},"end":{"line":84,"column":1}},"17":{"start":{"line":25,"column":2},"end":{"line":83,"column":3}},"18":{"start":{"line":26,"column":4},"end":{"line":38,"column":6}},"19":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"20":{"start":{"line":40,"column":6},"end":{"line":40,"column":12}},"21":{"start":{"line":43,"column":4},"end":{"line":82,"column":6}},"22":{"start":{"line":44,"column":6},"end":{"line":44,"column":30}},"23":{"start":{"line":46,"column":6},"end":{"line":81,"column":8}},"24":{"start":{"line":47,"column":8},"end":{"line":49,"column":9}},"25":{"start":{"line":48,"column":10},"end":{"line":48,"column":16}},"26":{"start":{"line":51,"column":8},"end":{"line":51,"column":39}},"27":{"start":{"line":52,"column":8},"end":{"line":52,"column":64}},"28":{"start":{"line":54,"column":8},"end":{"line":54,"column":72}},"29":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"30":{"start":{"line":57,"column":10},"end":{"line":57,"column":16}},"31":{"start":{"line":60,"column":8},"end":{"line":60,"column":39}},"32":{"start":{"line":62,"column":8},"end":{"line":68,"column":9}},"33":{"start":{"line":63,"column":10},"end":{"line":63,"column":96}},"34":{"start":{"line":64,"column":15},"end":{"line":68,"column":9}},"35":{"start":{"line":65,"column":10},"end":{"line":65,"column":54}},"36":{"start":{"line":67,"column":10},"end":{"line":67,"column":59}},"37":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"38":{"start":{"line":71,"column":10},"end":{"line":71,"column":16}},"39":{"start":{"line":74,"column":8},"end":{"line":80,"column":10}},"40":{"start":{"line":86,"column":0},"end":{"line":86,"column":24}},"41":{"start":{"line":87,"column":0},"end":{"line":87,"column":24}},"42":{"start":{"line":88,"column":0},"end":{"line":88,"column":21}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":8}},{"start":{"line":47,"column":8},"end":{"line":47,"column":8}}]},"3":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":12},"end":{"line":47,"column":36}},{"start":{"line":47,"column":40},"end":{"line":47,"column":71}}]},"4":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":32},"end":{"line":54,"column":39}},{"start":{"line":54,"column":43},"end":{"line":54,"column":66}},{"start":{"line":54,"column":70},"end":{"line":54,"column":72}}]},"5":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"6":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":38}},{"start":{"line":56,"column":42},"end":{"line":56,"column":94}}]},"7":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"8":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":35}},{"start":{"line":62,"column":39},"end":{"line":62,"column":102}}]},"9":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":15},"end":{"line":64,"column":15}},{"start":{"line":64,"column":15},"end":{"line":64,"column":15}}]},"10":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const isStandardSyntaxFunction = require(\"../../utils/isStandardSyntaxFunction\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","const _ = require(\"lodash\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"function-name-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const mapLowercaseFunctionNamesToCamelCase = new Map()","keywordSets.camelCaseFunctionNames.forEach(func => {","  mapLowercaseFunctionNamesToCamelCase.set(func.toLowerCase(), func)","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    }, {","      actual: options,","      possible: {","        ignoreFunctions: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const value = decl.value","","      valueParser(value).walk(function (node) {","        if (node.type !== \"function\" || !isStandardSyntaxFunction(node)) {","          return","        }","","        const functionName = node.value","        const functionNameLowerCase = functionName.toLowerCase()","","        const ignoreFunctions = options && options.ignoreFunctions || []","","        if (ignoreFunctions.length > 0 && matchesStringOrRegExp(functionName, ignoreFunctions)) {","          return","        }","","        let expectedFunctionName = null","","        if (expectation === \"lower\" && mapLowercaseFunctionNamesToCamelCase.has(functionNameLowerCase)) {","          expectedFunctionName = mapLowercaseFunctionNamesToCamelCase.get(functionNameLowerCase)","        } else if (expectation === \"lower\") {","          expectedFunctionName = functionNameLowerCase","        } else {","          expectedFunctionName = functionName.toUpperCase()","        }","","        if (functionName === expectedFunctionName) {","          return","        }","","        report({","          message: messages.expected(functionName, expectedFunctionName),","          node: decl,","          index: declarationValueIndex(decl) + node.sourceIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"16":0,"19":1,"20":1,"21":11,"24":1,"25":0,"26":0,"39":0,"40":0,"43":0,"44":0,"46":0,"47":0,"48":0,"51":0,"52":0,"54":0,"56":0,"57":0,"60":0,"62":0,"63":0,"64":0,"65":0,"67":0,"70":0,"71":0,"74":0,"86":1,"87":1,"88":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-parentheses-newline-inside/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-parentheses-newline-inside/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":1,"44":1,"45":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":13},"end":{"line":22,"column":36}}},"2":{"name":"containsNewline","line":52,"loc":{"start":{"line":52,"column":8},"end":{"line":52,"column":38}}},"3":{"name":"complain","line":89,"loc":{"start":{"line":89,"column":6},"end":{"line":89,"column":41}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":54}},"9":{"start":{"line":13,"column":0},"end":{"line":20,"column":2}},"10":{"start":{"line":22,"column":0},"end":{"line":100,"column":1}},"11":{"start":{"line":23,"column":2},"end":{"line":99,"column":3}},"12":{"start":{"line":24,"column":4},"end":{"line":31,"column":6}},"13":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"14":{"start":{"line":33,"column":6},"end":{"line":33,"column":12}},"15":{"start":{"line":36,"column":4},"end":{"line":98,"column":6}},"16":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"17":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"18":{"start":{"line":41,"column":6},"end":{"line":87,"column":8}},"19":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"20":{"start":{"line":43,"column":10},"end":{"line":43,"column":16}},"21":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"22":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"23":{"start":{"line":50,"column":8},"end":{"line":50,"column":63}},"24":{"start":{"line":51,"column":8},"end":{"line":51,"column":63}},"25":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"26":{"start":{"line":53,"column":10},"end":{"line":53,"column":41}},"27":{"start":{"line":58,"column":8},"end":{"line":58,"column":79}},"28":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"29":{"start":{"line":61,"column":10},"end":{"line":61,"column":58}},"30":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"31":{"start":{"line":65,"column":10},"end":{"line":65,"column":67}},"32":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"33":{"start":{"line":69,"column":10},"end":{"line":69,"column":67}},"34":{"start":{"line":74,"column":8},"end":{"line":74,"column":78}},"35":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"36":{"start":{"line":77,"column":10},"end":{"line":77,"column":58}},"37":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"38":{"start":{"line":81,"column":10},"end":{"line":81,"column":67}},"39":{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},"40":{"start":{"line":85,"column":10},"end":{"line":85,"column":67}},"41":{"start":{"line":89,"column":6},"end":{"line":97,"column":7}},"42":{"start":{"line":90,"column":8},"end":{"line":96,"column":10}},"43":{"start":{"line":102,"column":0},"end":{"line":102,"column":24}},"44":{"start":{"line":103,"column":0},"end":{"line":103,"column":24}},"45":{"start":{"line":104,"column":0},"end":{"line":104,"column":21}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"6":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":36}},{"start":{"line":60,"column":40},"end":{"line":60,"column":74}}]},"7":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"8":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":12},"end":{"line":64,"column":23}},{"start":{"line":64,"column":27},"end":{"line":64,"column":62}},{"start":{"line":64,"column":66},"end":{"line":64,"column":100}}]},"9":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"10":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":23}},{"start":{"line":68,"column":27},"end":{"line":68,"column":61}},{"start":{"line":68,"column":65},"end":{"line":68,"column":88}}]},"11":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":76,"column":8}},{"start":{"line":76,"column":8},"end":{"line":76,"column":8}}]},"12":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":36}},{"start":{"line":76,"column":40},"end":{"line":76,"column":73}}]},"13":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":8}},{"start":{"line":80,"column":8},"end":{"line":80,"column":8}}]},"14":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":12},"end":{"line":80,"column":23}},{"start":{"line":80,"column":27},"end":{"line":80,"column":62}},{"start":{"line":80,"column":66},"end":{"line":80,"column":99}}]},"15":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":84,"column":8}},{"start":{"line":84,"column":8},"end":{"line":84,"column":8}}]},"16":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":23}},{"start":{"line":84,"column":27},"end":{"line":84,"column":61}},{"start":{"line":84,"column":65},"end":{"line":84,"column":87}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const isStandardSyntaxFunction = require(\"../../utils/isStandardSyntaxFunction\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"function-parentheses-newline-inside\"","","const messages = ruleMessages(ruleName, {","  expectedOpening: \"Expected newline after \\\"(\\\"\",","  expectedClosing: \"Expected newline before \\\")\\\"\",","  expectedOpeningMultiLine: \"Expected newline after \\\"(\\\" in a multi-line function\",","  rejectedOpeningMultiLine: \"Unexpected whitespace after \\\"(\\\" in a multi-line function\",","  expectedClosingMultiLine: \"Expected newline before \\\")\\\" in a multi-line function\",","  rejectedClosingMultiLine: \"Unexpected whitespace before \\\")\\\" in a multi-line function\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (decl.value.indexOf(\"(\") === -1) {","        return","      }","","      valueParser(decl.value).walk(valueNode => {","        if (valueNode.type !== \"function\") {","          return","        }","","        if (!isStandardSyntaxFunction(valueNode)) {","          return","        }","","        const functionString = valueParser.stringify(valueNode)","        const isMultiLine = !isSingleLineString(functionString)","        function containsNewline(str) {","          return str.indexOf(\"\\n\") !== -1","        }","","        // Check opening ...","","        const openingIndex = valueNode.sourceIndex + valueNode.value.length + 1","","        if (expectation === \"always\" && !containsNewline(valueNode.before)) {","          complain(messages.expectedOpening, openingIndex)","        }","","        if (isMultiLine && expectation === \"always-multi-line\" && !containsNewline(valueNode.before)) {","          complain(messages.expectedOpeningMultiLine, openingIndex)","        }","","        if (isMultiLine && expectation === \"never-multi-line\" && valueNode.before !== \"\") {","          complain(messages.rejectedOpeningMultiLine, openingIndex)","        }","","        // Check closing ...","","        const closingIndex = valueNode.sourceIndex + functionString.length - 2","","        if (expectation === \"always\" && !containsNewline(valueNode.after)) {","          complain(messages.expectedClosing, closingIndex)","        }","","        if (isMultiLine && expectation === \"always-multi-line\" && !containsNewline(valueNode.after)) {","          complain(messages.expectedClosingMultiLine, closingIndex)","        }","","        if (isMultiLine && expectation === \"never-multi-line\" && valueNode.after !== \"\") {","          complain(messages.rejectedClosingMultiLine, closingIndex)","        }","      })","","      function complain(message, offset) {","        report({","          ruleName,","          result,","          message,","          node: decl,","          index: declarationValueIndex(decl) + offset,","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"22":1,"23":0,"24":0,"32":0,"33":0,"36":0,"37":0,"38":0,"41":0,"42":0,"43":0,"46":0,"47":0,"50":0,"51":0,"52":1,"53":0,"58":0,"60":0,"61":0,"64":0,"65":0,"68":0,"69":0,"74":0,"76":0,"77":0,"80":0,"81":0,"84":0,"85":0,"89":1,"90":0,"102":1,"103":1,"104":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-parentheses-space-inside/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-parentheses-space-inside/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":0,"45":1,"46":1,"47":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0],"19":[0,0],"20":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":13},"end":{"line":24,"column":36}}},"2":{"name":"complain","line":97,"loc":{"start":{"line":97,"column":6},"end":{"line":97,"column":41}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":52}},"9":{"start":{"line":13,"column":0},"end":{"line":22,"column":2}},"10":{"start":{"line":24,"column":0},"end":{"line":108,"column":1}},"11":{"start":{"line":25,"column":2},"end":{"line":107,"column":3}},"12":{"start":{"line":26,"column":4},"end":{"line":34,"column":6}},"13":{"start":{"line":35,"column":4},"end":{"line":37,"column":5}},"14":{"start":{"line":36,"column":6},"end":{"line":36,"column":12}},"15":{"start":{"line":39,"column":4},"end":{"line":106,"column":6}},"16":{"start":{"line":40,"column":6},"end":{"line":42,"column":7}},"17":{"start":{"line":41,"column":8},"end":{"line":41,"column":14}},"18":{"start":{"line":44,"column":6},"end":{"line":95,"column":8}},"19":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"20":{"start":{"line":46,"column":10},"end":{"line":46,"column":16}},"21":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"22":{"start":{"line":50,"column":10},"end":{"line":50,"column":16}},"23":{"start":{"line":53,"column":8},"end":{"line":53,"column":63}},"24":{"start":{"line":54,"column":8},"end":{"line":54,"column":63}},"25":{"start":{"line":58,"column":8},"end":{"line":58,"column":79}},"26":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"27":{"start":{"line":61,"column":10},"end":{"line":61,"column":58}},"28":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"29":{"start":{"line":65,"column":10},"end":{"line":65,"column":58}},"30":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"31":{"start":{"line":69,"column":10},"end":{"line":69,"column":68}},"32":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"33":{"start":{"line":73,"column":10},"end":{"line":73,"column":68}},"34":{"start":{"line":78,"column":8},"end":{"line":78,"column":78}},"35":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"36":{"start":{"line":81,"column":10},"end":{"line":81,"column":58}},"37":{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},"38":{"start":{"line":85,"column":10},"end":{"line":85,"column":58}},"39":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"40":{"start":{"line":89,"column":10},"end":{"line":89,"column":68}},"41":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"42":{"start":{"line":93,"column":10},"end":{"line":93,"column":68}},"43":{"start":{"line":97,"column":6},"end":{"line":105,"column":7}},"44":{"start":{"line":98,"column":8},"end":{"line":104,"column":10}},"45":{"start":{"line":110,"column":0},"end":{"line":110,"column":24}},"46":{"start":{"line":111,"column":0},"end":{"line":111,"column":24}},"47":{"start":{"line":112,"column":0},"end":{"line":112,"column":21}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"6":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":36}},{"start":{"line":60,"column":40},"end":{"line":60,"column":64}}]},"7":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"8":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":12},"end":{"line":64,"column":35}},{"start":{"line":64,"column":39},"end":{"line":64,"column":62}}]},"9":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"10":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":24}},{"start":{"line":68,"column":28},"end":{"line":68,"column":64}},{"start":{"line":68,"column":68},"end":{"line":68,"column":92}}]},"11":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"12":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":12},"end":{"line":72,"column":24}},{"start":{"line":72,"column":28},"end":{"line":72,"column":63}},{"start":{"line":72,"column":67},"end":{"line":72,"column":90}}]},"13":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":8}},{"start":{"line":80,"column":8},"end":{"line":80,"column":8}}]},"14":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":12},"end":{"line":80,"column":36}},{"start":{"line":80,"column":40},"end":{"line":80,"column":63}}]},"15":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":84,"column":8}},{"start":{"line":84,"column":8},"end":{"line":84,"column":8}}]},"16":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":35}},{"start":{"line":84,"column":39},"end":{"line":84,"column":61}}]},"17":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":8}},{"start":{"line":88,"column":8},"end":{"line":88,"column":8}}]},"18":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":12},"end":{"line":88,"column":24}},{"start":{"line":88,"column":28},"end":{"line":88,"column":64}},{"start":{"line":88,"column":68},"end":{"line":88,"column":91}}]},"19":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]},"20":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":12},"end":{"line":92,"column":24}},{"start":{"line":92,"column":28},"end":{"line":92,"column":63}},{"start":{"line":92,"column":67},"end":{"line":92,"column":89}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const isStandardSyntaxFunction = require(\"../../utils/isStandardSyntaxFunction\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"function-parentheses-space-inside\"","","const messages = ruleMessages(ruleName, {","  expectedOpening: \"Expected single space after \\\"(\\\"\",","  rejectedOpening: \"Unexpected whitespace after \\\"(\\\"\",","  expectedClosing: \"Expected single space before \\\")\\\"\",","  rejectedClosing: \"Unexpected whitespace before \\\")\\\"\",","  expectedOpeningSingleLine: \"Expected single space after \\\"(\\\" in a single-line function\",","  rejectedOpeningSingleLine: \"Unexpected whitespace after \\\"(\\\" in a single-line function\",","  expectedClosingSingleLine: \"Expected single space before \\\")\\\" in a single-line function\",","  rejectedClosingSingleLine: \"Unexpected whitespace before \\\")\\\" in a single-line function\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (decl.value.indexOf(\"(\") === -1) {","        return","      }","","      valueParser(decl.value).walk(valueNode => {","        if (valueNode.type !== \"function\") {","          return","        }","","        if (!isStandardSyntaxFunction(valueNode)) {","          return","        }","","        const functionString = valueParser.stringify(valueNode)","        const isSingleLine = isSingleLineString(functionString)","","        // Check opening ...","","        const openingIndex = valueNode.sourceIndex + valueNode.value.length + 1","","        if (expectation === \"always\" && valueNode.before !== \" \") {","          complain(messages.expectedOpening, openingIndex)","        }","","        if (expectation === \"never\" && valueNode.before !== \"\") {","          complain(messages.rejectedOpening, openingIndex)","        }","","        if (isSingleLine && expectation === \"always-single-line\" && valueNode.before !== \" \") {","          complain(messages.expectedOpeningSingleLine, openingIndex)","        }","","        if (isSingleLine && expectation === \"never-single-line\" && valueNode.before !== \"\") {","          complain(messages.rejectedOpeningSingleLine, openingIndex)","        }","","        // Check closing ...","","        const closingIndex = valueNode.sourceIndex + functionString.length - 2","","        if (expectation === \"always\" && valueNode.after !== \" \") {","          complain(messages.expectedClosing, closingIndex)","        }","","        if (expectation === \"never\" && valueNode.after !== \"\") {","          complain(messages.rejectedClosing, closingIndex)","        }","","        if (isSingleLine && expectation === \"always-single-line\" && valueNode.after !== \" \") {","          complain(messages.expectedClosingSingleLine, closingIndex)","        }","","        if (isSingleLine && expectation === \"never-single-line\" && valueNode.after !== \"\") {","          complain(messages.rejectedClosingSingleLine, closingIndex)","        }","      })","","      function complain(message, offset) {","        report({","          ruleName,","          result,","          message,","          node: decl,","          index: declarationValueIndex(decl) + offset,","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"24":1,"25":0,"26":0,"35":0,"36":0,"39":0,"40":0,"41":0,"44":0,"45":0,"46":0,"49":0,"50":0,"53":0,"54":0,"58":0,"60":0,"61":0,"64":0,"65":0,"68":0,"69":0,"72":0,"73":0,"78":0,"80":0,"81":0,"84":0,"85":0,"88":0,"89":0,"92":0,"93":0,"97":1,"98":0,"110":1,"111":1,"112":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-url-data-uris/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-url-data-uris/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":19},"end":{"line":30,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":41}},"8":{"start":{"line":12,"column":0},"end":{"line":15,"column":2}},"9":{"start":{"line":17,"column":0},"end":{"line":60,"column":1}},"10":{"start":{"line":18,"column":2},"end":{"line":59,"column":3}},"11":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"12":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"13":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"14":{"start":{"line":30,"column":4},"end":{"line":58,"column":6}},"15":{"start":{"line":31,"column":6},"end":{"line":57,"column":8}},"16":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"17":{"start":{"line":33,"column":10},"end":{"line":33,"column":16}},"18":{"start":{"line":36,"column":8},"end":{"line":36,"column":47}},"19":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"20":{"start":{"line":39,"column":10},"end":{"line":39,"column":16}},"21":{"start":{"line":42,"column":8},"end":{"line":42,"column":92}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":56}},"23":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"24":{"start":{"line":46,"column":10},"end":{"line":46,"column":16}},"25":{"start":{"line":49,"column":8},"end":{"line":49,"column":79}},"26":{"start":{"line":51,"column":8},"end":{"line":56,"column":10}},"27":{"start":{"line":62,"column":0},"end":{"line":62,"column":24}},"28":{"start":{"line":63,"column":0},"end":{"line":63,"column":24}},"29":{"start":{"line":64,"column":0},"end":{"line":64,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":41}},{"start":{"line":32,"column":45},"end":{"line":32,"column":84}},{"start":{"line":32,"column":88},"end":{"line":32,"column":115}}]},"4":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"5":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":12},"end":{"line":38,"column":31}},{"start":{"line":38,"column":35},"end":{"line":38,"column":77}},{"start":{"line":38,"column":81},"end":{"line":38,"column":111}}]},"6":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"7":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":32}},{"start":{"line":45,"column":36},"end":{"line":45,"column":51}},{"start":{"line":45,"column":55},"end":{"line":45,"column":76}},{"start":{"line":45,"column":80},"end":{"line":45,"column":96}}]},"8":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":42},"end":{"line":49,"column":59}},{"start":{"line":49,"column":62},"end":{"line":49,"column":79}}]}},"code":["\"use strict\"","","const isStandardSyntaxValue = require(\"../../utils/isStandardSyntaxValue\")","const isVariable = require(\"../../utils/isVariable\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"function-url-data-uris\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected a data URI\",","  rejected: \"Unexpected data URI\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(function (decl) {","      valueParser(decl.value).walk(valueNode => {","        if (valueNode.type !== \"function\" || valueNode.value.toLowerCase() !== \"url\" || !valueNode.nodes.length > 0) {","          return","        }","","        const urlValueNode = valueNode.nodes[0]","","        if (!urlValueNode.value || !isStandardSyntaxValue(urlValueNode.value) || isVariable(urlValueNode.value)) {","          return","        }","","        const valueContainDataUris = urlValueNode.value.toLowerCase().indexOf(\"data:\") === 0","        const needUrlDataUris = expectation === \"always\"","","        if (valueContainDataUris && needUrlDataUris || !valueContainDataUris && !needUrlDataUris) {","          return","        }","","        const message = needUrlDataUris ? messages.expected : messages.rejected","","        report({","          message,","          node: decl,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"17":1,"18":0,"19":0,"26":0,"27":0,"30":0,"31":0,"32":0,"33":0,"36":0,"38":0,"39":0,"42":0,"43":0,"45":0,"46":0,"49":0,"51":0,"62":1,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-url-no-scheme-relative/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-url-no-scheme-relative/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":31}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":19},"end":{"line":23,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":78}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":70}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":50}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":16,"column":0},"end":{"line":41,"column":1}},"10":{"start":{"line":17,"column":2},"end":{"line":40,"column":3}},"11":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"12":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"13":{"start":{"line":20,"column":6},"end":{"line":20,"column":12}},"14":{"start":{"line":23,"column":4},"end":{"line":39,"column":6}},"15":{"start":{"line":24,"column":6},"end":{"line":38,"column":8}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":40}},"17":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"18":{"start":{"line":28,"column":10},"end":{"line":28,"column":16}},"19":{"start":{"line":31,"column":8},"end":{"line":37,"column":10}},"20":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"21":{"start":{"line":44,"column":0},"end":{"line":44,"column":24}},"22":{"start":{"line":45,"column":0},"end":{"line":45,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":27,"column":8}},{"start":{"line":27,"column":8},"end":{"line":27,"column":8}}]},"3":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":12},"end":{"line":27,"column":37}},{"start":{"line":27,"column":41},"end":{"line":27,"column":64}}]}},"code":["\"use strict\"","","const functionArgumentsSearch = require(\"../../utils/functionArgumentsSearch\")","const isStandardSyntaxUrl = require(\"../../utils/isStandardSyntaxUrl\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","","const ruleName = \"function-url-no-scheme-relative\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected scheme-relative url\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(function (decl) {","      functionArgumentsSearch(decl.toString().toLowerCase(), \"url\", (args, index) => {","        const url = _.trim(args, \" '\\\"\")","","        if (!isStandardSyntaxUrl(url) || url.indexOf(\"//\") !== 0) {","          return","        }","","        report({","          message: messages.rejected,","          node: decl,","          index,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"27":0,"28":0,"31":0,"43":1,"44":1,"45":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxUrl.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxUrl.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":57}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":69}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":67}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":69}},"4":{"start":{"line":11,"column":0},"end":{"line":45,"column":1}},"5":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"6":{"start":{"line":13,"column":4},"end":{"line":13,"column":15}},"7":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"8":{"start":{"line":18,"column":4},"end":{"line":18,"column":16}},"9":{"start":{"line":22,"column":2},"end":{"line":28,"column":3}},"10":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"11":{"start":{"line":24,"column":6},"end":{"line":24,"column":18}},"12":{"start":{"line":27,"column":4},"end":{"line":27,"column":15}},"13":{"start":{"line":33,"column":2},"end":{"line":35,"column":3}},"14":{"start":{"line":34,"column":4},"end":{"line":34,"column":16}},"15":{"start":{"line":40,"column":2},"end":{"line":42,"column":3}},"16":{"start":{"line":41,"column":4},"end":{"line":41,"column":16}},"17":{"start":{"line":44,"column":2},"end":{"line":44,"column":13}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]},"3":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":6},"end":{"line":17,"column":31}},{"start":{"line":17,"column":35},"end":{"line":17,"column":59}}]},"4":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"5":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":20}},{"start":{"line":22,"column":24},"end":{"line":22,"column":51}},{"start":{"line":22,"column":55},"end":{"line":22,"column":70}},{"start":{"line":22,"column":74},"end":{"line":22,"column":102}}]},"6":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"7":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"8":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":20}},{"start":{"line":33,"column":24},"end":{"line":33,"column":47}}]},"9":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]},"10":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":29}},{"start":{"line":40,"column":33},"end":{"line":40,"column":72}},{"start":{"line":40,"column":76},"end":{"line":40,"column":103}}]}},"code":["/* @flow */","\"use strict\"","","const hasLessInterpolation = require(\"../utils/hasLessInterpolation\")","const hasPsvInterpolation = require(\"../utils/hasPsvInterpolation\")","const hasScssInterpolation = require(\"../utils/hasScssInterpolation\")","","/**"," * Check whether a URL is standard"," */","module.exports = function (url/*: string*/)/*: boolean*/ {","  if (url.length === 0) {","    return true","  }","","  // Sass interpolation works anywhere","  if (hasScssInterpolation(url) || hasPsvInterpolation(url)) {","    return false","  }","","  // Inside `'` and `\"` work only LESS interpolation","  if (url[0] === \"'\" && url[url.length - 1] === \"'\" || url[0] === \"\\\"\" && url[url.length - 1] === \"\\\"\") {","    if (hasLessInterpolation(url)) {","      return false","    }","","    return true","  }","","  // Less variable works only at the beginning","  // Check is less variable, allow use '@url/some/path'","  // https://github.com/less/less.js/blob/3.x/lib/less/parser/parser.js#L547","  if (url[0] === \"@\" && /^@@?[\\w-]+$/.test(url)) {","    return false","  }","","  // In url without quotes scss variable can be everywhere","  // But in this case it is allowed to use only specific characters","  // Also forbidden \"/\" at the end of url","  if (url.indexOf(\"$\") !== -1 && /^[\\$\\sA-Za-z0-9+-/*_'\"\\/]+$/.test(url) && url[url.length - 1] !== \"/\") {","    return false","  }","","  return true","}",""],"l":{"4":1,"5":1,"6":1,"11":1,"12":0,"13":0,"17":0,"18":0,"22":0,"23":0,"24":0,"27":0,"33":0,"34":0,"40":0,"41":0,"44":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-url-quotes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-url-quotes/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":1,"55":1,"56":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":45}}},"2":{"name":"checkStatement","line":41,"loc":{"start":{"line":41,"column":4},"end":{"line":41,"column":39}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":26},"end":{"line":46,"column":42}}},"4":{"name":"checkAtRuleParams","line":53,"loc":{"start":{"line":53,"column":4},"end":{"line":53,"column":39}}},"5":{"name":"checkArgs","line":66,"loc":{"start":{"line":66,"column":4},"end":{"line":66,"column":56}}},"6":{"name":"complain","line":99,"loc":{"start":{"line":99,"column":4},"end":{"line":99,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":78}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":38}},"10":{"start":{"line":14,"column":0},"end":{"line":17,"column":2}},"11":{"start":{"line":15,"column":18},"end":{"line":15,"column":35}},"12":{"start":{"line":16,"column":18},"end":{"line":16,"column":37}},"13":{"start":{"line":19,"column":0},"end":{"line":109,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":108,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":33,"column":6}},"16":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"17":{"start":{"line":35,"column":6},"end":{"line":35,"column":12}},"18":{"start":{"line":38,"column":4},"end":{"line":38,"column":36}},"19":{"start":{"line":39,"column":4},"end":{"line":39,"column":34}},"20":{"start":{"line":41,"column":4},"end":{"line":51,"column":5}},"21":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":36}},"23":{"start":{"line":46,"column":6},"end":{"line":50,"column":8}},"24":{"start":{"line":47,"column":8},"end":{"line":49,"column":10}},"25":{"start":{"line":48,"column":10},"end":{"line":48,"column":45}},"26":{"start":{"line":53,"column":4},"end":{"line":64,"column":5}},"27":{"start":{"line":54,"column":6},"end":{"line":54,"column":63}},"28":{"start":{"line":55,"column":6},"end":{"line":57,"column":8}},"29":{"start":{"line":56,"column":8},"end":{"line":56,"column":72}},"30":{"start":{"line":58,"column":6},"end":{"line":60,"column":8}},"31":{"start":{"line":59,"column":8},"end":{"line":59,"column":79}},"32":{"start":{"line":61,"column":6},"end":{"line":63,"column":8}},"33":{"start":{"line":62,"column":8},"end":{"line":62,"column":75}},"34":{"start":{"line":66,"column":4},"end":{"line":97,"column":5}},"35":{"start":{"line":67,"column":6},"end":{"line":67,"column":52}},"36":{"start":{"line":69,"column":6},"end":{"line":69,"column":45}},"37":{"start":{"line":70,"column":6},"end":{"line":72,"column":7}},"38":{"start":{"line":71,"column":8},"end":{"line":71,"column":14}},"39":{"start":{"line":73,"column":6},"end":{"line":73,"column":73}},"40":{"start":{"line":74,"column":6},"end":{"line":74,"column":81}},"41":{"start":{"line":76,"column":6},"end":{"line":76,"column":36}},"42":{"start":{"line":77,"column":6},"end":{"line":81,"column":20}},"43":{"start":{"line":82,"column":6},"end":{"line":84,"column":7}},"44":{"start":{"line":83,"column":8},"end":{"line":83,"column":42}},"45":{"start":{"line":86,"column":6},"end":{"line":96,"column":7}},"46":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"47":{"start":{"line":88,"column":10},"end":{"line":88,"column":16}},"48":{"start":{"line":90,"column":8},"end":{"line":90,"column":71}},"49":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"50":{"start":{"line":93,"column":10},"end":{"line":93,"column":16}},"51":{"start":{"line":95,"column":8},"end":{"line":95,"column":71}},"52":{"start":{"line":99,"column":4},"end":{"line":107,"column":5}},"53":{"start":{"line":100,"column":6},"end":{"line":106,"column":8}},"54":{"start":{"line":111,"column":0},"end":{"line":111,"column":24}},"55":{"start":{"line":112,"column":0},"end":{"line":112,"column":24}},"56":{"start":{"line":113,"column":0},"end":{"line":113,"column":21}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":6},"end":{"line":70,"column":6}},{"start":{"line":70,"column":6},"end":{"line":70,"column":6}}]},"4":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":24},"end":{"line":74,"column":50}},{"start":{"line":74,"column":54},"end":{"line":74,"column":81}}]},"5":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":6},"end":{"line":82,"column":6}},{"start":{"line":82,"column":6},"end":{"line":82,"column":6}}]},"6":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":10},"end":{"line":82,"column":52}},{"start":{"line":82,"column":56},"end":{"line":82,"column":71}}]},"7":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":6},"end":{"line":86,"column":6}},{"start":{"line":86,"column":6},"end":{"line":86,"column":6}}]},"8":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":8}},{"start":{"line":87,"column":8},"end":{"line":87,"column":8}}]},"9":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const functionArgumentsSearch = require(\"../../utils/functionArgumentsSearch\")","const isStandardSyntaxUrl = require(\"../../utils/isStandardSyntaxUrl\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","","const ruleName = \"function-url-quotes\"","","const messages = ruleMessages(ruleName, {","  expected: () => \"Expected quotes\",","  rejected: () => \"Unexpected quotes\",","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    }, {","      actual: options,","      possible: {","        except: [\"empty\"],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(checkStatement)","    root.walkRules(checkStatement)","","    function checkStatement(statement) {","      if (statement.type === \"atrule\") {","        checkAtRuleParams(statement)","      }","","      statement.walkDecls(function (decl) {","        functionArgumentsSearch(decl.toString().toLowerCase(), \"url\", (args, index) => {","          checkArgs(args, decl, index, \"url\")","        })","      })","    }","","    function checkAtRuleParams(atRule) {","      const atRuleParamsLowerCase = atRule.params.toLowerCase()","      functionArgumentsSearch(atRuleParamsLowerCase, \"url\", (args, index) => {","        checkArgs(args, atRule, index + atRuleParamIndex(atRule), \"url\")","      })","      functionArgumentsSearch(atRuleParamsLowerCase, \"url-prefix\", (args, index) => {","        checkArgs(args, atRule, index + atRuleParamIndex(atRule), \"url-prefix\")","      })","      functionArgumentsSearch(atRuleParamsLowerCase, \"domain\", (args, index) => {","        checkArgs(args, atRule, index + atRuleParamIndex(atRule), \"domain\")","      })","    }","","    function checkArgs(args, node, index, functionName) {","      let shouldHasQuotes = expectation === \"always\"","","      const leftTrimmedArgs = args.trimLeft()","      if (!isStandardSyntaxUrl(leftTrimmedArgs)) {","        return","      }","      const complaintIndex = index + args.length - leftTrimmedArgs.length","      const hasQuotes = leftTrimmedArgs[0] === \"'\" || leftTrimmedArgs[0] === \"\\\"\"","","      const trimmedArg = args.trim()","      const isEmptyArgument = _.includes([","        \"\",","        \"''\",","        \"\\\"\\\"\",","      ], trimmedArg)","      if (optionsMatches(options, \"except\", \"empty\") && isEmptyArgument) {","        shouldHasQuotes = !shouldHasQuotes","      }","","      if (shouldHasQuotes) {","        if (hasQuotes) {","          return","        }","        complain(messages.expected(functionName), node, complaintIndex)","      } else {","        if (!hasQuotes) {","          return","        }","        complain(messages.rejected(functionName), node, complaintIndex)","      }","    }","","    function complain(message, node, index) {","      report({","        message,","        node,","        index,","        result,","        ruleName,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"16":0,"19":1,"20":0,"21":0,"34":0,"35":0,"38":0,"39":0,"41":1,"42":0,"43":0,"46":0,"47":0,"48":0,"53":1,"54":0,"55":0,"56":0,"58":0,"59":0,"61":0,"62":0,"66":1,"67":0,"69":0,"70":0,"71":0,"73":0,"74":0,"76":0,"77":0,"82":0,"83":0,"86":0,"87":0,"88":0,"90":0,"92":0,"93":0,"95":0,"99":1,"100":0,"111":1,"112":1,"113":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-url-scheme-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-url-scheme-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":1,"38":1,"39":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":34}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":19},"end":{"line":28,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":78}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":48}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":22},"end":{"line":15,"column":58}},"12":{"start":{"line":18,"column":0},"end":{"line":69,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":68,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":23,"column":6}},"15":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"16":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"17":{"start":{"line":28,"column":4},"end":{"line":67,"column":6}},"18":{"start":{"line":29,"column":6},"end":{"line":66,"column":8}},"19":{"start":{"line":30,"column":8},"end":{"line":30,"column":51}},"20":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"21":{"start":{"line":32,"column":10},"end":{"line":32,"column":16}},"22":{"start":{"line":34,"column":8},"end":{"line":34,"column":58}},"23":{"start":{"line":36,"column":8},"end":{"line":36,"column":36}},"24":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"25":{"start":{"line":38,"column":10},"end":{"line":38,"column":16}},"26":{"start":{"line":41,"column":8},"end":{"line":41,"column":62}},"27":{"start":{"line":46,"column":8},"end":{"line":46,"column":46}},"28":{"start":{"line":47,"column":8},"end":{"line":47,"column":75}},"29":{"start":{"line":48,"column":8},"end":{"line":48,"column":77}},"30":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"31":{"start":{"line":50,"column":10},"end":{"line":50,"column":16}},"32":{"start":{"line":53,"column":8},"end":{"line":53,"column":137}},"33":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"34":{"start":{"line":56,"column":10},"end":{"line":56,"column":16}},"35":{"start":{"line":59,"column":8},"end":{"line":65,"column":10}},"36":{"start":{"line":71,"column":0},"end":{"line":71,"column":30}},"37":{"start":{"line":73,"column":0},"end":{"line":73,"column":24}},"38":{"start":{"line":74,"column":0},"end":{"line":74,"column":24}},"39":{"start":{"line":75,"column":0},"end":{"line":75,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":31,"column":8}},{"start":{"line":31,"column":8},"end":{"line":31,"column":8}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"4":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":32},"end":{"line":48,"column":56}},{"start":{"line":48,"column":60},"end":{"line":48,"column":77}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"6":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":67},"end":{"line":53,"column":90}},{"start":{"line":53,"column":93},"end":{"line":53,"column":137}}]},"7":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]}},"code":["\"use strict\"","","const containsString = require(\"../../utils/containsString\")","const functionArgumentsSearch = require(\"../../utils/functionArgumentsSearch\")","const isStandardSyntaxUrl = require(\"../../utils/isStandardSyntaxUrl\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const parse = require(\"url\").parse","","const ruleName = \"function-url-scheme-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: scheme => `Unexpected url scheme \"${scheme}:\"`,","})","","const rule = function (whitelist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(function (decl) {","      functionArgumentsSearch(decl.toString().toLowerCase(), \"url\", (args, index) => {","        const unspacedUrlString = _.trim(args, \" \")","        if (!isStandardSyntaxUrl(unspacedUrlString)) {","          return","        }","        const urlString = _.trim(unspacedUrlString, \"'\\\"\")","","        const url = parse(urlString)","        if (url.protocol === null) {","          return","        }","","        const scheme = url.protocol.toLowerCase().slice(0, -1) // strip trailing `:`","","        // The URL spec does not require a scheme to be followed by `//`, but checking","        // for it allows this rule to differentiate <scheme>:<hostname> urls from","        // <hostname>:<port> urls. `data:` scheme urls are an exception to this rule.","        const slashIndex = url.protocol.length","        const expectedSlashes = urlString.slice(slashIndex, slashIndex + 2)","        const isSchemeLessUrl = expectedSlashes !== \"//\" && scheme !== \"data\"","        if (isSchemeLessUrl) {","          return","        }","","        const whitelistLowerCase = typeof whitelist === \"string\" ? whitelist.toLowerCase() : whitelist.join(\"|\").toLowerCase().split(\"|\")","","        if (containsString(scheme, whitelistLowerCase)) {","          return","        }","","        report({","          message: messages.rejected(scheme),","          node: decl,","          index,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"24":0,"25":0,"28":0,"29":0,"30":0,"31":0,"32":0,"34":0,"36":0,"37":0,"38":0,"41":0,"46":0,"47":0,"48":0,"49":0,"50":0,"53":0,"55":0,"56":0,"59":0,"71":1,"73":1,"74":1,"75":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":1,"31":1,"32":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":39}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":30},"end":{"line":32,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":51}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"11":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"12":{"start":{"line":16,"column":20},"end":{"line":16,"column":51}},"13":{"start":{"line":19,"column":0},"end":{"line":52,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":20,"column":45}},"15":{"start":{"line":21,"column":2},"end":{"line":51,"column":3}},"16":{"start":{"line":22,"column":4},"end":{"line":25,"column":6}},"17":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"18":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"19":{"start":{"line":29,"column":4},"end":{"line":50,"column":6}},"20":{"start":{"line":30,"column":6},"end":{"line":30,"column":30}},"21":{"start":{"line":32,"column":6},"end":{"line":49,"column":8}},"22":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"23":{"start":{"line":34,"column":10},"end":{"line":34,"column":16}},"24":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"25":{"start":{"line":37,"column":10},"end":{"line":37,"column":16}},"26":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"27":{"start":{"line":40,"column":10},"end":{"line":40,"column":16}},"28":{"start":{"line":42,"column":8},"end":{"line":48,"column":10}},"29":{"start":{"line":54,"column":0},"end":{"line":54,"column":30}},"30":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"31":{"start":{"line":57,"column":0},"end":{"line":57,"column":24}},"32":{"start":{"line":58,"column":0},"end":{"line":58,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]},"4":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":8}},{"start":{"line":39,"column":8},"end":{"line":39,"column":8}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const isStandardSyntaxFunction = require(\"../../utils/isStandardSyntaxFunction\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const valueParser = require(\"postcss-value-parser\")","const postcss = require(\"postcss\")","","const ruleName = \"function-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: name => `Unexpected function \"${name}\"`,","})","","const rule = function (whitelistInput) {","  const whitelist = [].concat(whitelistInput)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","    root.walkDecls(decl => {","      const value = decl.value","","      valueParser(value).walk(function (node) {","        if (node.type !== \"function\") {","          return","        }","        if (!isStandardSyntaxFunction(node)) {","          return","        }","        if (matchesStringOrRegExp(postcss.vendor.unprefixed(node.value).toLowerCase(), whitelist)) {","          return","        }","        report({","          message: messages.rejected(node.value),","          node: decl,","          index: declarationValueIndex(decl) + node.sourceIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"16":0,"19":1,"20":0,"21":0,"22":0,"26":0,"27":0,"29":0,"30":0,"32":0,"33":0,"34":0,"36":0,"37":0,"39":0,"40":0,"42":0,"54":1,"56":1,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-whitespace-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/function-whitespace-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":1,"35":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":13},"end":{"line":24,"column":36}}},"2":{"name":"checkClosingParen","line":49,"loc":{"start":{"line":49,"column":4},"end":{"line":49,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"7":{"start":{"line":11,"column":0},"end":{"line":14,"column":2}},"8":{"start":{"line":16,"column":0},"end":{"line":22,"column":2}},"9":{"start":{"line":24,"column":0},"end":{"line":86,"column":1}},"10":{"start":{"line":25,"column":2},"end":{"line":85,"column":3}},"11":{"start":{"line":26,"column":4},"end":{"line":32,"column":6}},"12":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"13":{"start":{"line":34,"column":6},"end":{"line":34,"column":12}},"14":{"start":{"line":37,"column":4},"end":{"line":47,"column":6}},"15":{"start":{"line":38,"column":6},"end":{"line":38,"column":40}},"16":{"start":{"line":40,"column":6},"end":{"line":46,"column":8}},"17":{"start":{"line":45,"column":8},"end":{"line":45,"column":61}},"18":{"start":{"line":49,"column":4},"end":{"line":84,"column":5}},"19":{"start":{"line":50,"column":6},"end":{"line":50,"column":40}},"20":{"start":{"line":51,"column":6},"end":{"line":83,"column":7}},"21":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"22":{"start":{"line":55,"column":10},"end":{"line":55,"column":16}},"23":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"24":{"start":{"line":58,"column":10},"end":{"line":58,"column":16}},"25":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"26":{"start":{"line":61,"column":10},"end":{"line":61,"column":16}},"27":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"28":{"start":{"line":64,"column":10},"end":{"line":64,"column":16}},"29":{"start":{"line":66,"column":8},"end":{"line":72,"column":10}},"30":{"start":{"line":73,"column":13},"end":{"line":83,"column":7}},"31":{"start":{"line":74,"column":8},"end":{"line":82,"column":9}},"32":{"start":{"line":75,"column":10},"end":{"line":81,"column":12}},"33":{"start":{"line":88,"column":0},"end":{"line":88,"column":24}},"34":{"start":{"line":89,"column":0},"end":{"line":89,"column":24}},"35":{"start":{"line":90,"column":0},"end":{"line":90,"column":21}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"6":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"7":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":13},"end":{"line":73,"column":13}},{"start":{"line":73,"column":13},"end":{"line":73,"column":13}}]},"8":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":8}},{"start":{"line":74,"column":8},"end":{"line":74,"column":8}}]}},"code":["\"use strict\"","","const isWhitespace = require(\"../../utils/isWhitespace\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"function-whitespace-after\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected whitespace after \\\")\\\"\",","  rejected: \"Unexpected whitespace after \\\")\\\"\",","})","","const ACCEPTABLE_AFTER_CLOSING_PAREN = new Set([","  \")\",","  \",\",","  \"}\",","  \":\",","  undefined,","])","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const declString = decl.toString()","","      styleSearch({","        source: declString,","        target: \")\",","        functionArguments: \"only\",","      }, match => {","        checkClosingParen(declString, match.startIndex, decl)","      })","    })","","    function checkClosingParen(source, index, node) {","      const nextChar = source[index + 1]","      if (expectation === \"always\") {","        // Allow for the next character to be a single empty space,","        // another closing parenthesis, a comma, or the end of the value","        if (nextChar === \" \") {","          return","        }","        if (nextChar === \"\\n\") {","          return","        }","        if (source.substr(index + 1, 2) === \"\\r\\n\") {","          return","        }","        if (ACCEPTABLE_AFTER_CLOSING_PAREN.has(nextChar)) {","          return","        }","        report({","          message: messages.expected,","          node,","          index: index + 1,","          result,","          ruleName,","        })","      } else if (expectation === \"never\") {","        if (isWhitespace(nextChar)) {","          report({","            message: messages.rejected,","            node,","            index: index + 1,","            result,","            ruleName,","          })","        }","      }","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"16":1,"24":1,"25":0,"26":0,"33":0,"34":0,"37":0,"38":0,"40":0,"45":0,"49":1,"50":0,"51":0,"54":0,"55":0,"57":0,"58":0,"60":0,"61":0,"63":0,"64":0,"66":0,"73":0,"74":0,"75":0,"88":1,"89":1,"90":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/indentation/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/indentation/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":1,"111":1,"112":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0,0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":13},"end":{"line":22,"column":30}}},"2":{"name":"indentationLevel","line":123,"loc":{"start":{"line":123,"column":4},"end":{"line":123,"column":36}}},"3":{"name":"checkValue","line":147,"loc":{"start":{"line":147,"column":4},"end":{"line":147,"column":41}}},"4":{"name":"checkSelector","line":161,"loc":{"start":{"line":161,"column":4},"end":{"line":161,"column":44}}},"5":{"name":"checkAtRuleParams","line":172,"loc":{"start":{"line":172,"column":4},"end":{"line":172,"column":50}}},"6":{"name":"checkMultilineBit","line":183,"loc":{"start":{"line":183,"column":4},"end":{"line":183,"column":65}}},"7":{"name":"legibleExpectation","line":266,"loc":{"start":{"line":266,"column":2},"end":{"line":266,"column":37}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":60}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":43}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":30}},"10":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"11":{"start":{"line":14,"column":17},"end":{"line":14,"column":47}},"12":{"start":{"line":22,"column":0},"end":{"line":271,"column":1}},"13":{"start":{"line":23,"column":2},"end":{"line":23,"column":88}},"14":{"start":{"line":25,"column":2},"end":{"line":25,"column":31}},"15":{"start":{"line":26,"column":2},"end":{"line":26,"column":56}},"16":{"start":{"line":27,"column":2},"end":{"line":27,"column":45}},"17":{"start":{"line":29,"column":2},"end":{"line":264,"column":3}},"18":{"start":{"line":30,"column":4},"end":{"line":56,"column":6}},"19":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},"20":{"start":{"line":58,"column":6},"end":{"line":58,"column":12}},"21":{"start":{"line":62,"column":4},"end":{"line":121,"column":6}},"22":{"start":{"line":63,"column":6},"end":{"line":63,"column":46}},"23":{"start":{"line":64,"column":6},"end":{"line":64,"column":64}},"24":{"start":{"line":66,"column":6},"end":{"line":66,"column":43}},"25":{"start":{"line":67,"column":6},"end":{"line":67,"column":43}},"26":{"start":{"line":74,"column":6},"end":{"line":74,"column":78}},"27":{"start":{"line":77,"column":6},"end":{"line":77,"column":131}},"28":{"start":{"line":83,"column":6},"end":{"line":90,"column":7}},"29":{"start":{"line":84,"column":8},"end":{"line":89,"column":10}},"30":{"start":{"line":96,"column":6},"end":{"line":96,"column":86}},"31":{"start":{"line":97,"column":6},"end":{"line":105,"column":7}},"32":{"start":{"line":98,"column":8},"end":{"line":104,"column":10}},"33":{"start":{"line":108,"column":6},"end":{"line":110,"column":7}},"34":{"start":{"line":109,"column":8},"end":{"line":109,"column":35}},"35":{"start":{"line":113,"column":6},"end":{"line":115,"column":7}},"36":{"start":{"line":114,"column":8},"end":{"line":114,"column":38}},"37":{"start":{"line":118,"column":6},"end":{"line":120,"column":7}},"38":{"start":{"line":119,"column":8},"end":{"line":119,"column":42}},"39":{"start":{"line":123,"column":4},"end":{"line":145,"column":5}},"40":{"start":{"line":124,"column":6},"end":{"line":124,"column":89}},"41":{"start":{"line":126,"column":6},"end":{"line":128,"column":7}},"42":{"start":{"line":127,"column":8},"end":{"line":127,"column":20}},"43":{"start":{"line":130,"column":6},"end":{"line":130,"column":25}},"44":{"start":{"line":135,"column":6},"end":{"line":135,"column":64}},"45":{"start":{"line":140,"column":6},"end":{"line":142,"column":7}},"46":{"start":{"line":141,"column":8},"end":{"line":141,"column":25}},"47":{"start":{"line":144,"column":6},"end":{"line":144,"column":28}},"48":{"start":{"line":147,"column":4},"end":{"line":159,"column":5}},"49":{"start":{"line":148,"column":6},"end":{"line":150,"column":7}},"50":{"start":{"line":149,"column":8},"end":{"line":149,"column":14}},"51":{"start":{"line":151,"column":6},"end":{"line":153,"column":7}},"52":{"start":{"line":152,"column":8},"end":{"line":152,"column":14}},"53":{"start":{"line":155,"column":6},"end":{"line":155,"column":40}},"54":{"start":{"line":156,"column":6},"end":{"line":156,"column":95}},"55":{"start":{"line":158,"column":6},"end":{"line":158,"column":53}},"56":{"start":{"line":161,"column":4},"end":{"line":170,"column":5}},"57":{"start":{"line":162,"column":6},"end":{"line":162,"column":36}},"58":{"start":{"line":165,"column":6},"end":{"line":167,"column":7}},"59":{"start":{"line":166,"column":8},"end":{"line":166,"column":22}},"60":{"start":{"line":169,"column":6},"end":{"line":169,"column":50}},"61":{"start":{"line":172,"column":4},"end":{"line":181,"column":5}},"62":{"start":{"line":173,"column":6},"end":{"line":175,"column":7}},"63":{"start":{"line":174,"column":8},"end":{"line":174,"column":14}},"64":{"start":{"line":179,"column":6},"end":{"line":179,"column":121}},"65":{"start":{"line":180,"column":6},"end":{"line":180,"column":77}},"66":{"start":{"line":183,"column":4},"end":{"line":263,"column":5}},"67":{"start":{"line":184,"column":6},"end":{"line":186,"column":7}},"68":{"start":{"line":185,"column":8},"end":{"line":185,"column":14}},"69":{"start":{"line":189,"column":6},"end":{"line":189,"column":32}},"70":{"start":{"line":190,"column":6},"end":{"line":262,"column":8}},"71":{"start":{"line":195,"column":8},"end":{"line":195,"column":95}},"72":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"73":{"start":{"line":198,"column":10},"end":{"line":198,"column":16}},"74":{"start":{"line":201,"column":8},"end":{"line":201,"column":52}},"75":{"start":{"line":203,"column":8},"end":{"line":242,"column":9}},"76":{"start":{"line":205,"column":10},"end":{"line":205,"column":55}},"77":{"start":{"line":205,"column":32},"end":{"line":205,"column":55}},"78":{"start":{"line":207,"column":10},"end":{"line":207,"column":45}},"79":{"start":{"line":208,"column":10},"end":{"line":210,"column":11}},"80":{"start":{"line":209,"column":12},"end":{"line":209,"column":26}},"81":{"start":{"line":211,"column":10},"end":{"line":211,"column":91}},"82":{"start":{"line":212,"column":10},"end":{"line":214,"column":11}},"83":{"start":{"line":213,"column":12},"end":{"line":213,"column":35}},"84":{"start":{"line":215,"column":10},"end":{"line":215,"column":51}},"85":{"start":{"line":216,"column":10},"end":{"line":218,"column":11}},"86":{"start":{"line":217,"column":12},"end":{"line":217,"column":35}},"87":{"start":{"line":220,"column":10},"end":{"line":241,"column":11}},"88":{"start":{"line":222,"column":14},"end":{"line":224,"column":15}},"89":{"start":{"line":223,"column":16},"end":{"line":223,"column":40}},"90":{"start":{"line":225,"column":14},"end":{"line":225,"column":19}},"91":{"start":{"line":227,"column":14},"end":{"line":232,"column":15}},"92":{"start":{"line":228,"column":16},"end":{"line":230,"column":17}},"93":{"start":{"line":229,"column":18},"end":{"line":229,"column":42}},"94":{"start":{"line":231,"column":16},"end":{"line":231,"column":21}},"95":{"start":{"line":233,"column":14},"end":{"line":235,"column":15}},"96":{"start":{"line":234,"column":16},"end":{"line":234,"column":40}},"97":{"start":{"line":236,"column":14},"end":{"line":236,"column":19}},"98":{"start":{"line":238,"column":14},"end":{"line":240,"column":15}},"99":{"start":{"line":239,"column":16},"end":{"line":239,"column":40}},"100":{"start":{"line":247,"column":8},"end":{"line":247,"column":95}},"101":{"start":{"line":248,"column":8},"end":{"line":250,"column":9}},"102":{"start":{"line":249,"column":10},"end":{"line":249,"column":16}},"103":{"start":{"line":251,"column":8},"end":{"line":251,"column":61}},"104":{"start":{"line":253,"column":8},"end":{"line":261,"column":9}},"105":{"start":{"line":254,"column":10},"end":{"line":260,"column":12}},"106":{"start":{"line":266,"column":2},"end":{"line":270,"column":3}},"107":{"start":{"line":267,"column":4},"end":{"line":267,"column":47}},"108":{"start":{"line":268,"column":4},"end":{"line":268,"column":79}},"109":{"start":{"line":269,"column":4},"end":{"line":269,"column":46}},"110":{"start":{"line":273,"column":0},"end":{"line":273,"column":24}},"111":{"start":{"line":274,"column":0},"end":{"line":274,"column":24}},"112":{"start":{"line":275,"column":0},"end":{"line":275,"column":21}}},"branchMap":{"1":{"line":23,"type":"cond-expr","locations":[{"start":{"line":23,"column":71},"end":{"line":23,"column":83}},{"start":{"line":23,"column":86},"end":{"line":23,"column":88}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":18},"end":{"line":23,"column":38}},{"start":{"line":23,"column":42},"end":{"line":23,"column":68}}]},"3":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":29},"end":{"line":26,"column":33}},{"start":{"line":26,"column":36},"end":{"line":26,"column":56}}]},"4":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":30},"end":{"line":27,"column":35}},{"start":{"line":27,"column":38},"end":{"line":27,"column":45}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"6":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":20},"end":{"line":66,"column":36}},{"start":{"line":66,"column":40},"end":{"line":66,"column":42}}]},"7":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":21},"end":{"line":67,"column":36}},{"start":{"line":67,"column":40},"end":{"line":67,"column":42}}]},"8":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":28},"end":{"line":74,"column":47}},{"start":{"line":74,"column":51},"end":{"line":74,"column":78}}]},"9":{"line":77,"type":"cond-expr","locations":[{"start":{"line":77,"column":88},"end":{"line":77,"column":122}},{"start":{"line":77,"column":125},"end":{"line":77,"column":131}}]},"10":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":15},"end":{"line":77,"column":48}},{"start":{"line":77,"column":52},"end":{"line":77,"column":85}}]},"11":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":6},"end":{"line":83,"column":6}},{"start":{"line":83,"column":6},"end":{"line":83,"column":6}}]},"12":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":10},"end":{"line":83,"column":23}},{"start":{"line":83,"column":27},"end":{"line":83,"column":92}}]},"13":{"line":96,"type":"cond-expr","locations":[{"start":{"line":96,"column":61},"end":{"line":96,"column":74}},{"start":{"line":96,"column":77},"end":{"line":96,"column":86}}]},"14":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":6},"end":{"line":97,"column":6}},{"start":{"line":97,"column":6},"end":{"line":97,"column":6}}]},"15":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":10},"end":{"line":97,"column":24}},{"start":{"line":97,"column":28},"end":{"line":97,"column":33}},{"start":{"line":97,"column":37},"end":{"line":97,"column":63}},{"start":{"line":97,"column":67},"end":{"line":97,"column":151}}]},"16":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":6},"end":{"line":108,"column":6}},{"start":{"line":108,"column":6},"end":{"line":108,"column":6}}]},"17":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":113,"column":6}},{"start":{"line":113,"column":6},"end":{"line":113,"column":6}}]},"18":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":6},"end":{"line":118,"column":6}},{"start":{"line":118,"column":6},"end":{"line":118,"column":6}}]},"19":{"line":124,"type":"cond-expr","locations":[{"start":{"line":124,"column":73},"end":{"line":124,"column":85}},{"start":{"line":124,"column":88},"end":{"line":124,"column":89}}]},"20":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":20},"end":{"line":124,"column":40}},{"start":{"line":124,"column":44},"end":{"line":124,"column":70}}]},"21":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":6},"end":{"line":126,"column":6}},{"start":{"line":126,"column":6},"end":{"line":126,"column":6}}]},"22":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":6},"end":{"line":140,"column":6}},{"start":{"line":140,"column":6},"end":{"line":140,"column":6}}]},"23":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":10},"end":{"line":140,"column":52}},{"start":{"line":140,"column":57},"end":{"line":140,"column":77}},{"start":{"line":140,"column":81},"end":{"line":140,"column":103}},{"start":{"line":140,"column":108},"end":{"line":140,"column":122}}]},"24":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":6},"end":{"line":148,"column":6}},{"start":{"line":148,"column":6},"end":{"line":148,"column":6}}]},"25":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":6},"end":{"line":151,"column":6}},{"start":{"line":151,"column":6},"end":{"line":151,"column":6}}]},"26":{"line":156,"type":"cond-expr","locations":[{"start":{"line":156,"column":70},"end":{"line":156,"column":79}},{"start":{"line":156,"column":82},"end":{"line":156,"column":95}}]},"27":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":6},"end":{"line":165,"column":6}},{"start":{"line":165,"column":6},"end":{"line":165,"column":6}}]},"28":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":6},"end":{"line":173,"column":6}},{"start":{"line":173,"column":6},"end":{"line":173,"column":6}}]},"29":{"line":179,"type":"cond-expr","locations":[{"start":{"line":179,"column":96},"end":{"line":179,"column":105}},{"start":{"line":179,"column":108},"end":{"line":179,"column":121}}]},"30":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":25},"end":{"line":179,"column":67}},{"start":{"line":179,"column":71},"end":{"line":179,"column":93}}]},"31":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":6},"end":{"line":184,"column":6}},{"start":{"line":184,"column":6},"end":{"line":184,"column":6}}]},"32":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":8},"end":{"line":197,"column":8}},{"start":{"line":197,"column":8},"end":{"line":197,"column":8}}]},"33":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":12},"end":{"line":197,"column":62}},{"start":{"line":197,"column":67},"end":{"line":197,"column":93}},{"start":{"line":197,"column":97},"end":{"line":197,"column":115}}]},"34":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":8},"end":{"line":203,"column":8}},{"start":{"line":203,"column":8},"end":{"line":203,"column":8}}]},"35":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":12},"end":{"line":203,"column":63}},{"start":{"line":203,"column":67},"end":{"line":203,"column":85}}]},"36":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":10},"end":{"line":205,"column":10}},{"start":{"line":205,"column":10},"end":{"line":205,"column":10}}]},"37":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":10},"end":{"line":208,"column":10}},{"start":{"line":208,"column":10},"end":{"line":208,"column":10}}]},"38":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":10},"end":{"line":212,"column":10}},{"start":{"line":212,"column":10},"end":{"line":212,"column":10}}]},"39":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":10},"end":{"line":216,"column":10}},{"start":{"line":216,"column":10},"end":{"line":216,"column":10}}]},"40":{"line":220,"type":"switch","locations":[{"start":{"line":221,"column":12},"end":{"line":225,"column":19}},{"start":{"line":226,"column":12},"end":{"line":236,"column":19}},{"start":{"line":237,"column":12},"end":{"line":240,"column":15}}]},"41":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":14},"end":{"line":222,"column":14}},{"start":{"line":222,"column":14},"end":{"line":222,"column":14}}]},"42":{"line":222,"type":"binary-expr","locations":[{"start":{"line":222,"column":18},"end":{"line":222,"column":45}},{"start":{"line":222,"column":49},"end":{"line":222,"column":75}}]},"43":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":14},"end":{"line":227,"column":14}},{"start":{"line":227,"column":14},"end":{"line":227,"column":14}}]},"44":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":16},"end":{"line":228,"column":16}},{"start":{"line":228,"column":16},"end":{"line":228,"column":16}}]},"45":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":20},"end":{"line":228,"column":46}},{"start":{"line":228,"column":50},"end":{"line":228,"column":77}}]},"46":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":14},"end":{"line":233,"column":14}},{"start":{"line":233,"column":14},"end":{"line":233,"column":14}}]},"47":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":18},"end":{"line":233,"column":45}},{"start":{"line":233,"column":49},"end":{"line":233,"column":75}}]},"48":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":14},"end":{"line":238,"column":14}},{"start":{"line":238,"column":14},"end":{"line":238,"column":14}}]},"49":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":18},"end":{"line":238,"column":44}},{"start":{"line":238,"column":48},"end":{"line":238,"column":75}}]},"50":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":8},"end":{"line":248,"column":8}},{"start":{"line":248,"column":8},"end":{"line":248,"column":8}}]},"51":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":8},"end":{"line":253,"column":8}},{"start":{"line":253,"column":8},"end":{"line":253,"column":8}}]},"52":{"line":267,"type":"cond-expr","locations":[{"start":{"line":267,"column":26},"end":{"line":267,"column":31}},{"start":{"line":267,"column":34},"end":{"line":267,"column":47}}]},"53":{"line":268,"type":"cond-expr","locations":[{"start":{"line":268,"column":48},"end":{"line":268,"column":59}},{"start":{"line":268,"column":62},"end":{"line":268,"column":79}}]}},"code":["\"use strict\"","","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const hasBlock = require(\"../../utils/hasBlock\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const styleSearch = require(\"style-search\")","","const ruleName = \"indentation\"","const messages = ruleMessages(ruleName, {","  expected: x => `Expected indentation of ${x}`,","})","","/**"," * @param {number|\"tab\"} space - Number of whitespaces to expect, or else"," *   keyword \"tab\" for single `\\t`"," * @param {object} [options]"," */","const rule = function (space) {","  const options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}","","  const isTab = space === \"tab\"","  const indentChar = isTab ? \"\\t\" : _.repeat(\" \", space)","  const warningWord = isTab ? \"tab\" : \"space\"","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: space,","      possible: [","        _.isNumber,","        \"tab\",","      ],","    }, {","      actual: options,","      possible: {","        except: [","          \"block\",","          \"value\",","          \"param\",","        ],","        ignore: [","          \"value\",","          \"param\",","          \"inside-parens\",","        ],","        indentInsideParens: [","          \"twice\",","          \"once-at-root-twice-in-block\",","        ],","        indentClosingBrace: [_.isBoolean],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    // Cycle through all nodes using walk.","    root.walk(node => {","      const nodeLevel = indentationLevel(node)","      const expectedWhitespace = _.repeat(indentChar, nodeLevel)","","      let before = (node.raws.before || \"\")","      const after = (node.raws.after || \"\")","","      // Only inspect the spaces before the node","      // if this is the first node in root","      // or there is a newline in the `before` string.","      // (If there is no newline before a node,","      // there is no \"indentation\" to check.)","      const inspectBefore = root.first === node || before.indexOf(\"\\n\") !== -1","","      // Cut out any * hacks from `before`","      before = before[before.length - 1] === \"*\" || before[before.length - 1] === \"_\" ? before.slice(0, before.length - 1) : before","","      // Inspect whitespace in the `before` string that is","      // *after* the *last* newline character,","      // because anything besides that is not indentation for this node:","      // it is some other kind of separation, checked by some separate rule","      if (inspectBefore && before.slice(before.lastIndexOf(\"\\n\") + 1) !== expectedWhitespace) {","        report({","          message: messages.expected(legibleExpectation(nodeLevel)),","          node,","          result,","          ruleName,","        })","      }","","      // Only blocks have the `after` string to check.","      // Only inspect `after` strings that start with a newline;","      // otherwise there's no indentation involved.","      // And check `indentClosingBrace` to see if it should be indented an extra level.","      const closingBraceLevel = options.indentClosingBrace ? nodeLevel + 1 : nodeLevel","      if (hasBlock(node) && after && after.indexOf(\"\\n\") !== -1 && after.slice(after.lastIndexOf(\"\\n\") + 1) !== _.repeat(indentChar, closingBraceLevel)) {","        report({","          message: messages.expected(legibleExpectation(closingBraceLevel)),","          node,","          index: node.toString().length - 1,","          result,","          ruleName,","        })","      }","","      // If this is a declaration, check the value","      if (node.value) {","        checkValue(node, nodeLevel)","      }","","      // If this is a rule, check the selector","      if (node.selector) {","        checkSelector(node, nodeLevel)","      }","","      // If this is an at rule, check the params","      if (node.type === \"atrule\") {","        checkAtRuleParams(node, nodeLevel)","      }","    })","","    function indentationLevel(node) {","      const level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0","","      if (node.parent.type === \"root\") {","        return level","      }","","      let calculatedLevel","","      // Indentation level equals the ancestor nodes","      // separating this node from root; so recursively","      // run this operation","      calculatedLevel = indentationLevel(node.parent, level + 1)","","      // If options.except includes \"block\",","      // blocks are taken down one from their calculated level","      // (all blocks are the same level as their parents)","      if (optionsMatches(options, \"except\", \"block\") && (node.type === \"rule\" || node.type === \"atrule\") && hasBlock(node)) {","        calculatedLevel--","      }","","      return calculatedLevel","    }","","    function checkValue(decl, declLevel) {","      if (decl.value.indexOf(\"\\n\") === -1) {","        return","      }","      if (optionsMatches(options, \"ignore\", \"value\")) {","        return","      }","","      const declString = decl.toString()","      const valueLevel = optionsMatches(options, \"except\", \"value\") ? declLevel : declLevel + 1","","      checkMultilineBit(declString, valueLevel, decl)","    }","","    function checkSelector(rule, ruleLevel) {","      const selector = rule.selector","","      // Less mixins have params, and they should be indented extra","      if (rule.params) {","        ruleLevel += 1","      }","","      checkMultilineBit(selector, ruleLevel, rule)","    }","","    function checkAtRuleParams(atRule, ruleLevel) {","      if (optionsMatches(options, \"ignore\", \"param\")) {","        return","      }","","      // @nest rules should be treated like regular rules, not expected","      // to have their params (selectors) indented","      const paramLevel = optionsMatches(options, \"except\", \"param\") || atRule.name === \"nest\" ? ruleLevel : ruleLevel + 1","      checkMultilineBit(beforeBlockString(atRule).trim(), paramLevel, atRule)","    }","","    function checkMultilineBit(source, newlineIndentLevel, node) {","      if (source.indexOf(\"\\n\") === -1) {","        return","      }","      // `outsideParens` because function arguments and also non-standard parenthesized stuff like","      // Sass maps are ignored to allow for arbitrary indentation","      let parentheticalDepth = 0","      styleSearch({","        source,","        target: \"\\n\",","        outsideParens: optionsMatches(options, \"ignore\", \"inside-parens\"),","      }, (match, matchCount) => {","        const precedesClosingParenthesis = /^[ \\t]*\\)/.test(source.slice(match.startIndex + 1))","","        if (optionsMatches(options, \"ignore\", \"inside-parens\") && (precedesClosingParenthesis || match.insideParens)) {","          return","        }","","        let expectedIndentLevel = newlineIndentLevel","        // Modififications for parenthetical content","        if (!optionsMatches(options, \"ignore\", \"inside-parens\") && match.insideParens) {","          // If the first match in is within parentheses, reduce the parenthesis penalty","          if (matchCount === 1) parentheticalDepth -= 1","          // Account for windows line endings","          let newlineIndex = match.startIndex","          if (source[match.startIndex - 1] === \"\\r\") {","            newlineIndex--","          }","          const followsOpeningParenthesis = /\\([ \\t]*$/.test(source.slice(0, newlineIndex))","          if (followsOpeningParenthesis) {","            parentheticalDepth += 1","          }","          expectedIndentLevel += parentheticalDepth","          if (precedesClosingParenthesis) {","            parentheticalDepth -= 1","          }","","          switch (options.indentInsideParens) {","            case \"twice\":","              if (!precedesClosingParenthesis || options.indentClosingBrace) {","                expectedIndentLevel += 1","              }","              break","            case \"once-at-root-twice-in-block\":","              if (node.parent === root) {","                if (precedesClosingParenthesis && !options.indentClosingBrace) {","                  expectedIndentLevel -= 1","                }","                break","              }","              if (!precedesClosingParenthesis || options.indentClosingBrace) {","                expectedIndentLevel += 1","              }","              break","            default:","              if (precedesClosingParenthesis && !options.indentClosingBrace) {","                expectedIndentLevel -= 1","              }","          }","        }","","        // Starting at the index after the newline, we want to","        // check that the whitespace characters (excluding newlines) before the first","        // non-whitespace character equal the expected indentation","        const afterNewlineSpaceMatches = /^([ \\t]*)\\S/.exec(source.slice(match.startIndex + 1))","        if (!afterNewlineSpaceMatches) {","          return","        }","        const afterNewlineSpace = afterNewlineSpaceMatches[1]","","        if (afterNewlineSpace !== _.repeat(indentChar, expectedIndentLevel)) {","          report({","            message: messages.expected(legibleExpectation(expectedIndentLevel)),","            node,","            index: match.startIndex + afterNewlineSpace.length + 1,","            result,","            ruleName,","          })","        }","      })","    }","  }","","  function legibleExpectation(level) {","    const count = isTab ? level : level * space","    const quantifiedWarningWord = count === 1 ? warningWord : warningWord + \"s\"","    return `${count} ${quantifiedWarningWord}`","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"13":1,"14":0,"22":1,"23":0,"25":0,"26":0,"27":0,"29":0,"30":0,"57":0,"58":0,"62":0,"63":0,"64":0,"66":0,"67":0,"74":0,"77":0,"83":0,"84":0,"96":0,"97":0,"98":0,"108":0,"109":0,"113":0,"114":0,"118":0,"119":0,"123":1,"124":0,"126":0,"127":0,"130":0,"135":0,"140":0,"141":0,"144":0,"147":1,"148":0,"149":0,"151":0,"152":0,"155":0,"156":0,"158":0,"161":1,"162":0,"165":0,"166":0,"169":0,"172":1,"173":0,"174":0,"179":0,"180":0,"183":1,"184":0,"185":0,"189":0,"190":0,"195":0,"197":0,"198":0,"201":0,"203":0,"205":0,"207":0,"208":0,"209":0,"211":0,"212":0,"213":0,"215":0,"216":0,"217":0,"220":0,"222":0,"223":0,"225":0,"227":0,"228":0,"229":0,"231":0,"233":0,"234":0,"236":0,"238":0,"239":0,"247":0,"248":0,"249":0,"251":0,"253":0,"254":0,"266":1,"267":0,"268":0,"269":0,"273":1,"274":1,"275":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/keyframe-declaration-no-important/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/keyframe-declaration-no-important/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":52}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":13,"column":0},"end":{"line":35,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":34,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":70}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"10":{"start":{"line":17,"column":6},"end":{"line":17,"column":12}},"11":{"start":{"line":20,"column":4},"end":{"line":33,"column":6}},"12":{"start":{"line":21,"column":6},"end":{"line":32,"column":8}},"13":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"14":{"start":{"line":23,"column":10},"end":{"line":23,"column":16}},"15":{"start":{"line":25,"column":8},"end":{"line":31,"column":10}},"16":{"start":{"line":37,"column":0},"end":{"line":37,"column":24}},"17":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"18":{"start":{"line":39,"column":0},"end":{"line":39,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":8}},{"start":{"line":22,"column":8},"end":{"line":22,"column":8}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"keyframe-declaration-no-important\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected !important\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^(-(moz|webkit)-)?keyframes$/i, atRuleKeyframes => {","      atRuleKeyframes.walkDecls(decl => {","        if (!decl.important) {","          return","        }","        report({","          message: messages.rejected,","          node: decl,","          word: \"important\",","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"13":1,"14":0,"15":0,"16":0,"17":0,"20":0,"21":0,"22":0,"23":0,"25":0,"37":1,"38":1,"39":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/length-zero-no-unit/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/length-zero-no-unit/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":1,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":31}}},"2":{"name":"check","line":36,"loc":{"start":{"line":36,"column":4},"end":{"line":36,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":58}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":43}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":38}},"12":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"13":{"start":{"line":20,"column":0},"end":{"line":115,"column":1}},"14":{"start":{"line":21,"column":2},"end":{"line":114,"column":3}},"15":{"start":{"line":22,"column":4},"end":{"line":22,"column":70}},"16":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"17":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"18":{"start":{"line":27,"column":4},"end":{"line":29,"column":6}},"19":{"start":{"line":28,"column":6},"end":{"line":28,"column":48}},"20":{"start":{"line":31,"column":4},"end":{"line":34,"column":6}},"21":{"start":{"line":32,"column":6},"end":{"line":32,"column":108}},"22":{"start":{"line":33,"column":6},"end":{"line":33,"column":27}},"23":{"start":{"line":36,"column":4},"end":{"line":113,"column":5}},"24":{"start":{"line":37,"column":6},"end":{"line":37,"column":40}},"25":{"start":{"line":39,"column":6},"end":{"line":112,"column":8}},"26":{"start":{"line":40,"column":8},"end":{"line":40,"column":38}},"27":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"28":{"start":{"line":56,"column":10},"end":{"line":56,"column":16}},"29":{"start":{"line":59,"column":8},"end":{"line":67,"column":10}},"30":{"start":{"line":60,"column":10},"end":{"line":66,"column":32}},"31":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"32":{"start":{"line":71,"column":10},"end":{"line":71,"column":16}},"33":{"start":{"line":75,"column":8},"end":{"line":75,"column":91}},"34":{"start":{"line":77,"column":8},"end":{"line":83,"column":10}},"35":{"start":{"line":78,"column":10},"end":{"line":82,"column":32}},"36":{"start":{"line":86,"column":8},"end":{"line":86,"column":117}},"37":{"start":{"line":88,"column":8},"end":{"line":88,"column":79}},"38":{"start":{"line":89,"column":8},"end":{"line":89,"column":59}},"39":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"40":{"start":{"line":92,"column":10},"end":{"line":92,"column":16}},"41":{"start":{"line":97,"column":8},"end":{"line":97,"column":91}},"42":{"start":{"line":97,"column":67},"end":{"line":97,"column":90}},"43":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"44":{"start":{"line":102,"column":10},"end":{"line":102,"column":16}},"45":{"start":{"line":105,"column":8},"end":{"line":111,"column":10}},"46":{"start":{"line":117,"column":0},"end":{"line":117,"column":24}},"47":{"start":{"line":118,"column":0},"end":{"line":118,"column":24}},"48":{"start":{"line":119,"column":0},"end":{"line":119,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":32,"type":"cond-expr","locations":[{"start":{"line":32,"column":40},"end":{"line":32,"column":88}},{"start":{"line":32,"column":91},"end":{"line":32,"column":108}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"4":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"5":{"line":75,"type":"cond-expr","locations":[{"start":{"line":75,"column":64},"end":{"line":75,"column":65}},{"start":{"line":75,"column":68},"end":{"line":75,"column":91}}]},"6":{"line":86,"type":"cond-expr","locations":[{"start":{"line":86,"column":62},"end":{"line":86,"column":74}},{"start":{"line":86,"column":77},"end":{"line":86,"column":117}}]},"7":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":91,"column":8}},{"start":{"line":91,"column":8},"end":{"line":91,"column":8}}]},"8":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":12},"end":{"line":91,"column":24}},{"start":{"line":91,"column":28},"end":{"line":91,"column":39}},{"start":{"line":91,"column":43},"end":{"line":91,"column":60}}]},"9":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":101,"column":8}},{"start":{"line":101,"column":8},"end":{"line":101,"column":8}}]},"10":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":12},"end":{"line":101,"column":47}},{"start":{"line":101,"column":51},"end":{"line":101,"column":111}}]}},"code":["\"use strict\"","","const beforeBlockString = require(\"../../utils/beforeBlockString\")","const blurComments = require(\"../../utils/blurComments\")","const hasBlock = require(\"../../utils/hasBlock\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const keywordSets = require(\"../../reference/keywordSets\")","const styleSearch = require(\"style-search\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"length-zero-no-unit\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected unit\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      check(blurComments(decl.toString()), decl)","    })","","    root.walkAtRules(atRule => {","      const source = hasBlock(atRule) ? beforeBlockString(atRule, { noRawBefore: true }) : atRule.toString()","      check(source, atRule)","    })","","    function check(value, node) {","      const ignorableIndexes = new Set()","","      styleSearch({ source: value, target: \"0\" }, match => {","        const index = match.startIndex","","        // Given a 0 somewhere in the full property value (not in a string, thanks","        // to styleSearch) we need to isolate the value that contains the zero.","        // To do so, we'll find the last index before the 0 of a character that would","        // divide one value in a list from another, and the next index of such a","        // character; then we build a substring from those indexes, which we can","        // assess.","","        // If a single value includes multiple 0's (e.g. 100.01px), we don't want","        // each 0 to be treated as a separate value, possibly resulting in multiple","        // warnings for the same value (e.g. 0.00px).","        //","        // This check prevents that from happening: we build and check against a","        // Set containing all the indexes that are part of a value already validated.","        if (ignorableIndexes.has(index)) {","          return","        }","","        const prevValueBreakIndex = _.findLastIndex(value.substr(0, index), char => {","          return [","            \" \",","            \",\",","            \")\",","            \"(\",","            \"#\",","          ].indexOf(char) !== -1","        })","","        // Ignore hex colors","        if (value[prevValueBreakIndex] === \"#\") {","          return","        }","","        // If no prev break was found, this value starts at 0","        const valueWithZeroStart = prevValueBreakIndex === -1 ? 0 : prevValueBreakIndex + 1","","        const nextValueBreakIndex = _.findIndex(value.substr(valueWithZeroStart), char => {","          return [","            \" \",","            \",\",","            \")\",","          ].indexOf(char) !== -1","        })","","        // If no next break was found, this value ends at the end of the string","        const valueWithZeroEnd = nextValueBreakIndex === -1 ? value.length : nextValueBreakIndex + valueWithZeroStart","","        const valueWithZero = value.slice(valueWithZeroStart, valueWithZeroEnd)","        const parsedValue = valueParser.unit(valueWithZero)","","        if (!parsedValue || parsedValue && !parsedValue.unit) {","          return","        }","","        // Add the indexes to ignorableIndexes so the same value will not","        // be checked multiple times.","        _.range(valueWithZeroStart, valueWithZeroEnd).forEach(i => ignorableIndexes.add(i))","","        // Only pay attention if the value parses to 0","        // and units with lengths","        if (parseFloat(valueWithZero, 10) !== 0 || !keywordSets.lengthUnits.has(parsedValue.unit.toLowerCase())) {","          return","        }","","        report({","          message: messages.rejected,","          node,","          index: valueWithZeroEnd - parsedValue.unit.length,","          result,","          ruleName,","        })","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"20":1,"21":0,"22":0,"23":0,"24":0,"27":0,"28":0,"31":0,"32":0,"33":0,"36":1,"37":0,"39":0,"40":0,"55":0,"56":0,"59":0,"60":0,"70":0,"71":0,"75":0,"77":0,"78":0,"86":0,"88":0,"89":0,"91":0,"92":0,"97":0,"101":0,"102":0,"105":0,"117":1,"118":1,"119":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/blurComments.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/blurComments.js","s":{"1":1,"2":0,"3":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":3,"loc":{"start":{"line":3,"column":17},"end":{"line":3,"column":59}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":102}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":48}}},"branchMap":{"1":{"line":4,"type":"cond-expr","locations":[{"start":{"line":4,"column":84},"end":{"line":4,"column":96}},{"start":{"line":4,"column":99},"end":{"line":4,"column":102}}]},"2":{"line":4,"type":"binary-expr","locations":[{"start":{"line":4,"column":31},"end":{"line":4,"column":51}},{"start":{"line":4,"column":55},"end":{"line":4,"column":81}}]}},"code":["/* @flow */","\"use strict\"","module.exports = function (source/*: string*/)/*: string*/ {","  const blurChar/*: string*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"`\"","","  return source.replace(/\\/\\*.*\\*\\//g, blurChar)","}",""],"l":{"3":1,"4":0,"6":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/max-empty-lines/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/max-empty-lines/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":1,"39":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":37}}},"2":{"name":"checkMatch","line":58,"loc":{"start":{"line":58,"column":4},"end":{"line":58,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":19},"end":{"line":13,"column":63}},"10":{"start":{"line":16,"column":0},"end":{"line":81,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":37}},"12":{"start":{"line":19,"column":2},"end":{"line":80,"column":3}},"13":{"start":{"line":20,"column":4},"end":{"line":31,"column":6}},"14":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"15":{"start":{"line":33,"column":6},"end":{"line":33,"column":12}},"16":{"start":{"line":36,"column":4},"end":{"line":36,"column":38}},"17":{"start":{"line":37,"column":4},"end":{"line":37,"column":64}},"18":{"start":{"line":38,"column":4},"end":{"line":38,"column":68}},"19":{"start":{"line":39,"column":4},"end":{"line":39,"column":72}},"20":{"start":{"line":41,"column":4},"end":{"line":43,"column":6}},"21":{"start":{"line":42,"column":6},"end":{"line":42,"column":50}},"22":{"start":{"line":49,"column":4},"end":{"line":56,"column":5}},"23":{"start":{"line":50,"column":6},"end":{"line":55,"column":8}},"24":{"start":{"line":51,"column":8},"end":{"line":51,"column":92}},"25":{"start":{"line":52,"column":8},"end":{"line":54,"column":10}},"26":{"start":{"line":53,"column":10},"end":{"line":53,"column":56}},"27":{"start":{"line":58,"column":4},"end":{"line":79,"column":5}},"28":{"start":{"line":59,"column":6},"end":{"line":59,"column":90}},"29":{"start":{"line":61,"column":6},"end":{"line":61,"column":32}},"30":{"start":{"line":62,"column":6},"end":{"line":66,"column":7}},"31":{"start":{"line":63,"column":8},"end":{"line":63,"column":60}},"32":{"start":{"line":64,"column":13},"end":{"line":66,"column":7}},"33":{"start":{"line":65,"column":8},"end":{"line":65,"column":64}},"34":{"start":{"line":68,"column":6},"end":{"line":70,"column":7}},"35":{"start":{"line":69,"column":8},"end":{"line":69,"column":14}},"36":{"start":{"line":72,"column":6},"end":{"line":78,"column":8}},"37":{"start":{"line":83,"column":0},"end":{"line":83,"column":24}},"38":{"start":{"line":84,"column":0},"end":{"line":84,"column":24}},"39":{"start":{"line":85,"column":0},"end":{"line":85,"column":21}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"3":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":24},"end":{"line":51,"column":41}},{"start":{"line":51,"column":45},"end":{"line":51,"column":47}}]},"4":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":67},"end":{"line":51,"column":85}},{"start":{"line":51,"column":89},"end":{"line":51,"column":91}}]},"5":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":74},"end":{"line":59,"column":86}},{"start":{"line":59,"column":89},"end":{"line":59,"column":90}}]},"6":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":21},"end":{"line":59,"column":41}},{"start":{"line":59,"column":45},"end":{"line":59,"column":71}}]},"7":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"8":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":13},"end":{"line":64,"column":13}},{"start":{"line":64,"column":13},"end":{"line":64,"column":13}}]},"9":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"max-empty-lines\"","","const messages = ruleMessages(ruleName, {","  expected: max => `Expected no more than ${max} empty line(s)`,","})","","const rule = function (max, options) {","  const maxAdjacentNewlines = max + 1","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: max,","      possible: _.isNumber,","    }, {","      actual: options,","      possible: {","        ignore: [","          \"comments\",","        ],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    const rootString = root.toString()","    const repeatLFNewLines = _.repeat(\"\\n\", maxAdjacentNewlines)","    const repeatCRLFNewLines = _.repeat(\"\\r\\n\", maxAdjacentNewlines)","    const ignoreComments = optionsMatches(options, \"ignore\", \"comments\")","","    styleSearch({ source: rootString, target: \"\\n\" }, match => {","      checkMatch(rootString, match.endIndex, root)","    })","","    // We must check comments separately in order to accommodate stupid","    // `//`-comments from SCSS, which postcss-scss converts to `/* ... */`,","    // which adds to extra characters at the end, which messes up our","    // warning position","    if (!ignoreComments) {","      root.walkComments(comment => {","        const source = (comment.raws.left || \"\") + comment.text + (comment.raws.right || \"\")","        styleSearch({ source, target: \"\\n\" }, match => {","          checkMatch(source, match.endIndex, comment, 2)","        })","      })","    }","","    function checkMatch(source, matchEndIndex, node) {","      const offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0","","      let violationIndex = false","      if (source.substr(matchEndIndex, maxAdjacentNewlines) === repeatLFNewLines) {","        violationIndex = matchEndIndex + maxAdjacentNewlines","      } else if (source.substr(matchEndIndex, maxAdjacentNewlines * 2) === repeatCRLFNewLines) {","        violationIndex = matchEndIndex + maxAdjacentNewlines * 2","      }","","      if (!violationIndex) {","        return","      }","","      report({","        message: messages.expected(max),","        node,","        index: violationIndex + offset,","        result,","        ruleName,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"19":0,"20":0,"32":0,"33":0,"36":0,"37":0,"38":0,"39":0,"41":0,"42":0,"49":0,"50":0,"51":0,"52":0,"53":0,"58":1,"59":0,"61":0,"62":0,"63":0,"64":0,"65":0,"68":0,"69":0,"72":0,"83":1,"84":1,"85":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/max-line-length/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/max-line-length/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":1,"59":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":43}}},"2":{"name":"complain","line":48,"loc":{"start":{"line":48,"column":4},"end":{"line":48,"column":29}}},"3":{"name":"checkNewline","line":58,"loc":{"start":{"line":58,"column":4},"end":{"line":58,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":17},"end":{"line":14,"column":74}},"11":{"start":{"line":17,"column":0},"end":{"line":132,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":131,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":32,"column":6}},"14":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"15":{"start":{"line":34,"column":6},"end":{"line":34,"column":12}},"16":{"start":{"line":37,"column":4},"end":{"line":37,"column":44}},"17":{"start":{"line":39,"column":4},"end":{"line":39,"column":79}},"18":{"start":{"line":40,"column":4},"end":{"line":40,"column":72}},"19":{"start":{"line":43,"column":4},"end":{"line":43,"column":33}},"20":{"start":{"line":46,"column":4},"end":{"line":46,"column":88}},"21":{"start":{"line":48,"column":4},"end":{"line":56,"column":5}},"22":{"start":{"line":49,"column":6},"end":{"line":55,"column":8}},"23":{"start":{"line":58,"column":4},"end":{"line":130,"column":5}},"24":{"start":{"line":59,"column":6},"end":{"line":59,"column":69}},"25":{"start":{"line":60,"column":6},"end":{"line":62,"column":7}},"26":{"start":{"line":61,"column":8},"end":{"line":61,"column":29}},"27":{"start":{"line":65,"column":6},"end":{"line":67,"column":7}},"28":{"start":{"line":66,"column":8},"end":{"line":66,"column":44}},"29":{"start":{"line":69,"column":6},"end":{"line":69,"column":61}},"30":{"start":{"line":70,"column":6},"end":{"line":70,"column":73}},"31":{"start":{"line":72,"column":6},"end":{"line":74,"column":7}},"32":{"start":{"line":73,"column":8},"end":{"line":73,"column":14}},"33":{"start":{"line":76,"column":6},"end":{"line":78,"column":11}},"34":{"start":{"line":77,"column":8},"end":{"line":77,"column":56}},"35":{"start":{"line":80,"column":6},"end":{"line":82,"column":11}},"36":{"start":{"line":81,"column":8},"end":{"line":81,"column":56}},"37":{"start":{"line":88,"column":6},"end":{"line":90,"column":7}},"38":{"start":{"line":89,"column":8},"end":{"line":89,"column":14}},"39":{"start":{"line":92,"column":6},"end":{"line":92,"column":49}},"40":{"start":{"line":94,"column":6},"end":{"line":106,"column":7}},"41":{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},"42":{"start":{"line":96,"column":10},"end":{"line":96,"column":16}},"43":{"start":{"line":102,"column":8},"end":{"line":102,"column":80}},"44":{"start":{"line":103,"column":8},"end":{"line":105,"column":9}},"45":{"start":{"line":104,"column":10},"end":{"line":104,"column":16}},"46":{"start":{"line":108,"column":6},"end":{"line":121,"column":7}},"47":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"48":{"start":{"line":110,"column":10},"end":{"line":110,"column":41}},"49":{"start":{"line":116,"column":8},"end":{"line":116,"column":80}},"50":{"start":{"line":117,"column":8},"end":{"line":119,"column":9}},"51":{"start":{"line":118,"column":10},"end":{"line":118,"column":16}},"52":{"start":{"line":120,"column":8},"end":{"line":120,"column":39}},"53":{"start":{"line":124,"column":6},"end":{"line":124,"column":75}},"54":{"start":{"line":125,"column":6},"end":{"line":127,"column":7}},"55":{"start":{"line":126,"column":8},"end":{"line":126,"column":14}},"56":{"start":{"line":129,"column":6},"end":{"line":129,"column":37}},"57":{"start":{"line":134,"column":0},"end":{"line":134,"column":24}},"58":{"start":{"line":135,"column":0},"end":{"line":135,"column":24}},"59":{"start":{"line":136,"column":0},"end":{"line":136,"column":21}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"2":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"3":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":6}},{"start":{"line":65,"column":6},"end":{"line":65,"column":6}}]},"4":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":6},"end":{"line":72,"column":6}},{"start":{"line":72,"column":6},"end":{"line":72,"column":6}}]},"5":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":6},"end":{"line":88,"column":6}},{"start":{"line":88,"column":6},"end":{"line":88,"column":6}}]},"6":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":6},"end":{"line":94,"column":6}},{"start":{"line":94,"column":6},"end":{"line":94,"column":6}}]},"7":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":8},"end":{"line":95,"column":8}},{"start":{"line":95,"column":8},"end":{"line":95,"column":8}}]},"8":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":8},"end":{"line":103,"column":8}},{"start":{"line":103,"column":8},"end":{"line":103,"column":8}}]},"9":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":12},"end":{"line":103,"column":33}},{"start":{"line":103,"column":37},"end":{"line":103,"column":58}}]},"10":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":6},"end":{"line":108,"column":6}},{"start":{"line":108,"column":6},"end":{"line":108,"column":6}}]},"11":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":8}},{"start":{"line":109,"column":8},"end":{"line":109,"column":8}}]},"12":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8}},{"start":{"line":117,"column":8},"end":{"line":117,"column":8}}]},"13":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":12},"end":{"line":117,"column":33}},{"start":{"line":117,"column":37},"end":{"line":117,"column":58}}]},"14":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":6},"end":{"line":125,"column":6}},{"start":{"line":125,"column":6},"end":{"line":125,"column":6}}]}},"code":["\"use strict\"","","const execall = require(\"execall\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const styleSearch = require(\"style-search\")","","const ruleName = \"max-line-length\"","","const messages = ruleMessages(ruleName, {","  expected: l => `Expected line length to be no more than ${l} characters`,","})","","const rule = function (maxLength, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: maxLength,","      possible: _.isNumber,","    }, {","      actual: options,","      possible: {","        ignore: [","          \"non-comments\",","          \"comments\",","        ],","        ignorePattern: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    const rootString = root.source.input.css","","    const ignoreNonComments = optionsMatches(options, \"ignore\", \"non-comments\")","    const ignoreComments = optionsMatches(options, \"ignore\", \"comments\")","","    // Check first line","    checkNewline({ endIndex: 0 })","","    // Check subsequent lines","    styleSearch({ source: rootString, target: [\"\\n\"], comments: \"check\" }, checkNewline)","","    function complain(index) {","      report({","        index,","        result,","        ruleName,","        message: messages.expected(maxLength),","        node: root,","      })","    }","","    function checkNewline(match) {","      let nextNewlineIndex = rootString.indexOf(\"\\n\", match.endIndex)","      if (rootString[nextNewlineIndex - 1] === \"\\r\") {","        nextNewlineIndex -= 1","      }","","      // Accommodate last line","      if (nextNewlineIndex === -1) {","        nextNewlineIndex = rootString.length","      }","","      const rawLineLength = nextNewlineIndex - match.endIndex","      const lineText = rootString.slice(match.endIndex, nextNewlineIndex)","","      if (optionsMatches(options, \"ignorePattern\", lineText)) {","        return","      }","","      const urlArgumentsLength = execall(/url\\((.*)\\)/ig, lineText).reduce((result, match) => {","        return result + _.get(match, \"sub[0].length\", 0)","      }, 0)","","      const importUrlsLength = execall(/\\@import\\s+(['\"].*['\"])/ig, lineText).reduce((result, match) => {","        return result + _.get(match, \"sub[0].length\", 0)","      }, 0)","","      // If the line's length is less than or equal to the specified","      // max, ignore it ... So anything below is liable to be complained about.","      // **Note that the length of any url arguments or import urls","      // are excluded from the calculation.**","      if (rawLineLength - urlArgumentsLength - importUrlsLength <= maxLength) {","        return","      }","","      const complaintIndex = nextNewlineIndex - 1","","      if (ignoreComments) {","        if (match.insideComment) {","          return","        }","","        // This trimming business is to notice when the line starts a","        // comment but that comment is indented, e.g.","        //       /* something here */","        const nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2)","        if (nextTwoChars === \"/*\" || nextTwoChars === \"//\") {","          return","        }","      }","","      if (ignoreNonComments) {","        if (match.insideComment) {","          return complain(complaintIndex)","        }","","        // This trimming business is to notice when the line starts a","        // comment but that comment is indented, e.g.","        //       /* something here */","        const nextTwoChars = rootString.slice(match.endIndex).trim().slice(0, 2)","        if (nextTwoChars !== \"/*\" && nextTwoChars !== \"//\") {","          return","        }","        return complain(complaintIndex)","      }","","      // If there are no spaces besides initial (indent) spaces, ignore it","      const lineString = rootString.slice(match.endIndex, nextNewlineIndex)","      if (lineString.replace(/^\\s+/, \"\").indexOf(\" \") === -1) {","        return","      }","","      return complain(complaintIndex)","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"33":0,"34":0,"37":0,"39":0,"40":0,"43":0,"46":0,"48":1,"49":0,"58":1,"59":0,"60":0,"61":0,"65":0,"66":0,"69":0,"70":0,"72":0,"73":0,"76":0,"77":0,"80":0,"81":0,"88":0,"89":0,"92":0,"94":0,"95":0,"96":0,"102":0,"103":0,"104":0,"108":0,"109":0,"110":0,"116":0,"117":0,"118":0,"120":0,"124":0,"125":0,"126":0,"129":0,"134":1,"135":1,"136":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/max-nesting-depth/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/max-nesting-depth/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":1,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":37}}},"2":{"name":"checkStatement","line":48,"loc":{"start":{"line":48,"column":4},"end":{"line":48,"column":39}}},"3":{"name":"nestingDepth","line":67,"loc":{"start":{"line":67,"column":2},"end":{"line":67,"column":37}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":21},"end":{"line":13,"column":73}},"10":{"start":{"line":16,"column":0},"end":{"line":93,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":179}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":110}},"13":{"start":{"line":18,"column":33},"end":{"line":18,"column":110}},"14":{"start":{"line":20,"column":2},"end":{"line":65,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":36,"column":4},"end":{"line":43,"column":5}},"17":{"start":{"line":37,"column":6},"end":{"line":42,"column":8}},"18":{"start":{"line":45,"column":4},"end":{"line":45,"column":34}},"19":{"start":{"line":46,"column":4},"end":{"line":46,"column":36}},"20":{"start":{"line":48,"column":4},"end":{"line":64,"column":5}},"21":{"start":{"line":49,"column":6},"end":{"line":51,"column":7}},"22":{"start":{"line":50,"column":8},"end":{"line":50,"column":14}},"23":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"24":{"start":{"line":53,"column":8},"end":{"line":53,"column":14}},"25":{"start":{"line":55,"column":6},"end":{"line":55,"column":43}},"26":{"start":{"line":56,"column":6},"end":{"line":63,"column":7}},"27":{"start":{"line":57,"column":8},"end":{"line":62,"column":10}},"28":{"start":{"line":67,"column":2},"end":{"line":92,"column":3}},"29":{"start":{"line":68,"column":4},"end":{"line":68,"column":22}},"30":{"start":{"line":69,"column":4},"end":{"line":69,"column":30}},"31":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"32":{"start":{"line":72,"column":6},"end":{"line":72,"column":14}},"33":{"start":{"line":79,"column":4},"end":{"line":81,"column":5}},"34":{"start":{"line":80,"column":6},"end":{"line":80,"column":18}},"35":{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},"36":{"start":{"line":83,"column":95},"end":{"line":83,"column":116}},"37":{"start":{"line":84,"column":6},"end":{"line":84,"column":40}},"38":{"start":{"line":91,"column":4},"end":{"line":91,"column":42}},"39":{"start":{"line":95,"column":0},"end":{"line":95,"column":24}},"40":{"start":{"line":96,"column":0},"end":{"line":96,"column":24}},"41":{"start":{"line":97,"column":0},"end":{"line":97,"column":21}}},"branchMap":{"1":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":48},"end":{"line":17,"column":120}},{"start":{"line":17,"column":124},"end":{"line":17,"column":179}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":33},"end":{"line":18,"column":55}},{"start":{"line":18,"column":59},"end":{"line":18,"column":110}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"5":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":6},"end":{"line":56,"column":6}},{"start":{"line":56,"column":6},"end":{"line":56,"column":6}}]},"7":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":17}},{"start":{"line":68,"column":21},"end":{"line":68,"column":22}}]},"8":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"9":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"10":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":30}},{"start":{"line":79,"column":34},"end":{"line":79,"column":58}},{"start":{"line":79,"column":62},"end":{"line":79,"column":91}}]},"11":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"12":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":45}},{"start":{"line":83,"column":49},"end":{"line":83,"column":71}},{"start":{"line":83,"column":75},"end":{"line":83,"column":117}}]}},"code":["\"use strict\"","","const hasBlock = require(\"../../utils/hasBlock\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","","const ruleName = \"max-nesting-depth\"","","const messages = ruleMessages(ruleName, {","  expected: depth => `Expected nesting depth to be no more than ${depth}`,","})","","const rule = function (max, options) {","  const ignoreAtRulesWithoutDeclarationBlocks = optionsMatches(options, \"ignore\", \"at-rules-without-declaration-blocks\") || optionsMatches(options, \"ignore\", \"blockless-at-rules\")","  const isIgnoreAtRule = node => node.type === \"atrule\" && optionsMatches(options, \"ignoreAtRules\", node.name)","","  return (root, result) => {","    validateOptions(result, ruleName, {","      actual: max,","      possible: [_.isNumber],","    }, {","      optional: true,","      actual: options,","      possible: {","        ignore: [","          \"at-rules-without-declaration-blocks\",","          \"blockless-at-rules\",","        ],","        ignoreAtRules: [_.isString],","      },","    })","","    if (optionsMatches(options, \"ignore\", \"at-rules-without-declaration-blocks\")) {","      result.warn((","        \"'max-nesting-depth\\'s' \\\"at-rules-without-declaration-blocks\\\" option has been deprecated and in 8.0 will be removed. Instead use the \\\"blockless-at-rules\\\" option.\"","      ), {","        stylelintType: \"deprecation\",","        stylelintReference: \"https://stylelint.io/user-guide/rules/max-nesting-depth/\",","      })","    }","","    root.walkRules(checkStatement)","    root.walkAtRules(checkStatement)","","    function checkStatement(statement) {","      if (isIgnoreAtRule(statement)) {","        return","      }","      if (!hasBlock(statement)) {","        return","      }","      const depth = nestingDepth(statement)","      if (depth > max) {","        report({","          ruleName,","          result,","          node: statement,","          message: messages.expected(max),","        })","      }","    }","  }","","  function nestingDepth(node, level) {","    level = level || 0","    const parent = node.parent","","    if (isIgnoreAtRule(parent)) {","      return 0","    }","","    // The nesting depth level's computation has finished","    // when this function, recursively called, receives","    // a node that is not nested -- a direct child of the","    // root node","    if (parent.type === \"root\" || parent.type === \"atrule\" && parent.parent.type === \"root\") {","      return level","    }","","    if (ignoreAtRulesWithoutDeclarationBlocks && node.type === \"atrule\" && node.every(child => child.type !== \"decl\")) {","      return nestingDepth(parent, level)","    }","","    // Unless any of the conditions above apply, we want to","    // add 1 to the nesting depth level and then check the parent,","    // continuing to add and move up the hierarchy","    // until we hit the root node","    return nestingDepth(parent, level + 1)","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"20":0,"21":0,"36":0,"37":0,"45":0,"46":0,"48":1,"49":0,"50":0,"52":0,"53":0,"55":0,"56":0,"57":0,"67":1,"68":0,"69":0,"71":0,"72":0,"79":0,"80":0,"83":0,"84":0,"91":0,"95":1,"96":1,"97":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-colon-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-colon-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":81}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":58}},"8":{"start":{"line":12,"column":23},"end":{"line":12,"column":58}},"9":{"start":{"line":15,"column":0},"end":{"line":36,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const mediaFeatureColonSpaceChecker = require(\"../mediaFeatureColonSpaceChecker\")","","const ruleName = \"media-feature-colon-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\":\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\":\\\"\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    mediaFeatureColonSpaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/mediaFeatureColonSpaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/mediaFeatureColonSpaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":33}}},"2":{"name":"checkColon","line":16,"loc":{"start":{"line":16,"column":2},"end":{"line":16,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":61}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":41}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"4":{"start":{"line":7,"column":0},"end":{"line":26,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":14,"column":4}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":32}},"7":{"start":{"line":11,"column":4},"end":{"line":13,"column":6}},"8":{"start":{"line":12,"column":6},"end":{"line":12,"column":50}},"9":{"start":{"line":16,"column":2},"end":{"line":25,"column":3}},"10":{"start":{"line":17,"column":4},"end":{"line":24,"column":6}},"11":{"start":{"line":17,"column":52},"end":{"line":23,"column":6}}},"branchMap":{},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../utils/atRuleParamIndex\")","const report = require(\"../utils/report\")","const styleSearch = require(\"style-search\")","","module.exports = function (opts) {","  opts.root.walkAtRules(/^media$/i, atRule => {","    const params = atRule.params","","    styleSearch({ source: params, target: \":\" }, match => {","      checkColon(params, match.startIndex, atRule)","    })","  })","","  function checkColon(source, index, node) {","    opts.locationChecker({ source, index, err: m => report({","      message: m,","      node,","      index: index + atRuleParamIndex(node),","      result: opts.result,","      ruleName: opts.checkedRuleName,","    }),","    })","  }","}",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"11":0,"12":0,"16":1,"17":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-colon-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-colon-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":81}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":60}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":60}},"9":{"start":{"line":15,"column":0},"end":{"line":36,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const mediaFeatureColonSpaceChecker = require(\"../mediaFeatureColonSpaceChecker\")","","const ruleName = \"media-feature-colon-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\":\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\":\\\"\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    mediaFeatureColonSpaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":84}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":96}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":74}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":27}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":65}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":47}},"12":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"13":{"start":{"line":17,"column":20},"end":{"line":17,"column":61}},"14":{"start":{"line":20,"column":0},"end":{"line":54,"column":1}},"15":{"start":{"line":21,"column":2},"end":{"line":53,"column":3}},"16":{"start":{"line":22,"column":4},"end":{"line":25,"column":6}},"17":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"18":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"19":{"start":{"line":30,"column":4},"end":{"line":52,"column":6}},"20":{"start":{"line":31,"column":6},"end":{"line":51,"column":8}},"21":{"start":{"line":32,"column":8},"end":{"line":34,"column":40}},"22":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"23":{"start":{"line":37,"column":10},"end":{"line":37,"column":16}},"24":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"25":{"start":{"line":41,"column":10},"end":{"line":41,"column":16}},"26":{"start":{"line":44,"column":8},"end":{"line":50,"column":10}},"27":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"28":{"start":{"line":57,"column":0},"end":{"line":57,"column":24}},"29":{"start":{"line":58,"column":0},"end":{"line":58,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]},"3":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":52}},{"start":{"line":36,"column":56},"end":{"line":36,"column":96}},{"start":{"line":36,"column":100},"end":{"line":36,"column":125}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const isCustomMediaQuery = require(\"../../utils/isCustomMediaQuery\")","const isRangeContextMediaFeature = require(\"../../utils/isRangeContextMediaFeature\")","const isStandardSyntaxMediaFeatureName = require(\"../../utils/isStandardSyntaxMediaFeatureName\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const mediaParser = require(\"postcss-media-query-parser\").default","","const ruleName = \"media-feature-name-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: name => `Unexpected media feature name \"${name}\"`,","})","","const rule = function (blacklist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^media$/i, atRule => {","      mediaParser(atRule.params).walk(/^media-feature$/i, mediaFeatureNode => {","        const parent = mediaFeatureNode.parent,","          sourceIndex = mediaFeatureNode.sourceIndex,","          value = mediaFeatureNode.value","","        if (isRangeContextMediaFeature(parent.value) || !isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {","          return","        }","","        if (!matchesStringOrRegExp(value.toLowerCase(), blacklist)) {","          return","        }","","        report({","          index: atRuleParamIndex(atRule) + sourceIndex,","          message: messages.rejected(value),","          node: atRule,","          ruleName,","          result,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"20":1,"21":0,"22":0,"26":0,"27":0,"30":0,"31":0,"32":0,"36":0,"37":0,"40":0,"41":0,"44":0,"56":1,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCustomMediaQuery.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCustomMediaQuery.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":64}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":9,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":40}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a media query is a custom"," */","module.exports = function (mediaQuery/*: string*/)/*: boolean*/ {","  return mediaQuery.slice(0, 2) === \"--\"","}",""],"l":{"7":1,"8":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isRangeContextMediaFeature.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isRangeContextMediaFeature.js","s":{"1":1,"2":0},"b":{"1":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":66}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":12,"column":1}},"2":{"start":{"line":11,"column":2},"end":{"line":11,"column":113}}},"branchMap":{"1":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":9},"end":{"line":11,"column":41}},{"start":{"line":11,"column":45},"end":{"line":11,"column":77}},{"start":{"line":11,"column":81},"end":{"line":11,"column":113}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a media feature is a range context one"," *"," * @param {string} media feature"," * @return {boolean} If `true`, media feature is a range context one"," */","module.exports = function (mediaFeature/*: string*/)/*: boolean*/ {","  return mediaFeature.indexOf(\"=\") !== -1 || mediaFeature.indexOf(\"<\") !== -1 || mediaFeature.indexOf(\">\") !== -1","}",""],"l":{"10":1,"11":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxMediaFeatureName.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxMediaFeatureName.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":70}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":14,"column":1}},"2":{"start":{"line":9,"column":2},"end":{"line":11,"column":3}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":16}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":13}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":2},"end":{"line":9,"column":2}},{"start":{"line":9,"column":2},"end":{"line":9,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a media feature name is standard"," */","module.exports = function (mediaFeatureName/*: string*/)/*: boolean*/ {","  // SCSS interpolation","  if (/#{.+?}|\\$.+?/.test(mediaFeatureName)) {","    return false","  }","","  return true","}",""],"l":{"7":1,"9":0,"10":0,"13":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":84}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":96}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":65}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":34},"end":{"line":15,"column":76}},"12":{"start":{"line":18,"column":0},"end":{"line":57,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":56,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":26,"column":6}},"15":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"17":{"start":{"line":31,"column":4},"end":{"line":55,"column":6}},"18":{"start":{"line":32,"column":6},"end":{"line":54,"column":8}},"19":{"start":{"line":33,"column":8},"end":{"line":35,"column":40}},"20":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"21":{"start":{"line":38,"column":10},"end":{"line":38,"column":16}},"22":{"start":{"line":41,"column":8},"end":{"line":41,"column":103}},"23":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"24":{"start":{"line":44,"column":10},"end":{"line":44,"column":16}},"25":{"start":{"line":47,"column":8},"end":{"line":53,"column":10}},"26":{"start":{"line":59,"column":0},"end":{"line":59,"column":24}},"27":{"start":{"line":60,"column":0},"end":{"line":60,"column":24}},"28":{"start":{"line":61,"column":0},"end":{"line":61,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"3":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":52}},{"start":{"line":37,"column":56},"end":{"line":37,"column":96}},{"start":{"line":37,"column":100},"end":{"line":37,"column":125}}]},"4":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":62},"end":{"line":41,"column":81}},{"start":{"line":41,"column":84},"end":{"line":41,"column":103}}]},"5":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const isCustomMediaQuery = require(\"../../utils/isCustomMediaQuery\")","const isRangeContextMediaFeature = require(\"../../utils/isRangeContextMediaFeature\")","const isStandardSyntaxMediaFeatureName = require(\"../../utils/isStandardSyntaxMediaFeatureName\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const mediaParser = require(\"postcss-media-query-parser\").default","","const ruleName = \"media-feature-name-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^media$/i, atRule => {","      mediaParser(atRule.params).walk(/^media-feature$/i, mediaFeatureNode => {","        const parent = mediaFeatureNode.parent,","          sourceIndex = mediaFeatureNode.sourceIndex,","          value = mediaFeatureNode.value","","        if (isRangeContextMediaFeature(parent.value) || !isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {","          return","        }","","        const expectedFeatureName = expectation === \"lower\" ? value.toLowerCase() : value.toUpperCase()","","        if (value === expectedFeatureName) {","          return","        }","","        report({","          index: atRuleParamIndex(atRule) + sourceIndex,","          message: messages.expected(value, expectedFeatureName),","          node: atRule,","          ruleName,","          result,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"27":0,"28":0,"31":0,"32":0,"33":0,"37":0,"38":0,"41":0,"43":0,"44":0,"47":0,"59":1,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-no-unknown/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-no-unknown/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":13},"end":{"line":22,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":84}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":96}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":60}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":27}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":58}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":65}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":34}},"13":{"start":{"line":16,"column":0},"end":{"line":16,"column":48}},"14":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"15":{"start":{"line":19,"column":32},"end":{"line":19,"column":93}},"16":{"start":{"line":22,"column":0},"end":{"line":64,"column":1}},"17":{"start":{"line":23,"column":2},"end":{"line":63,"column":3}},"18":{"start":{"line":24,"column":4},"end":{"line":30,"column":6}},"19":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"20":{"start":{"line":33,"column":6},"end":{"line":33,"column":12}},"21":{"start":{"line":36,"column":4},"end":{"line":62,"column":6}},"22":{"start":{"line":37,"column":6},"end":{"line":61,"column":8}},"23":{"start":{"line":38,"column":8},"end":{"line":40,"column":40}},"24":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"25":{"start":{"line":43,"column":10},"end":{"line":43,"column":16}},"26":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"27":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"28":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"29":{"start":{"line":51,"column":10},"end":{"line":51,"column":16}},"30":{"start":{"line":54,"column":8},"end":{"line":60,"column":10}},"31":{"start":{"line":66,"column":0},"end":{"line":66,"column":24}},"32":{"start":{"line":67,"column":0},"end":{"line":67,"column":24}},"33":{"start":{"line":68,"column":0},"end":{"line":68,"column":21}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"3":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":52}},{"start":{"line":42,"column":56},"end":{"line":42,"column":96}},{"start":{"line":42,"column":100},"end":{"line":42,"column":125}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":40}},{"start":{"line":50,"column":44},"end":{"line":50,"column":98}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const isCustomMediaQuery = require(\"../../utils/isCustomMediaQuery\")","const isRangeContextMediaFeature = require(\"../../utils/isRangeContextMediaFeature\")","const isStandardSyntaxMediaFeatureName = require(\"../../utils/isStandardSyntaxMediaFeatureName\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const keywordSets = require(\"../../reference/keywordSets\")","const mediaParser = require(\"postcss-media-query-parser\").default","const postcss = require(\"postcss\")","","const ruleName = \"media-feature-name-no-unknown\"","","const messages = ruleMessages(ruleName, {","  rejected: mediaFeatureName => `Unexpected unknown media feature name \"${mediaFeatureName}\"`,","})","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignoreMediaFeatureNames: [_.isString],","      },","      optional: true,","    })","","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^media$/i, atRule => {","      mediaParser(atRule.params).walk(/^media-feature$/i, mediaFeatureNode => {","        const parent = mediaFeatureNode.parent,","          sourceIndex = mediaFeatureNode.sourceIndex,","          value = mediaFeatureNode.value","","        if (isRangeContextMediaFeature(parent.value) || !isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {","          return","        }","","        if (optionsMatches(options, \"ignoreMediaFeatureNames\", value)) {","          return","        }","","        if (postcss.vendor.prefix(value) || keywordSets.mediaFeatureNames.has(value.toLowerCase())) {","          return","        }","","        report({","          index: atRuleParamIndex(atRule) + sourceIndex,","          message: messages.rejected(value),","          node: atRule,","          ruleName,","          result,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"16":1,"18":1,"19":0,"22":1,"23":0,"24":0,"32":0,"33":0,"36":0,"37":0,"38":0,"42":0,"43":0,"46":0,"47":0,"50":0,"51":0,"54":0,"66":1,"67":1,"68":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-no-vendor-prefix/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":54}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":14,"column":0},"end":{"line":42,"column":1}},"8":{"start":{"line":15,"column":2},"end":{"line":41,"column":3}},"9":{"start":{"line":16,"column":4},"end":{"line":16,"column":70}},"10":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"11":{"start":{"line":18,"column":6},"end":{"line":18,"column":12}},"12":{"start":{"line":21,"column":4},"end":{"line":40,"column":6}},"13":{"start":{"line":22,"column":6},"end":{"line":22,"column":34}},"14":{"start":{"line":24,"column":6},"end":{"line":26,"column":7}},"15":{"start":{"line":25,"column":8},"end":{"line":25,"column":14}},"16":{"start":{"line":27,"column":6},"end":{"line":27,"column":76}},"17":{"start":{"line":29,"column":6},"end":{"line":29,"column":30}},"18":{"start":{"line":29,"column":22},"end":{"line":29,"column":29}},"19":{"start":{"line":31,"column":6},"end":{"line":39,"column":8}},"20":{"start":{"line":32,"column":8},"end":{"line":38,"column":10}},"21":{"start":{"line":44,"column":0},"end":{"line":44,"column":24}},"22":{"start":{"line":45,"column":0},"end":{"line":45,"column":24}},"23":{"start":{"line":46,"column":0},"end":{"line":46,"column":21}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":6}},{"start":{"line":24,"column":6},"end":{"line":24,"column":6}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]}},"code":["\"use strict\"","","const isAutoprefixable = require(\"../../utils/isAutoprefixable\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"media-feature-name-no-vendor-prefix\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected vendor-prefix\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^media$/i, atRule => {","      const params = atRule.params","","      if (!isAutoprefixable.mediaFeatureName(params)) {","        return","      }","      const matches = atRule.toString().match(/[a-z-]+device-pixel-ratio/ig)","","      if (!matches) { return }","","      matches.forEach(match => {","        report({","          message: messages.rejected,","          node: atRule,","          word: match,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"14":1,"15":0,"16":0,"17":0,"18":0,"21":0,"22":0,"24":0,"25":0,"27":0,"29":0,"31":0,"32":0,"44":1,"45":1,"46":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-name-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":84}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":96}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":74}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":27}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":65}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":47}},"12":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"13":{"start":{"line":17,"column":20},"end":{"line":17,"column":61}},"14":{"start":{"line":20,"column":0},"end":{"line":54,"column":1}},"15":{"start":{"line":21,"column":2},"end":{"line":53,"column":3}},"16":{"start":{"line":22,"column":4},"end":{"line":25,"column":6}},"17":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"18":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"19":{"start":{"line":30,"column":4},"end":{"line":52,"column":6}},"20":{"start":{"line":31,"column":6},"end":{"line":51,"column":8}},"21":{"start":{"line":32,"column":8},"end":{"line":34,"column":40}},"22":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"23":{"start":{"line":37,"column":10},"end":{"line":37,"column":16}},"24":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"25":{"start":{"line":41,"column":10},"end":{"line":41,"column":16}},"26":{"start":{"line":44,"column":8},"end":{"line":50,"column":10}},"27":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"28":{"start":{"line":57,"column":0},"end":{"line":57,"column":24}},"29":{"start":{"line":58,"column":0},"end":{"line":58,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]},"3":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":52}},{"start":{"line":36,"column":56},"end":{"line":36,"column":96}},{"start":{"line":36,"column":100},"end":{"line":36,"column":125}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const isCustomMediaQuery = require(\"../../utils/isCustomMediaQuery\")","const isRangeContextMediaFeature = require(\"../../utils/isRangeContextMediaFeature\")","const isStandardSyntaxMediaFeatureName = require(\"../../utils/isStandardSyntaxMediaFeatureName\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const mediaParser = require(\"postcss-media-query-parser\").default","","const ruleName = \"media-feature-name-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: name => `Unexpected media feature name \"${name}\"`,","})","","const rule = function (whitelist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^media$/i, atRule => {","      mediaParser(atRule.params).walk(/^media-feature$/i, mediaFeatureNode => {","        const parent = mediaFeatureNode.parent,","          sourceIndex = mediaFeatureNode.sourceIndex,","          value = mediaFeatureNode.value","","        if (isRangeContextMediaFeature(parent.value) || !isStandardSyntaxMediaFeatureName(value) || isCustomMediaQuery(value)) {","          return","        }","","        if (matchesStringOrRegExp(value.toLowerCase(), whitelist)) {","          return","        }","","        report({","          index: atRuleParamIndex(atRule) + sourceIndex,","          message: messages.rejected(value),","          node: atRule,","          ruleName,","          result,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"20":1,"21":0,"22":0,"26":0,"27":0,"30":0,"31":0,"32":0,"36":0,"37":0,"40":0,"41":0,"44":0,"56":1,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-no-missing-punctuation/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-no-missing-punctuation/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":1,"43":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"isPunctuation","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":28}}},"2":{"name":"endsWithPunctuation","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":34}}},"3":{"name":"startsWithPunctuation","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":36}}},"4":{"name":"(anonymous_4)","line":29,"loc":{"start":{"line":29,"column":13},"end":{"line":29,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":88}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":66}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":55}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":17,"column":0},"end":{"line":19,"column":1}},"11":{"start":{"line":18,"column":2},"end":{"line":18,"column":57}},"12":{"start":{"line":21,"column":0},"end":{"line":23,"column":1}},"13":{"start":{"line":22,"column":2},"end":{"line":22,"column":69}},"14":{"start":{"line":25,"column":0},"end":{"line":27,"column":1}},"15":{"start":{"line":26,"column":2},"end":{"line":26,"column":64}},"16":{"start":{"line":29,"column":0},"end":{"line":87,"column":1}},"17":{"start":{"line":30,"column":2},"end":{"line":86,"column":3}},"18":{"start":{"line":31,"column":4},"end":{"line":31,"column":70}},"19":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"20":{"start":{"line":33,"column":6},"end":{"line":33,"column":12}},"21":{"start":{"line":36,"column":4},"end":{"line":41,"column":6}},"22":{"start":{"line":43,"column":4},"end":{"line":85,"column":6}},"23":{"start":{"line":44,"column":6},"end":{"line":84,"column":8}},"24":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"25":{"start":{"line":46,"column":10},"end":{"line":46,"column":16}},"26":{"start":{"line":49,"column":8},"end":{"line":49,"column":78}},"27":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"28":{"start":{"line":51,"column":10},"end":{"line":51,"column":16}},"29":{"start":{"line":55,"column":8},"end":{"line":83,"column":9}},"30":{"start":{"line":56,"column":10},"end":{"line":56,"column":55}},"31":{"start":{"line":62,"column":10},"end":{"line":64,"column":11}},"32":{"start":{"line":63,"column":12},"end":{"line":63,"column":20}},"33":{"start":{"line":65,"column":10},"end":{"line":67,"column":11}},"34":{"start":{"line":66,"column":12},"end":{"line":66,"column":20}},"35":{"start":{"line":68,"column":10},"end":{"line":68,"column":51}},"36":{"start":{"line":69,"column":10},"end":{"line":71,"column":11}},"37":{"start":{"line":70,"column":12},"end":{"line":70,"column":20}},"38":{"start":{"line":72,"column":10},"end":{"line":74,"column":11}},"39":{"start":{"line":73,"column":12},"end":{"line":73,"column":20}},"40":{"start":{"line":76,"column":10},"end":{"line":82,"column":12}},"41":{"start":{"line":89,"column":0},"end":{"line":89,"column":24}},"42":{"start":{"line":90,"column":0},"end":{"line":90,"column":24}},"43":{"start":{"line":91,"column":0},"end":{"line":91,"column":21}}},"branchMap":{"1":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":9},"end":{"line":22,"column":37}},{"start":{"line":22,"column":41},"end":{"line":22,"column":69}}]},"2":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":9},"end":{"line":26,"column":30}},{"start":{"line":26,"column":34},"end":{"line":26,"column":64}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"6":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":10},"end":{"line":62,"column":10}},{"start":{"line":62,"column":10},"end":{"line":62,"column":10}}]},"7":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":10},"end":{"line":65,"column":10}},{"start":{"line":65,"column":10},"end":{"line":65,"column":10}}]},"8":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":10},"end":{"line":69,"column":10}},{"start":{"line":69,"column":10},"end":{"line":69,"column":10}}]},"9":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":10},"end":{"line":72,"column":10}},{"start":{"line":72,"column":10},"end":{"line":72,"column":10}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const isStandardSyntaxMediaFeature = require(\"../../utils/isStandardSyntaxMediaFeature\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const execall = require(\"execall\")","const punctuationSets = require(\"../../reference/punctuationSets\")","","const ruleName = \"media-feature-no-missing-punctuation\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected missing punctuation\",","})","","function isPunctuation(str) {","  return punctuationSets.mediaFeaturePunctuation.has(str)","}","","function endsWithPunctuation(str) {","  return isPunctuation(str.slice(-1)) || isPunctuation(str.slice(-2))","}","","function startsWithPunctuation(str) {","  return isPunctuation(str[0]) || isPunctuation(str.slice(0, 2))","}","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    result.warn((","      \"'media-feature-no-missing-punctuation' has been deprecated and in 8.0 will be removed.\"","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: \"https://stylelint.io/user-guide/rules/media-feature-no-missing-punctuation/\",","    })","","    root.walkAtRules(/^media$/i, atRule => {","      execall(/\\((.*?)\\)/g, atRule.params).forEach(mediaFeatureMatch => {","        if (!isStandardSyntaxMediaFeature(mediaFeatureMatch.match)) {","          return","        }","","        const splitMediaFeature = mediaFeatureMatch.sub[0].trim().split(/\\s+/)","        if (splitMediaFeature.length === 1) {","          return","        }","","        // Ignore the last one","        for (let i = 0, l = splitMediaFeature.length - 1; i < l; i++) {","          const mediaFeaturePart = splitMediaFeature[i]","","          // This part is valid if it is punctuation,","          // it ends with punctuation,","          // the next part is punctuation,","          // or the next part begins with punctuation","          if (isPunctuation(mediaFeaturePart)) {","            continue","          }","          if (endsWithPunctuation(mediaFeaturePart)) {","            continue","          }","          const nextPart = splitMediaFeature[i + 1]","          if (isPunctuation(nextPart)) {","            continue","          }","          if (startsWithPunctuation(nextPart)) {","            continue","          }","","          return report({","            result,","            ruleName,","            message: messages.rejected,","            node: atRule,","            index: atRuleParamIndex(atRule) + mediaFeatureMatch.index,","          })","        }","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"17":1,"18":0,"21":1,"22":0,"25":1,"26":0,"29":1,"30":0,"31":0,"32":0,"33":0,"36":0,"43":0,"44":0,"45":0,"46":0,"49":0,"50":0,"51":0,"55":0,"56":0,"62":0,"63":0,"65":0,"66":0,"68":0,"69":0,"70":0,"72":0,"73":0,"76":0,"89":1,"90":1,"91":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxMediaFeature.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxMediaFeature.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":66}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":61}},"2":{"start":{"line":8,"column":0},"end":{"line":23,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":42}},"4":{"start":{"line":13,"column":2},"end":{"line":15,"column":3}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":16}},"6":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"7":{"start":{"line":19,"column":4},"end":{"line":19,"column":16}},"8":{"start":{"line":22,"column":2},"end":{"line":22,"column":13}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":2},"end":{"line":13,"column":2}},{"start":{"line":13,"column":2},"end":{"line":13,"column":2}}]},"2":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const hasInterpolation = require(\"../utils/hasInterpolation\")","/**"," * Check whether a media feature is standard"," */","module.exports = function (mediaFeature/*: string*/)/*: boolean*/ {","  // Remove outside parens","  mediaFeature = mediaFeature.slice(1, -1)","","  // Parentheticals used for non-standard operations e.g. ($var - 10)","  if (mediaFeature.indexOf(\"(\") !== -1) {","    return false","  }","","  // SCSS or Less interpolation","  if (hasInterpolation(mediaFeature)) {","    return false","  }","","  return true","}",""],"l":{"4":1,"8":1,"10":0,"13":0,"14":0,"18":0,"19":0,"22":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/punctuationSets.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/reference/punctuationSets.js","s":{"1":1,"2":1,"3":1,"4":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"2":{"start":{"line":5,"column":0},"end":{"line":12,"column":2}},"3":{"start":{"line":14,"column":0},"end":{"line":18,"column":2}},"4":{"start":{"line":20,"column":0},"end":{"line":20,"column":32}}},"branchMap":{},"code":["\"use strict\"","","const punctuationSets = {}","","punctuationSets.mediaFeaturePunctuation = new Set([","  \":\",","  \"=\",","  \">\",","  \">=\",","  \"<\",","  \"<=\",","])","","punctuationSets.nonSpaceCombinators = new Set([","  \">\",","  \"+\",","  \"~\",","])","","module.exports = punctuationSets",""],"l":{"3":1,"5":1,"14":1,"20":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-parentheses-space-inside/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":1,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":27}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":57}},"8":{"start":{"line":12,"column":0},"end":{"line":17,"column":2}},"9":{"start":{"line":19,"column":0},"end":{"line":83,"column":1}},"10":{"start":{"line":20,"column":2},"end":{"line":82,"column":3}},"11":{"start":{"line":21,"column":4},"end":{"line":27,"column":6}},"12":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"13":{"start":{"line":29,"column":6},"end":{"line":29,"column":12}},"14":{"start":{"line":32,"column":4},"end":{"line":81,"column":6}},"15":{"start":{"line":35,"column":6},"end":{"line":35,"column":68}},"16":{"start":{"line":36,"column":6},"end":{"line":36,"column":49}},"17":{"start":{"line":38,"column":6},"end":{"line":58,"column":8}},"18":{"start":{"line":39,"column":8},"end":{"line":39,"column":68}},"19":{"start":{"line":40,"column":8},"end":{"line":48,"column":9}},"20":{"start":{"line":41,"column":10},"end":{"line":47,"column":12}},"21":{"start":{"line":49,"column":8},"end":{"line":57,"column":9}},"22":{"start":{"line":50,"column":10},"end":{"line":56,"column":12}},"23":{"start":{"line":60,"column":6},"end":{"line":80,"column":8}},"24":{"start":{"line":61,"column":8},"end":{"line":61,"column":68}},"25":{"start":{"line":62,"column":8},"end":{"line":70,"column":9}},"26":{"start":{"line":63,"column":10},"end":{"line":69,"column":12}},"27":{"start":{"line":71,"column":8},"end":{"line":79,"column":9}},"28":{"start":{"line":72,"column":10},"end":{"line":78,"column":12}},"29":{"start":{"line":85,"column":0},"end":{"line":85,"column":24}},"30":{"start":{"line":86,"column":0},"end":{"line":86,"column":24}},"31":{"start":{"line":87,"column":0},"end":{"line":87,"column":21}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"3":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":27}},{"start":{"line":40,"column":31},"end":{"line":40,"column":54}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"5":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":28}},{"start":{"line":49,"column":32},"end":{"line":49,"column":56}}]},"6":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"7":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":27}},{"start":{"line":62,"column":31},"end":{"line":62,"column":54}}]},"8":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":8}},{"start":{"line":71,"column":8},"end":{"line":71,"column":8}}]},"9":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":12},"end":{"line":71,"column":28}},{"start":{"line":71,"column":32},"end":{"line":71,"column":56}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const styleSearch = require(\"style-search\")","","const ruleName = \"media-feature-parentheses-space-inside\"","","const messages = ruleMessages(ruleName, {","  expectedOpening: \"Expected single space after \\\"(\\\"\",","  rejectedOpening: \"Unexpected whitespace after \\\"(\\\"\",","  expectedClosing: \"Expected single space before \\\")\\\"\",","  rejectedClosing: \"Unexpected whitespace before \\\")\\\"\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^media$/i, atRule => {","      // If there are comments in the params, the complete string","      // will be at atRule.raws.params.raw","      const params = _.get(atRule, \"raws.params.raw\", atRule.params)","      const indexBoost = atRuleParamIndex(atRule)","","      styleSearch({ source: params, target: \"(\" }, match => {","        const nextCharIsSpace = params[match.startIndex + 1] === \" \"","        if (nextCharIsSpace && expectation === \"never\") {","          report({","            message: messages.rejectedOpening,","            node: atRule,","            index: match.startIndex + 1 + indexBoost,","            result,","            ruleName,","          })","        }","        if (!nextCharIsSpace && expectation === \"always\") {","          report({","            message: messages.expectedOpening,","            node: atRule,","            index: match.startIndex + 1 + indexBoost,","            result,","            ruleName,","          })","        }","      })","","      styleSearch({ source: params, target: \")\" }, match => {","        const prevCharIsSpace = params[match.startIndex - 1] === \" \"","        if (prevCharIsSpace && expectation === \"never\") {","          report({","            message: messages.rejectedClosing,","            node: atRule,","            index: match.startIndex - 1 + indexBoost,","            result,","            ruleName,","          })","        }","        if (!prevCharIsSpace && expectation === \"always\") {","          report({","            message: messages.expectedClosing,","            node: atRule,","            index: match.startIndex - 1 + indexBoost,","            result,","            ruleName,","          })","        }","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"19":1,"20":0,"21":0,"28":0,"29":0,"32":0,"35":0,"36":0,"38":0,"39":0,"40":0,"41":0,"49":0,"50":0,"60":0,"61":0,"62":0,"63":0,"71":0,"72":0,"85":1,"86":1,"87":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-range-operator-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-range-operator-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":1,"24":1,"25":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"checkAfterOperator","line":35,"loc":{"start":{"line":35,"column":4},"end":{"line":35,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":57}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":59}},"8":{"start":{"line":12,"column":0},"end":{"line":15,"column":2}},"9":{"start":{"line":13,"column":23},"end":{"line":13,"column":67}},"10":{"start":{"line":14,"column":23},"end":{"line":14,"column":67}},"11":{"start":{"line":17,"column":0},"end":{"line":53,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":52,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":26,"column":6}},"15":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"17":{"start":{"line":31,"column":4},"end":{"line":33,"column":6}},"18":{"start":{"line":32,"column":6},"end":{"line":32,"column":51}},"19":{"start":{"line":35,"column":4},"end":{"line":51,"column":5}},"20":{"start":{"line":36,"column":6},"end":{"line":36,"column":52}},"21":{"start":{"line":38,"column":6},"end":{"line":50,"column":8}},"22":{"start":{"line":42,"column":10},"end":{"line":48,"column":12}},"23":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"24":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"25":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const findMediaOperator = require(\"../findMediaOperator\")","","const ruleName = \"media-feature-range-operator-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after range operator\",","  rejectedAfter: () => \"Unexpected whitespace after range operator\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^media$/i, atRule => {","      findMediaOperator(atRule, checkAfterOperator)","    })","","    function checkAfterOperator(match, params, node) {","      const endIndex = match.index + match[1].length","","      checker.after({","        source: params,","        index: endIndex,","        err: m => {","          report({","            message: m,","            node,","            index: endIndex + atRuleParamIndex(node) + 1,","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"27":0,"28":0,"31":0,"32":0,"35":1,"36":0,"38":0,"42":0,"55":1,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/findMediaOperator.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/findMediaOperator.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"2":{"start":{"line":5,"column":0},"end":{"line":15,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":8,"column":3}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":10}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":30}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":11}},"7":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":29}}},"branchMap":{"1":{"line":6,"type":"if","locations":[{"start":{"line":6,"column":2},"end":{"line":6,"column":2}},{"start":{"line":6,"column":2},"end":{"line":6,"column":2}}]}},"code":["\"use strict\"","","const rangeOperatorRegex = /[^><](>=?|<=?|=)/g","","module.exports = function (atRule, cb) {","  if (atRule.name.toLowerCase() !== \"media\") {","    return","  }","","  const params = atRule.params","  let match","  while ((match = rangeOperatorRegex.exec(params)) !== null) {","    cb(match, params, atRule)","  }","}",""],"l":{"3":1,"5":1,"6":0,"7":0,"10":0,"11":0,"12":0,"13":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-range-operator-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-feature-range-operator-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":1,"23":1,"24":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"checkBeforeOperator","line":35,"loc":{"start":{"line":35,"column":4},"end":{"line":35,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":57}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":60}},"8":{"start":{"line":12,"column":0},"end":{"line":15,"column":2}},"9":{"start":{"line":13,"column":24},"end":{"line":13,"column":69}},"10":{"start":{"line":14,"column":24},"end":{"line":14,"column":69}},"11":{"start":{"line":17,"column":0},"end":{"line":53,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":52,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":26,"column":6}},"15":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"17":{"start":{"line":31,"column":4},"end":{"line":33,"column":6}},"18":{"start":{"line":32,"column":6},"end":{"line":32,"column":52}},"19":{"start":{"line":35,"column":4},"end":{"line":51,"column":5}},"20":{"start":{"line":38,"column":6},"end":{"line":50,"column":8}},"21":{"start":{"line":42,"column":10},"end":{"line":48,"column":12}},"22":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"23":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"24":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const findMediaOperator = require(\"../findMediaOperator\")","","const ruleName = \"media-feature-range-operator-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before range operator\",","  rejectedBefore: () => \"Unexpected whitespace before range operator\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(/^media$/i, atRule => {","      findMediaOperator(atRule, checkBeforeOperator)","    })","","    function checkBeforeOperator(match, params, node) {","      // The extra `+ 1` is because the match itself contains","      // the character before the operator","      checker.before({","        source: params,","        index: match.index + 1,","        err: m => {","          report({","            message: m,","            node,","            index: match.index + atRuleParamIndex(node),","            result,","            ruleName,","          })","        },","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"27":0,"28":0,"31":0,"32":0,"35":1,"38":0,"42":0,"55":1,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-query-list-comma-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-query-list-comma-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":95}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":55}},"6":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":53}},"8":{"start":{"line":12,"column":32},"end":{"line":12,"column":83}},"9":{"start":{"line":13,"column":32},"end":{"line":13,"column":88}},"10":{"start":{"line":16,"column":0},"end":{"line":41,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":69}},"12":{"start":{"line":19,"column":2},"end":{"line":40,"column":3}},"13":{"start":{"line":20,"column":4},"end":{"line":27,"column":6}},"14":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"15":{"start":{"line":29,"column":6},"end":{"line":29,"column":12}},"16":{"start":{"line":34,"column":4},"end":{"line":39,"column":6}},"17":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"18":{"start":{"line":44,"column":0},"end":{"line":44,"column":24}},"19":{"start":{"line":45,"column":0},"end":{"line":45,"column":21}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const mediaQueryListCommaWhitespaceChecker = require(\"../mediaQueryListCommaWhitespaceChecker\")","","const ruleName = \"media-query-list-comma-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\",\\\"\",","  expectedAfterMultiLine: () => \"Expected newline after \\\",\\\" in a multi-line list\",","  rejectedAfterMultiLine: () => \"Unexpected whitespace after \\\",\\\" in a multi-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    // Only check for the newline after the comma, while allowing","    // arbitrary indentation after the newline","    mediaQueryListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.afterOneOnly,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"16":1,"17":0,"19":0,"20":0,"28":0,"29":0,"34":0,"43":1,"44":1,"45":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/mediaQueryListCommaWhitespaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":33}}},"2":{"name":"checkComma","line":15,"loc":{"start":{"line":15,"column":2},"end":{"line":15,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":61}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":41}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"4":{"start":{"line":7,"column":0},"end":{"line":25,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":13,"column":4}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":4},"end":{"line":12,"column":6}},"8":{"start":{"line":11,"column":6},"end":{"line":11,"column":50}},"9":{"start":{"line":15,"column":2},"end":{"line":24,"column":3}},"10":{"start":{"line":16,"column":4},"end":{"line":23,"column":6}},"11":{"start":{"line":16,"column":52},"end":{"line":22,"column":6}}},"branchMap":{},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../utils/atRuleParamIndex\")","const report = require(\"../utils/report\")","const styleSearch = require(\"style-search\")","","module.exports = function (opts) {","  opts.root.walkAtRules(/^media$/i, atRule => {","    const params = atRule.params","    styleSearch({ source: params, target: \",\" }, match => {","      checkComma(params, match.startIndex, atRule)","    })","  })","","  function checkComma(source, index, node) {","    opts.locationChecker({ source, index, err: m => report({","      message: m,","      node,","      index: index + atRuleParamIndex(node),","      result: opts.result,","      ruleName: opts.checkedRuleName,","    }),","    })","  }","}",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"10":0,"11":0,"15":1,"16":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-query-list-comma-newline-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-query-list-comma-newline-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":95}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"6":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":55}},"8":{"start":{"line":12,"column":33},"end":{"line":12,"column":85}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":90}},"10":{"start":{"line":16,"column":0},"end":{"line":37,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":69}},"12":{"start":{"line":18,"column":2},"end":{"line":36,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":26,"column":6}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":30,"column":4},"end":{"line":35,"column":6}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"19":{"start":{"line":41,"column":0},"end":{"line":41,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const mediaQueryListCommaWhitespaceChecker = require(\"../mediaQueryListCommaWhitespaceChecker\")","","const ruleName = \"media-query-list-comma-newline-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected newline before \\\",\\\"\",","  expectedBeforeMultiLine: () => \"Expected newline before \\\",\\\" in a multi-line list\",","  rejectedBeforeMultiLine: () => \"Unexpected whitespace before \\\",\\\" in a multi-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","    mediaQueryListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.beforeAllowingIndentation,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"16":1,"17":0,"18":0,"19":0,"27":0,"28":0,"30":0,"39":1,"40":1,"41":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-query-list-comma-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-query-list-comma-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":95}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":53}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":58}},"8":{"start":{"line":12,"column":23},"end":{"line":12,"column":58}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":90}},"10":{"start":{"line":14,"column":33},"end":{"line":14,"column":90}},"11":{"start":{"line":17,"column":0},"end":{"line":39,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":38,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":32,"column":4},"end":{"line":37,"column":6}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":24}},"19":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"20":{"start":{"line":43,"column":0},"end":{"line":43,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const mediaQueryListCommaWhitespaceChecker = require(\"../mediaQueryListCommaWhitespaceChecker\")","","const ruleName = \"media-query-list-comma-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\",\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\",\\\"\",","  expectedAfterSingleLine: () => \"Expected single space after \\\",\\\" in a single-line list\",","  rejectedAfterSingleLine: () => \"Unexpected whitespace after \\\",\\\" in a single-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","    mediaQueryListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"29":0,"30":0,"32":0,"41":1,"42":1,"43":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-query-list-comma-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/media-query-list-comma-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":95}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":54}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":60}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":60}},"9":{"start":{"line":13,"column":34},"end":{"line":13,"column":92}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":92}},"11":{"start":{"line":17,"column":0},"end":{"line":40,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":33,"column":4},"end":{"line":38,"column":6}},"18":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const mediaQueryListCommaWhitespaceChecker = require(\"../mediaQueryListCommaWhitespaceChecker\")","","const ruleName = \"media-query-list-comma-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\",\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\",\\\"\",","  expectedBeforeSingleLine: () => \"Expected single space before \\\",\\\" in a single-line list\",","  rejectedBeforeSingleLine: () => \"Unexpected whitespace before \\\",\\\" in a single-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    mediaQueryListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"29":0,"30":0,"33":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-browser-hacks/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-browser-hacks/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":27}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":35}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":28},"end":{"line":13,"column":63}},"10":{"start":{"line":16,"column":0},"end":{"line":55,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":54,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":36,"column":4},"end":{"line":36,"column":44}},"17":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"18":{"start":{"line":38,"column":6},"end":{"line":38,"column":51}},"19":{"start":{"line":41,"column":4},"end":{"line":41,"column":41}},"20":{"start":{"line":42,"column":4},"end":{"line":42,"column":57}},"21":{"start":{"line":43,"column":4},"end":{"line":53,"column":6}},"22":{"start":{"line":44,"column":6},"end":{"line":44,"column":93}},"23":{"start":{"line":45,"column":6},"end":{"line":52,"column":8}},"24":{"start":{"line":57,"column":0},"end":{"line":57,"column":24}},"25":{"start":{"line":58,"column":0},"end":{"line":58,"column":24}},"26":{"start":{"line":59,"column":0},"end":{"line":59,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"3":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":15}},{"start":{"line":37,"column":19},"end":{"line":37,"column":35}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const Result = require(\"postcss/lib/result\")","const _ = require(\"lodash\")","const stylehacks = require(\"stylehacks\")","","const ruleName = \"no-browser-hacks\"","","const messages = ruleMessages(ruleName, {","  rejected: (type, hack) => `Unexpected ${type} hack \"${hack}\"`,","})","","const rule = function (on, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual: on }, {","      optional: true,","      actual: options,","      possible: {","        browsers: [_.isString],","      },","    })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed. Use 'stylelint-no-browser-hacks' plugin instead.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    const stylehacksOptions = { lint: true }","    if (options && options.browsers) {","      stylehacksOptions.browsers = options.browsers","    }","","    const stylehacksResult = new Result()","    stylehacks(stylehacksOptions)(root, stylehacksResult)","    stylehacksResult.warnings().forEach(stylehacksWarning => {","      const message = messages.rejected(stylehacksWarning.identifier, stylehacksWarning.hack)","      report({","        ruleName,","        result,","        message,","        node: stylehacksWarning.node,","        line: stylehacksWarning.line,","        column: stylehacksWarning.column,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"25":0,"26":0,"29":0,"36":0,"37":0,"38":0,"41":0,"42":0,"43":0,"44":0,"45":0,"57":1,"58":1,"59":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-descending-specificity/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-descending-specificity/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":1,"54":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":13},"end":{"line":21,"column":31}}},"2":{"name":"checkSelector","line":54,"loc":{"start":{"line":54,"column":4},"end":{"line":54,"column":79}}},"3":{"name":"lastCompoundSelectorWithoutPseudoClasses","line":84,"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":64}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":66}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":27}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":58}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":73}},"12":{"start":{"line":15,"column":0},"end":{"line":15,"column":44}},"13":{"start":{"line":17,"column":0},"end":{"line":19,"column":2}},"14":{"start":{"line":18,"column":22},"end":{"line":18,"column":79}},"15":{"start":{"line":21,"column":0},"end":{"line":82,"column":1}},"16":{"start":{"line":22,"column":2},"end":{"line":81,"column":3}},"17":{"start":{"line":23,"column":4},"end":{"line":23,"column":70}},"18":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"19":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"20":{"start":{"line":28,"column":4},"end":{"line":28,"column":53}},"21":{"start":{"line":30,"column":4},"end":{"line":52,"column":6}},"22":{"start":{"line":32,"column":6},"end":{"line":34,"column":7}},"23":{"start":{"line":33,"column":8},"end":{"line":33,"column":14}},"24":{"start":{"line":36,"column":6},"end":{"line":36,"column":95}},"25":{"start":{"line":38,"column":6},"end":{"line":51,"column":8}},"26":{"start":{"line":39,"column":8},"end":{"line":39,"column":44}},"27":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"28":{"start":{"line":42,"column":10},"end":{"line":42,"column":16}},"29":{"start":{"line":46,"column":8},"end":{"line":46,"column":57}},"30":{"start":{"line":48,"column":8},"end":{"line":50,"column":10}},"31":{"start":{"line":49,"column":10},"end":{"line":49,"column":110}},"32":{"start":{"line":49,"column":61},"end":{"line":49,"column":109}},"33":{"start":{"line":54,"column":4},"end":{"line":80,"column":5}},"34":{"start":{"line":55,"column":6},"end":{"line":55,"column":46}},"35":{"start":{"line":56,"column":6},"end":{"line":56,"column":90}},"36":{"start":{"line":57,"column":6},"end":{"line":57,"column":85}},"37":{"start":{"line":58,"column":6},"end":{"line":58,"column":66}},"38":{"start":{"line":60,"column":6},"end":{"line":63,"column":7}},"39":{"start":{"line":61,"column":8},"end":{"line":61,"column":61}},"40":{"start":{"line":62,"column":8},"end":{"line":62,"column":14}},"41":{"start":{"line":65,"column":6},"end":{"line":65,"column":83}},"42":{"start":{"line":67,"column":6},"end":{"line":77,"column":8}},"43":{"start":{"line":68,"column":8},"end":{"line":76,"column":9}},"44":{"start":{"line":69,"column":10},"end":{"line":75,"column":12}},"45":{"start":{"line":79,"column":6},"end":{"line":79,"column":42}},"46":{"start":{"line":84,"column":0},"end":{"line":94,"column":1}},"47":{"start":{"line":85,"column":2},"end":{"line":87,"column":5}},"48":{"start":{"line":86,"column":4},"end":{"line":86,"column":37}},"49":{"start":{"line":89,"column":2},"end":{"line":91,"column":13}},"50":{"start":{"line":90,"column":4},"end":{"line":90,"column":97}},"51":{"start":{"line":93,"column":2},"end":{"line":93,"column":45}},"52":{"start":{"line":96,"column":0},"end":{"line":96,"column":24}},"53":{"start":{"line":97,"column":0},"end":{"line":97,"column":24}},"54":{"start":{"line":98,"column":0},"end":{"line":98,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":8}},{"start":{"line":41,"column":8},"end":{"line":41,"column":8}}]},"4":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"6":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":11},"end":{"line":90,"column":33}},{"start":{"line":90,"column":37},"end":{"line":90,"column":97}}]}},"code":["\"use strict\"","","const specificity = require(\"specificity\")","const findAtRuleContext = require(\"../../utils/findAtRuleContext\")","const isCustomPropertySet = require(\"../../utils/isCustomPropertySet\")","const nodeContextLookup = require(\"../../utils/nodeContextLookup\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const keywordSets = require(\"../../reference/keywordSets\")","const resolvedNestedSelector = require(\"postcss-resolve-nested-selector\")","","const ruleName = \"no-descending-specificity\"","","const messages = ruleMessages(ruleName, {","  rejected: (b, a) => `Expected selector \"${b}\" to come before selector \"${a}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    const selectorContextLookup = nodeContextLookup()","","    root.walkRules(rule => {","      // Ignore custom property set `--foo: {};`","      if (isCustomPropertySet(rule)) {","        return","      }","","      const comparisonContext = selectorContextLookup.getContext(rule, findAtRuleContext(rule))","","      rule.selectors.forEach(selector => {","        const trimSelector = selector.trim()","        // Ignore `.selector, { }`","        if (trimSelector === \"\") {","          return","        }","","        // The edge-case of duplicate selectors will act acceptably","        const index = rule.selector.indexOf(trimSelector)","        // Resolve any nested selectors before checking","        resolvedNestedSelector(selector, rule).forEach(resolvedSelector => {","          parseSelector(resolvedSelector, result, rule, s => checkSelector(s, rule, index, comparisonContext))","        })","      })","    })","","    function checkSelector(selectorNode, rule, sourceIndex, comparisonContext) {","      const selector = selectorNode.toString()","      const referenceSelectorNode = lastCompoundSelectorWithoutPseudoClasses(selectorNode)","      const selectorSpecificity = specificity.calculate(selector)[0].specificityArray","      const entry = { selector, specificity: selectorSpecificity }","","      if (!comparisonContext.has(referenceSelectorNode)) {","        comparisonContext.set(referenceSelectorNode, [entry])","        return","      }","","      const priorComparableSelectors = comparisonContext.get(referenceSelectorNode)","","      priorComparableSelectors.forEach(priorEntry => {","        if (specificity.compare(selectorSpecificity, priorEntry.specificity) === -1) {","          report({","            ruleName,","            result,","            node: rule,","            message: messages.rejected(selector, priorEntry.selector),","            index: sourceIndex,","          })","        }","      })","","      priorComparableSelectors.push(entry)","    }","  }","}","","function lastCompoundSelectorWithoutPseudoClasses(selectorNode) {","  const nodesAfterLastCombinator = _.last(selectorNode.nodes[0].split(node => {","    return node.type === \"combinator\"","  }))","","  const nodesWithoutPseudoClasses = nodesAfterLastCombinator.filter(node => {","    return node.type !== \"pseudo\" || keywordSets.pseudoElements.has(node.value.replace(/:/g, \"\"))","  }).join(\"\")","","  return nodesWithoutPseudoClasses.toString()","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"15":1,"17":1,"18":0,"21":1,"22":0,"23":0,"24":0,"25":0,"28":0,"30":0,"32":0,"33":0,"36":0,"38":0,"39":0,"41":0,"42":0,"46":0,"48":0,"49":0,"54":1,"55":0,"56":0,"57":0,"58":0,"60":0,"61":0,"62":0,"65":0,"67":0,"68":0,"69":0,"79":0,"84":1,"85":0,"86":0,"89":0,"90":0,"93":0,"96":1,"97":1,"98":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/findAtRuleContext.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/findAtRuleContext.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"findAtRuleContext","line":9,"loc":{"start":{"line":9,"column":17},"end":{"line":11,"column":23}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":21,"column":1}},"2":{"start":{"line":12,"column":2},"end":{"line":12,"column":28}},"3":{"start":{"line":14,"column":2},"end":{"line":16,"column":3}},"4":{"start":{"line":15,"column":4},"end":{"line":15,"column":15}},"5":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":17}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":34}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Find the at-rule in which a rule is nested."," *"," * Returns `null` if the rule is not nested within an at-rule."," */","module.exports = function findAtRuleContext(","  rule/*: postcss$rule */",")/*: ?postcss$atRule*/ {","  const parent = rule.parent","","  if (parent.type === \"root\") {","    return null","  }","  if (parent.type === \"atrule\") {","    return parent","  }","  return findAtRuleContext(parent)","}",""],"l":{"9":1,"12":0,"14":0,"15":0,"17":0,"18":0,"20":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCustomPropertySet.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCustomPropertySet.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0},"b":{"1":[0,0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":58}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}},"3":{"start":{"line":10,"column":0},"end":{"line":14,"column":1}},"4":{"start":{"line":11,"column":2},"end":{"line":11,"column":66}},"5":{"start":{"line":13,"column":2},"end":{"line":13,"column":110}}},"branchMap":{"1":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":9},"end":{"line":13,"column":29}},{"start":{"line":13,"column":33},"end":{"line":13,"column":47}},{"start":{"line":13,"column":51},"end":{"line":13,"column":80}},{"start":{"line":13,"column":84},"end":{"line":13,"column":110}}]}},"code":["/* @flow */","\"use strict\"","","const _ = require(\"lodash\")","const hasBlock = require(\"../utils/hasBlock\")","","/**"," * Check whether a Node is a custom property set"," */","module.exports = function (node/*: Object*/)/*: boolean*/ {","  const selector = _.get(node, \"raws.selector.raw\", node.selector)","","  return node.type === \"rule\" && hasBlock(node) && selector.slice(0, 2) === \"--\" && selector.slice(-1) === \":\"","}",""],"l":{"4":1,"5":1,"10":1,"11":0,"13":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/nodeContextLookup.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/nodeContextLookup.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":17},"end":{"line":14,"column":29}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":14},"end":{"line":18,"column":21}}},"3":{"name":"creativeGetMap","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":44}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":28,"column":1}},"2":{"start":{"line":15,"column":2},"end":{"line":15,"column":30}},"3":{"start":{"line":17,"column":2},"end":{"line":27,"column":3}},"4":{"start":{"line":19,"column":6},"end":{"line":19,"column":47}},"5":{"start":{"line":20,"column":6},"end":{"line":20,"column":64}},"6":{"start":{"line":21,"column":6},"end":{"line":21,"column":56}},"7":{"start":{"line":23,"column":6},"end":{"line":25,"column":21}},"8":{"start":{"line":24,"column":8},"end":{"line":24,"column":46}},"9":{"start":{"line":30,"column":0},"end":{"line":35,"column":1}},"10":{"start":{"line":31,"column":2},"end":{"line":33,"column":3}},"11":{"start":{"line":32,"column":4},"end":{"line":32,"column":37}},"12":{"start":{"line":34,"column":2},"end":{"line":34,"column":31}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]}},"code":["// Too weird for Flow","\"use strict\"","","/**"," * Create a collection of Maps that serve to contextualize a given node."," * This is useful to ensure that you only compare nodes that share a certain"," * context."," *"," * All nodes are initially contextualized by their input source."," * From there, you can contextualize them however you want."," *"," * For a usage example, see `selector-no-descending-specificity`."," */","module.exports = function () {","  const contextMap = new Map()","","  return {","    getContext(node) {","      const nodeSource = node.source.input.from","      const baseContext = creativeGetMap(contextMap, nodeSource)","      const subContexts = Array.from(arguments).slice(1)","","      return subContexts.reduce((result, context) => {","        return creativeGetMap(result, context)","      }, baseContext)","    },","  }","}","","function creativeGetMap(someMap, someThing) {","  if (!someMap.has(someThing)) {","    someMap.set(someThing, new Map())","  }","  return someMap.get(someThing)","}",""],"l":{"14":1,"15":0,"17":0,"19":0,"20":0,"21":0,"23":0,"24":0,"30":1,"31":0,"32":0,"34":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/parseSelector.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/parseSelector.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":17},"end":{"line":11,"column":2}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":57}},"2":{"start":{"line":6,"column":0},"end":{"line":17,"column":1}},"3":{"start":{"line":12,"column":2},"end":{"line":16,"column":3}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":40}},"5":{"start":{"line":15,"column":4},"end":{"line":15,"column":50}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","const selectorParser = require(\"postcss-selector-parser\")","","module.exports = function (","  selector/*: string*/,","  result/*: Object*/,","  node/*: Object*/,","  cb/*: Function*/",") {","  try {","    selectorParser(cb).process(selector)","  } catch (e) {","    result.warn(\"Cannot parse selector\", { node })","  }","}",""],"l":{"4":1,"6":1,"12":0,"13":0,"15":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-duplicate-selectors/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-duplicate-selectors/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":1,"39":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":55}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":73}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":41}},"11":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"12":{"start":{"line":16,"column":46},"end":{"line":16,"column":133}},"13":{"start":{"line":19,"column":0},"end":{"line":79,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":78,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":21,"column":70}},"16":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"17":{"start":{"line":23,"column":6},"end":{"line":23,"column":12}},"18":{"start":{"line":30,"column":4},"end":{"line":30,"column":53}},"19":{"start":{"line":32,"column":4},"end":{"line":77,"column":6}},"20":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"21":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"22":{"start":{"line":37,"column":6},"end":{"line":37,"column":96}},"23":{"start":{"line":38,"column":6},"end":{"line":40,"column":12}},"24":{"start":{"line":39,"column":8},"end":{"line":39,"column":70}},"25":{"start":{"line":41,"column":6},"end":{"line":41,"column":77}},"26":{"start":{"line":42,"column":6},"end":{"line":42,"column":49}},"27":{"start":{"line":48,"column":6},"end":{"line":48,"column":80}},"28":{"start":{"line":49,"column":6},"end":{"line":62,"column":7}},"29":{"start":{"line":52,"column":8},"end":{"line":52,"column":89}},"30":{"start":{"line":53,"column":8},"end":{"line":53,"column":98}},"31":{"start":{"line":54,"column":8},"end":{"line":54,"column":84}},"32":{"start":{"line":56,"column":8},"end":{"line":61,"column":10}},"33":{"start":{"line":64,"column":6},"end":{"line":64,"column":62}},"34":{"start":{"line":67,"column":6},"end":{"line":76,"column":8}},"35":{"start":{"line":68,"column":8},"end":{"line":75,"column":9}},"36":{"start":{"line":69,"column":10},"end":{"line":74,"column":12}},"37":{"start":{"line":81,"column":0},"end":{"line":81,"column":24}},"38":{"start":{"line":82,"column":0},"end":{"line":82,"column":24}},"39":{"start":{"line":83,"column":0},"end":{"line":83,"column":21}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"4":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":54},"end":{"line":53,"column":82}},{"start":{"line":53,"column":85},"end":{"line":53,"column":98}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]}},"code":["\"use strict\"","","const findAtRuleContext = require(\"../../utils/findAtRuleContext\")","const isKeyframeRule = require(\"../../utils/isKeyframeRule\")","const nodeContextLookup = require(\"../../utils/nodeContextLookup\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const normalizeSelector = require(\"normalize-selector\")","const resolvedNestedSelector = require(\"postcss-resolve-nested-selector\")","","const ruleName = \"no-duplicate-selectors\"","","const messages = ruleMessages(ruleName, {","  rejected: (selector, firstDuplicateLine) => `Unexpected duplicate selector \"${selector}\", first used at line ${firstDuplicateLine}`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    // The top level of this map will be rule sources.","    // Each source maps to another map, which maps rule parents to a set of selectors.","    // This ensures that selectors are only checked against selectors","    // from other rules that share the same parent and the same source.","    const selectorContextLookup = nodeContextLookup()","","    root.walkRules(rule => {","      if (isKeyframeRule(rule)) {","        return","      }","","      const contextSelectorSet = selectorContextLookup.getContext(rule, findAtRuleContext(rule))","      const resolvedSelectors = rule.selectors.reduce((result, selector) => {","        return _.union(result, resolvedNestedSelector(selector, rule))","      }, [])","      const normalizedSelectorList = resolvedSelectors.map(normalizeSelector)","      const selectorLine = rule.source.start.line","","      // Complain if the same selector list occurs twice","","      // Sort the selectors list so that the order of the constituents","      // doesn't matter","      const sortedSelectorList = normalizedSelectorList.slice().sort().join(\",\")","      if (contextSelectorSet.has(sortedSelectorList)) {","        // If the selector isn't nested we can use its raw value; otherwise,","        // we have to approximate something for the message -- which is close enough","        const isNestedSelector = resolvedSelectors.join(\",\") !== rule.selectors.join(\",\")","        const selectorForMessage = isNestedSelector ? resolvedSelectors.join(\", \") : rule.selector","        const previousDuplicatePosition = contextSelectorSet.get(sortedSelectorList)","","        return report({","          result,","          ruleName,","          node: rule,","          message: messages.rejected(selectorForMessage, previousDuplicatePosition),","        })","      }","","      contextSelectorSet.set(sortedSelectorList, selectorLine)","","      // Or complain if one selector list contains the same selector more than one","      rule.selectors.forEach((selector, i) => {","        if (_.includes(normalizedSelectorList.slice(0, i), normalizeSelector(selector))) {","          report({","            result,","            ruleName,","            node: rule,","            message: messages.rejected(selector, selectorLine),","          })","        }","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"16":0,"19":1,"20":0,"21":0,"22":0,"23":0,"30":0,"32":0,"33":0,"34":0,"37":0,"38":0,"39":0,"41":0,"42":0,"48":0,"49":0,"52":0,"53":0,"54":0,"56":0,"64":0,"67":0,"68":0,"69":0,"81":1,"82":1,"83":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isKeyframeRule.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isKeyframeRule.js","s":{"1":1,"2":0,"3":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":64}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":11,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":28}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":78}}},"branchMap":{"1":{"line":10,"type":"binary-expr","locations":[{"start":{"line":10,"column":9},"end":{"line":10,"column":33}},{"start":{"line":10,"column":37},"end":{"line":10,"column":78}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check if a rule is a keyframe one"," */","module.exports = function (rule/*: postcss$rule*/)/*: boolean*/ {","  const parent = rule.parent","","  return parent.type === \"atrule\" && parent.name.toLowerCase() === \"keyframes\"","}",""],"l":{"7":1,"8":0,"10":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-empty-source/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-empty-source/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1,"16":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":13,"column":0},"end":{"line":31,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":30,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":70}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"10":{"start":{"line":17,"column":6},"end":{"line":17,"column":12}},"11":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"12":{"start":{"line":21,"column":6},"end":{"line":21,"column":12}},"13":{"start":{"line":24,"column":4},"end":{"line":29,"column":6}},"14":{"start":{"line":33,"column":0},"end":{"line":33,"column":24}},"15":{"start":{"line":34,"column":0},"end":{"line":34,"column":24}},"16":{"start":{"line":35,"column":0},"end":{"line":35,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"no-empty-source\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected empty source\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    if (!/^\\s*$/.test(root.toString())) {","      return","    }","","    report({","      message: messages.rejected,","      node: root,","      result,","      ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"13":1,"14":0,"15":0,"16":0,"17":0,"20":0,"21":0,"24":0,"33":1,"34":1,"35":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-eol-whitespace/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-eol-whitespace/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":13},"end":{"line":21,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":16,"column":0},"end":{"line":19,"column":2}},"10":{"start":{"line":21,"column":0},"end":{"line":68,"column":1}},"11":{"start":{"line":22,"column":2},"end":{"line":67,"column":3}},"12":{"start":{"line":23,"column":4},"end":{"line":31,"column":6}},"13":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"14":{"start":{"line":33,"column":6},"end":{"line":33,"column":12}},"15":{"start":{"line":36,"column":4},"end":{"line":36,"column":38}},"16":{"start":{"line":37,"column":4},"end":{"line":66,"column":6}},"17":{"start":{"line":46,"column":6},"end":{"line":48,"column":7}},"18":{"start":{"line":47,"column":8},"end":{"line":47,"column":14}},"19":{"start":{"line":50,"column":6},"end":{"line":57,"column":7}},"20":{"start":{"line":53,"column":8},"end":{"line":53,"column":121}},"21":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"22":{"start":{"line":55,"column":10},"end":{"line":55,"column":16}},"23":{"start":{"line":59,"column":6},"end":{"line":65,"column":8}},"24":{"start":{"line":70,"column":0},"end":{"line":70,"column":24}},"25":{"start":{"line":71,"column":0},"end":{"line":71,"column":24}},"26":{"start":{"line":72,"column":0},"end":{"line":72,"column":21}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]}},"code":["\"use strict\"","","const isOnlyWhitespace = require(\"../../utils/isOnlyWhitespace\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"no-eol-whitespace\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected whitespace at end of line\",","})","","const whitespacesToReject = new Set([","  \" \",","  \"\\t\",","])","","const rule = function (on, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: on,","    }, {","      optional: true,","      actual: options,","      possible: {","        ignore: [\"empty-lines\"],","      },","    })","    if (!validOptions) {","      return","    }","","    const rootString = root.toString()","    styleSearch({","      source: rootString,","      target: [","        \"\\n\",","        \"\\r\",","      ],","      comments: \"check\",","    }, match => {","      // If the character before newline is not whitespace, ignore","      if (!whitespacesToReject.has(rootString[match.startIndex - 1])) {","        return","      }","","      if (optionsMatches(options, \"ignore\", \"empty-lines\")) {","        // If there is only whitespace between the previous newline and","        // this newline, ignore","        const lineBefore = rootString.substring(match.startIndex + 1, rootString.lastIndexOf(\"\\n\", match.startIndex - 1))","        if (isOnlyWhitespace(lineBefore)) {","          return","        }","      }","","      report({","        message: messages.rejected,","        node: root,","        index: match.startIndex - 1,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"16":1,"21":1,"22":0,"23":0,"32":0,"33":0,"36":0,"37":0,"46":0,"47":0,"50":0,"53":0,"54":0,"55":0,"59":0,"70":1,"71":1,"72":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isOnlyWhitespace.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isOnlyWhitespace.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":17},"end":{"line":9,"column":59}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":46}},"2":{"start":{"line":9,"column":0},"end":{"line":18,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":29}},"4":{"start":{"line":11,"column":2},"end":{"line":16,"column":3}},"5":{"start":{"line":12,"column":4},"end":{"line":15,"column":5}},"6":{"start":{"line":13,"column":6},"end":{"line":13,"column":30}},"7":{"start":{"line":14,"column":6},"end":{"line":14,"column":11}},"8":{"start":{"line":17,"column":2},"end":{"line":17,"column":25}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":12,"column":4}},{"start":{"line":12,"column":4},"end":{"line":12,"column":4}}]}},"code":["/* @flow */","\"use strict\"","","const isWhitespace = require(\"./isWhitespace\")","","/**"," * Returns a Boolean indicating whether the the input string is only whitespace."," */","module.exports = function (input/*: string*/)/*: boolean*/ {","  let isOnlyWhitespace = true","  for (let i = 0, l = input.length; i < l; i++) {","    if (!isWhitespace(input[i])) {","      isOnlyWhitespace = false","      break","    }","  }","  return isOnlyWhitespace","}",""],"l":{"4":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"17":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-extra-semicolons/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-extra-semicolons/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":1,"64":1,"65":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0],"13":[0,0],"14":[0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"getOffsetByNode","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":31}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":13},"end":{"line":41,"column":31}}},"3":{"name":"complain","line":113,"loc":{"start":{"line":113,"column":4},"end":{"line":113,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":58}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":70}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":16,"column":0},"end":{"line":39,"column":1}},"10":{"start":{"line":17,"column":2},"end":{"line":17,"column":45}},"11":{"start":{"line":18,"column":2},"end":{"line":18,"column":45}},"12":{"start":{"line":19,"column":2},"end":{"line":19,"column":41}},"13":{"start":{"line":20,"column":2},"end":{"line":20,"column":14}},"14":{"start":{"line":21,"column":2},"end":{"line":21,"column":16}},"15":{"start":{"line":22,"column":2},"end":{"line":22,"column":15}},"16":{"start":{"line":24,"column":2},"end":{"line":36,"column":3}},"17":{"start":{"line":25,"column":4},"end":{"line":28,"column":5}},"18":{"start":{"line":26,"column":6},"end":{"line":26,"column":15}},"19":{"start":{"line":27,"column":6},"end":{"line":27,"column":11}},"20":{"start":{"line":30,"column":4},"end":{"line":35,"column":5}},"21":{"start":{"line":31,"column":6},"end":{"line":31,"column":16}},"22":{"start":{"line":32,"column":6},"end":{"line":32,"column":15}},"23":{"start":{"line":34,"column":6},"end":{"line":34,"column":17}},"24":{"start":{"line":38,"column":2},"end":{"line":38,"column":14}},"25":{"start":{"line":41,"column":0},"end":{"line":123,"column":1}},"26":{"start":{"line":42,"column":2},"end":{"line":122,"column":3}},"27":{"start":{"line":43,"column":4},"end":{"line":43,"column":70}},"28":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"29":{"start":{"line":45,"column":6},"end":{"line":45,"column":12}},"30":{"start":{"line":48,"column":4},"end":{"line":48,"column":40}},"31":{"start":{"line":50,"column":4},"end":{"line":54,"column":5}},"32":{"start":{"line":51,"column":6},"end":{"line":53,"column":8}},"33":{"start":{"line":52,"column":8},"end":{"line":52,"column":81}},"34":{"start":{"line":56,"column":4},"end":{"line":111,"column":6}},"35":{"start":{"line":57,"column":6},"end":{"line":57,"column":42}},"36":{"start":{"line":59,"column":6},"end":{"line":91,"column":7}},"37":{"start":{"line":60,"column":8},"end":{"line":60,"column":27}},"38":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"39":{"start":{"line":64,"column":10},"end":{"line":64,"column":25}},"40":{"start":{"line":67,"column":8},"end":{"line":67,"column":32}},"41":{"start":{"line":70,"column":8},"end":{"line":74,"column":9}},"42":{"start":{"line":73,"column":10},"end":{"line":73,"column":25}},"43":{"start":{"line":76,"column":8},"end":{"line":76,"column":32}},"44":{"start":{"line":79,"column":8},"end":{"line":82,"column":9}},"45":{"start":{"line":80,"column":10},"end":{"line":80,"column":57}},"46":{"start":{"line":81,"column":10},"end":{"line":81,"column":25}},"47":{"start":{"line":84,"column":8},"end":{"line":90,"column":10}},"48":{"start":{"line":85,"column":10},"end":{"line":87,"column":11}},"49":{"start":{"line":86,"column":12},"end":{"line":86,"column":18}},"50":{"start":{"line":89,"column":10},"end":{"line":89,"column":83}},"51":{"start":{"line":93,"column":6},"end":{"line":93,"column":42}},"52":{"start":{"line":95,"column":6},"end":{"line":110,"column":7}},"53":{"start":{"line":96,"column":8},"end":{"line":96,"column":27}},"54":{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},"55":{"start":{"line":99,"column":10},"end":{"line":99,"column":25}},"56":{"start":{"line":102,"column":8},"end":{"line":109,"column":10}},"57":{"start":{"line":103,"column":10},"end":{"line":105,"column":11}},"58":{"start":{"line":104,"column":12},"end":{"line":104,"column":18}},"59":{"start":{"line":107,"column":10},"end":{"line":107,"column":115}},"60":{"start":{"line":108,"column":10},"end":{"line":108,"column":25}},"61":{"start":{"line":113,"column":4},"end":{"line":121,"column":5}},"62":{"start":{"line":114,"column":6},"end":{"line":120,"column":8}},"63":{"start":{"line":125,"column":0},"end":{"line":125,"column":24}},"64":{"start":{"line":126,"column":0},"end":{"line":126,"column":24}},"65":{"start":{"line":127,"column":0},"end":{"line":127,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":8},"end":{"line":25,"column":29}},{"start":{"line":25,"column":33},"end":{"line":25,"column":50}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":20}},{"start":{"line":50,"column":24},"end":{"line":50,"column":56}}]},"7":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"8":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":10},"end":{"line":59,"column":23}},{"start":{"line":59,"column":27},"end":{"line":59,"column":60}}]},"9":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"10":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":37}},{"start":{"line":63,"column":41},"end":{"line":63,"column":68}}]},"11":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"12":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":35}},{"start":{"line":70,"column":39},"end":{"line":70,"column":43}},{"start":{"line":71,"column":14},"end":{"line":71,"column":39}},{"start":{"line":71,"column":43},"end":{"line":71,"column":70}},{"start":{"line":71,"column":74},"end":{"line":71,"column":97}}]},"13":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]},"14":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":37}},{"start":{"line":79,"column":41},"end":{"line":79,"column":68}},{"start":{"line":79,"column":72},"end":{"line":79,"column":76}},{"start":{"line":79,"column":80},"end":{"line":79,"column":103}}]},"15":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":10},"end":{"line":85,"column":10}},{"start":{"line":85,"column":10},"end":{"line":85,"column":10}}]},"16":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":6},"end":{"line":95,"column":6}},{"start":{"line":95,"column":6},"end":{"line":95,"column":6}}]},"17":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":10},"end":{"line":95,"column":22}},{"start":{"line":95,"column":26},"end":{"line":95,"column":58}}]},"18":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":8}},{"start":{"line":98,"column":8},"end":{"line":98,"column":8}}]},"19":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":12},"end":{"line":98,"column":32}},{"start":{"line":98,"column":36},"end":{"line":98,"column":90}}]},"20":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":10},"end":{"line":103,"column":10}},{"start":{"line":103,"column":10},"end":{"line":103,"column":10}}]}},"code":["\"use strict\"","","const hasEmptyBlock = require(\"../../utils/hasEmptyBlock\")","const isCustomPropertySet = require(\"../../utils/isCustomPropertySet\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"no-extra-semicolons\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected extra semicolon\",","})","","function getOffsetByNode(node) {","  const string = node.root().source.input.css","  const nodeColumn = node.source.start.column","  const nodeLine = node.source.start.line","  let line = 1","  let column = 1","  let index = 0","","  for (let i = 0; i < string.length; i++) {","    if (column === nodeColumn && nodeLine === line) {","      index = i","      break","    }","","    if (string[i] === \"\\n\") {","      column = 1","      line += 1","    } else {","      column += 1","    }","  }","","  return index","}","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    const rawAfterRoot = root.raws.after","","    if (rawAfterRoot && rawAfterRoot.trim().length !== 0) {","      styleSearch({ source: rawAfterRoot, target: \";\" }, match => {","        complain(root.toString().length - rawAfterRoot.length + match.startIndex)","      })","    }","","    root.walk(node => {","      let rawBeforeNode = node.raws.before","","      if (rawBeforeNode && rawBeforeNode.trim().length !== 0) {","        let allowedSemi = 0","","        // Forbid semicolon before first custom properties sets","        if (isCustomPropertySet(node) && node.parent.index(node) > 0) {","          allowedSemi = 1","        }","","        const next = node.next()","","        // Ignore semicolon before comment if next node is custom properties sets or comment","        if (node.type === \"comment\" && next","          && (isCustomPropertySet(next) && node.parent.index(next) > 0 || next.type === \"comment\")","        ) {","          allowedSemi = 1","        }","","        const prev = node.prev()","","        // Adding previous node string to custom properties set if previous node is comment","        if (isCustomPropertySet(node) && node.parent.index(node) > 0 && prev && prev.type === \"comment\") {","          rawBeforeNode = prev.toString() + rawBeforeNode","          allowedSemi = 0","        }","","        styleSearch({ source: rawBeforeNode, target: \";\" }, (match, count) => {","          if (count === allowedSemi) {","            return","          }","","          complain(getOffsetByNode(node) - rawBeforeNode.length + match.startIndex)","        })","      }","","      const rawAfterNode = node.raws.after","","      if (rawAfterNode && rawAfterNode.trim().length !== 0) {","        let allowedSemi = 0","","        if (!hasEmptyBlock(node) && isCustomPropertySet(node.nodes[node.nodes.length - 1])) {","          allowedSemi = 1","        }","","        styleSearch({ source: rawAfterNode, target: \";\" }, (match, count) => {","          if (count === allowedSemi) {","            return","          }","","          const index = getOffsetByNode(node) + node.toString().length - 1 - rawAfterNode.length + match.startIndex","          complain(index)","        })","      }","    })","","    function complain(index) {","      report({","        message: messages.rejected,","        node: root,","        index,","        result,","        ruleName,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"24":0,"25":0,"26":0,"27":0,"30":0,"31":0,"32":0,"34":0,"38":0,"41":1,"42":0,"43":0,"44":0,"45":0,"48":0,"50":0,"51":0,"52":0,"56":0,"57":0,"59":0,"60":0,"63":0,"64":0,"67":0,"70":0,"73":0,"76":0,"79":0,"80":0,"81":0,"84":0,"85":0,"86":0,"89":0,"93":0,"95":0,"96":0,"98":0,"99":0,"102":0,"103":0,"104":0,"107":0,"108":0,"113":1,"114":0,"125":1,"126":1,"127":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-indistinguishable-colors/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-indistinguishable-colors/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":40}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":46}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":22},"end":{"line":14,"column":77}},"11":{"start":{"line":17,"column":0},"end":{"line":52,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":51,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":27,"column":6}},"14":{"start":{"line":24,"column":24},"end":{"line":24,"column":59}},"15":{"start":{"line":25,"column":24},"end":{"line":25,"column":59}},"16":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"17":{"start":{"line":29,"column":6},"end":{"line":29,"column":12}},"18":{"start":{"line":32,"column":4},"end":{"line":37,"column":6}},"19":{"start":{"line":39,"column":4},"end":{"line":39,"column":41}},"20":{"start":{"line":40,"column":4},"end":{"line":40,"column":47}},"21":{"start":{"line":41,"column":4},"end":{"line":50,"column":6}},"22":{"start":{"line":42,"column":6},"end":{"line":42,"column":100}},"23":{"start":{"line":43,"column":6},"end":{"line":49,"column":8}},"24":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}},"25":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"26":{"start":{"line":56,"column":0},"end":{"line":56,"column":21}}},"branchMap":{"1":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":24},"end":{"line":24,"column":37}},{"start":{"line":24,"column":41},"end":{"line":24,"column":47}},{"start":{"line":24,"column":51},"end":{"line":24,"column":59}}]},"2":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":24},"end":{"line":25,"column":36}},{"start":{"line":25,"column":40},"end":{"line":25,"column":59}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const isValidHex = require(\"../../utils/isValidHex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const Result = require(\"postcss/lib/result\")","const colorguard = require(\"colorguard\")","","const ruleName = \"no-indistinguishable-colors\"","","const messages = ruleMessages(ruleName, {","  rejected: (a, b) => `Unexpected indistinguishable colors \"${a}\" and \"${b}\"`,","})","","const rule = function (on, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual: on }, {","      optional: true,","      actual: options,","      possible: {","        ignore: isValidHex,","        threshold: x => _.isNumber(x) && x >= 0 && x <= 100,","        whitelist: x => _.isArray(x) && x.every(isValidHex),","      },","    })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    const colorguardResult = new Result()","    colorguard(options)(root, colorguardResult)","    colorguardResult.warnings().forEach(colorguardWarning => {","      const message = messages.rejected(colorguardWarning.secondColor, colorguardWarning.firstColor)","      report({","        ruleName,","        result,","        message,","        node: colorguardWarning.node,","        index: colorguardWarning.node.toString().indexOf(colorguardWarning.secondColor),","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"24":0,"25":0,"28":0,"29":0,"32":0,"39":0,"40":0,"41":0,"42":0,"43":0,"54":1,"55":1,"56":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-invalid-double-slash-comments/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-invalid-double-slash-comments/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":51}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":13,"column":0},"end":{"line":43,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":42,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":70}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"10":{"start":{"line":17,"column":6},"end":{"line":17,"column":12}},"11":{"start":{"line":20,"column":4},"end":{"line":29,"column":6}},"12":{"start":{"line":21,"column":6},"end":{"line":28,"column":7}},"13":{"start":{"line":22,"column":8},"end":{"line":27,"column":10}},"14":{"start":{"line":30,"column":4},"end":{"line":41,"column":6}},"15":{"start":{"line":31,"column":6},"end":{"line":40,"column":8}},"16":{"start":{"line":32,"column":8},"end":{"line":39,"column":9}},"17":{"start":{"line":33,"column":10},"end":{"line":38,"column":12}},"18":{"start":{"line":45,"column":0},"end":{"line":45,"column":24}},"19":{"start":{"line":46,"column":0},"end":{"line":46,"column":24}},"20":{"start":{"line":47,"column":0},"end":{"line":47,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":6}},{"start":{"line":21,"column":6},"end":{"line":21,"column":6}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"no-invalid-double-slash-comments\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected double-slash CSS comment\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (decl.prop.indexOf(\"//\") === 0) {","        report({","          message: messages.rejected,","          node: decl,","          result,","          ruleName,","        })","      }","    })","    root.walkRules(rule => {","      rule.selectors.forEach(selector => {","        if (selector.indexOf(\"//\") === 0) {","          report({","            message: messages.rejected,","            node: rule,","            result,","            ruleName,","          })","        }","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"13":1,"14":0,"15":0,"16":0,"17":0,"20":0,"21":0,"22":0,"30":0,"31":0,"32":0,"33":0,"45":1,"46":1,"47":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-missing-end-of-source-newline/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-missing-end-of-source-newline/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":51}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":13,"column":0},"end":{"line":33,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":32,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":70}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"10":{"start":{"line":17,"column":6},"end":{"line":17,"column":12}},"11":{"start":{"line":20,"column":4},"end":{"line":20,"column":43}},"12":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"13":{"start":{"line":22,"column":6},"end":{"line":22,"column":12}},"14":{"start":{"line":25,"column":4},"end":{"line":31,"column":6}},"15":{"start":{"line":35,"column":0},"end":{"line":35,"column":24}},"16":{"start":{"line":36,"column":0},"end":{"line":36,"column":24}},"17":{"start":{"line":37,"column":0},"end":{"line":37,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"3":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":24}},{"start":{"line":21,"column":28},"end":{"line":21,"column":56}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"no-missing-end-of-source-newline\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected missing end-of-source newline\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    const sourceCss = root.source.input.css","    if (sourceCss === \"\" || sourceCss.slice(-1) === \"\\n\") {","      return","    }","","    report({","      message: messages.rejected,","      node: root,","      index: sourceCss.length - 1,","      result,","      ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"13":1,"14":0,"15":0,"16":0,"17":0,"20":0,"21":0,"22":0,"25":0,"35":1,"36":1,"37":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-unsupported-browser-features/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-unsupported-browser-features/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}},"2":{"name":"cleanDoiuseWarningText","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":50}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":23},"end":{"line":13,"column":62}},"10":{"start":{"line":16,"column":0},"end":{"line":60,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":59,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":25,"column":6}},"13":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"14":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"15":{"start":{"line":30,"column":4},"end":{"line":35,"column":6}},"16":{"start":{"line":37,"column":4},"end":{"line":37,"column":28}},"17":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"18":{"start":{"line":40,"column":6},"end":{"line":40,"column":47}},"19":{"start":{"line":43,"column":4},"end":{"line":45,"column":5}},"20":{"start":{"line":44,"column":6},"end":{"line":44,"column":43}},"21":{"start":{"line":47,"column":4},"end":{"line":47,"column":37}},"22":{"start":{"line":48,"column":4},"end":{"line":48,"column":53}},"23":{"start":{"line":49,"column":4},"end":{"line":58,"column":6}},"24":{"start":{"line":50,"column":6},"end":{"line":57,"column":8}},"25":{"start":{"line":62,"column":0},"end":{"line":76,"column":1}},"26":{"start":{"line":64,"column":2},"end":{"line":64,"column":53}},"27":{"start":{"line":67,"column":2},"end":{"line":67,"column":97}},"28":{"start":{"line":70,"column":2},"end":{"line":70,"column":127}},"29":{"start":{"line":73,"column":2},"end":{"line":73,"column":112}},"30":{"start":{"line":75,"column":2},"end":{"line":75,"column":44}},"31":{"start":{"line":78,"column":0},"end":{"line":78,"column":24}},"32":{"start":{"line":79,"column":0},"end":{"line":79,"column":24}},"33":{"start":{"line":80,"column":0},"end":{"line":80,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":15}},{"start":{"line":39,"column":19},"end":{"line":39,"column":35}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"5":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":15}},{"start":{"line":43,"column":19},"end":{"line":43,"column":33}}]},"6":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":71},"end":{"line":70,"column":97}},{"start":{"line":70,"column":100},"end":{"line":70,"column":127}}]}},"code":["\"use strict\"","","const doiuse = require(\"doiuse\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const Result = require(\"postcss/lib/result\")","const _ = require(\"lodash\")","","const ruleName = \"no-unsupported-browser-features\"","","const messages = ruleMessages(ruleName, {","  rejected: details => `Unexpected browser feature ${details}`,","})","","const rule = function (on, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual: on }, {","      optional: true,","      actual: options,","      possible: {","        browsers: [_.isString],","        ignore: [_.isString],","      },","    })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    const doiuseOptions = {}","","    if (options && options.browsers) {","      doiuseOptions.browsers = options.browsers","    }","","    if (options && options.ignore) {","      doiuseOptions.ignore = options.ignore","    }","","    const doiuseResult = new Result()","    doiuse(doiuseOptions).postcss(root, doiuseResult)","    doiuseResult.warnings().forEach(doiuseWarning => {","      report({","        ruleName,","        result,","        message: messages.rejected(cleanDoiuseWarningText(doiuseWarning.text)),","        node: doiuseWarning.node,","        line: doiuseWarning.line,","        column: doiuseWarning.column,","      })","    })","  }","}","","function cleanDoiuseWarningText(warningText) {","  // Get index of feature Id","  const featureIdIndex = warningText.lastIndexOf(\"(\")","","  // Get feature Id, then replace brackets with quotes","  const featureId = warningText.slice(featureIdIndex, warningText.length).replace(/\\(|\\)/g, \"\\\"\")","","  // Get start of support text i.e. \"x not supported by...\", or \"y only partially supported by...\"","  const browserSupportStartIndex = warningText.indexOf(\"not\") !== -1 ? warningText.indexOf(\"not\") : warningText.indexOf(\"only\")","","  // Get browser support text, then strip brackets.","  const browserSupport = warningText.slice(browserSupportStartIndex, featureIdIndex - 1).replace(/\\(|\\)|:/g, \"\")","","  return `${featureId} is ${browserSupport}`","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"26":0,"27":0,"30":0,"37":0,"39":0,"40":0,"43":0,"44":0,"47":0,"48":0,"49":0,"50":0,"62":1,"64":0,"67":0,"70":0,"73":0,"75":0,"78":1,"79":1,"80":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-unknown-animations/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/no-unknown-animations/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":1,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":40}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":29},"end":{"line":13,"column":83}},"10":{"start":{"line":16,"column":0},"end":{"line":55,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":54,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"13":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"14":{"start":{"line":20,"column":6},"end":{"line":20,"column":12}},"15":{"start":{"line":23,"column":4},"end":{"line":23,"column":40}},"16":{"start":{"line":24,"column":4},"end":{"line":26,"column":6}},"17":{"start":{"line":25,"column":6},"end":{"line":25,"column":43}},"18":{"start":{"line":28,"column":4},"end":{"line":53,"column":6}},"19":{"start":{"line":29,"column":6},"end":{"line":52,"column":7}},"20":{"start":{"line":30,"column":8},"end":{"line":30,"column":60}},"21":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"22":{"start":{"line":33,"column":10},"end":{"line":33,"column":16}},"23":{"start":{"line":36,"column":8},"end":{"line":51,"column":10}},"24":{"start":{"line":37,"column":10},"end":{"line":39,"column":11}},"25":{"start":{"line":38,"column":12},"end":{"line":38,"column":18}},"26":{"start":{"line":40,"column":10},"end":{"line":42,"column":11}},"27":{"start":{"line":41,"column":12},"end":{"line":41,"column":18}},"28":{"start":{"line":44,"column":10},"end":{"line":50,"column":12}},"29":{"start":{"line":57,"column":0},"end":{"line":57,"column":24}},"30":{"start":{"line":58,"column":0},"end":{"line":58,"column":24}},"31":{"start":{"line":59,"column":0},"end":{"line":59,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"3":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":10},"end":{"line":29,"column":49}},{"start":{"line":29,"column":53},"end":{"line":29,"column":97}}]},"4":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":10},"end":{"line":37,"column":10}},{"start":{"line":37,"column":10},"end":{"line":37,"column":10}}]},"6":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":10},"end":{"line":40,"column":10}},{"start":{"line":40,"column":10},"end":{"line":40,"column":10}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const findAnimationName = require(\"../../utils/findAnimationName\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","","const ruleName = \"no-unknown-animations\"","","const messages = ruleMessages(ruleName, {","  rejected: animationName => `Unexpected unknown animation name \"${animationName}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    const declaredAnimations = new Set()","    root.walkAtRules(/(-(moz|webkit)-)?keyframes/i, atRule => {","      declaredAnimations.add(atRule.params)","    })","","    root.walkDecls(decl => {","      if (decl.prop.toLowerCase() === \"animation\" || decl.prop.toLowerCase() === \"animation-name\") {","        const animationNames = findAnimationName(decl.value)","","        if (animationNames.length === 0) {","          return","        }","","        animationNames.forEach(animationNameNode => {","          if (keywordSets.animationNameKeywords.has(animationNameNode.value.toLowerCase())) {","            return","          }","          if (declaredAnimations.has(animationNameNode.value)) {","            return","          }","","          report({","            result,","            ruleName,","            message: messages.rejected(animationNameNode.value),","            node: decl,","            index: declarationValueIndex(decl) + animationNameNode.sourceIndex,","          })","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"28":0,"29":0,"30":0,"32":0,"33":0,"36":0,"37":0,"38":0,"40":0,"41":0,"44":0,"57":1,"58":1,"59":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/findAnimationName.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/findAnimationName.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"findAnimationName","line":13,"loc":{"start":{"line":13,"column":17},"end":{"line":13,"column":82}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":55}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":64}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"6":{"start":{"line":13,"column":0},"end":{"line":55,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":14,"column":27}},"8":{"start":{"line":16,"column":2},"end":{"line":16,"column":46}},"9":{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},"10":{"start":{"line":20,"column":4},"end":{"line":20,"column":32}},"11":{"start":{"line":23,"column":2},"end":{"line":52,"column":4}},"12":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"13":{"start":{"line":25,"column":6},"end":{"line":25,"column":18}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":31,"column":4},"end":{"line":31,"column":56}},"17":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"18":{"start":{"line":35,"column":6},"end":{"line":35,"column":12}},"19":{"start":{"line":38,"column":4},"end":{"line":40,"column":5}},"20":{"start":{"line":39,"column":6},"end":{"line":39,"column":12}},"21":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"22":{"start":{"line":43,"column":6},"end":{"line":43,"column":12}},"23":{"start":{"line":46,"column":4},"end":{"line":46,"column":48}},"24":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"25":{"start":{"line":48,"column":6},"end":{"line":48,"column":12}},"26":{"start":{"line":51,"column":4},"end":{"line":51,"column":34}},"27":{"start":{"line":54,"column":2},"end":{"line":54,"column":23}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":6},"end":{"line":19,"column":35}},{"start":{"line":19,"column":39},"end":{"line":19,"column":109}}]},"3":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"4":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"5":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"6":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":4},"end":{"line":38,"column":4}},{"start":{"line":38,"column":4},"end":{"line":38,"column":4}}]},"7":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"8":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":4}},{"start":{"line":47,"column":4},"end":{"line":47,"column":4}}]},"9":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":12}},{"start":{"line":47,"column":16},"end":{"line":47,"column":27}}]}},"code":["/* @flow */","\"use strict\"","","const keywordSets = require(\"../reference/keywordSets\")","const getUnitFromValueNode = require(\"./getUnitFromValueNode\")","const isStandardSyntaxValue = require(\"./isStandardSyntaxValue\")","const isVariable = require(\"./isVariable\")","const postcssValueParser = require(\"postcss-value-parser\")","","/**"," * Get the font-families within a `font` shorthand property value."," */","module.exports = function findAnimationName(value/*: string*/)/*: Array<Object>*/ {","  const animationNames = []","","  const valueNodes = postcssValueParser(value)","","  // Handle `inherit`, `initial` and etc","  if (valueNodes.nodes.length === 1 && keywordSets.basicKeywords.has(valueNodes.nodes[0].value.toLowerCase())) {","    return [valueNodes.nodes[0]]","  }","","  valueNodes.walk(valueNode => {","    if (valueNode.type === \"function\") {","      return false","    }","    if (valueNode.type !== \"word\") {","      return","    }","","    const valueLowerCase = valueNode.value.toLowerCase()","","    // Ignore non standard syntax","    if (!isStandardSyntaxValue(valueLowerCase)) {","      return","    }","    // Ignore variables","    if (isVariable(valueLowerCase)) {","      return","    }","    // Ignore keywords for other font parts","    if (keywordSets.animationShorthandKeywords.has(valueLowerCase)) {","      return","    }","    // Ignore numbers with units","    const unit = getUnitFromValueNode(valueNode)","    if (unit || unit === \"\") {","      return","    }","","    animationNames.push(valueNode)","  })","","  return animationNames","}",""],"l":{"4":1,"5":1,"6":1,"7":1,"8":1,"13":1,"14":0,"16":0,"19":0,"20":0,"23":0,"24":0,"25":0,"27":0,"28":0,"31":0,"34":0,"35":0,"38":0,"39":0,"42":0,"43":0,"46":0,"47":0,"48":0,"51":0,"54":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/number-leading-zero/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/number-leading-zero/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":1,"43":1,"44":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"check","line":40,"loc":{"start":{"line":40,"column":4},"end":{"line":40,"column":42}}},"3":{"name":"complain","line":85,"loc":{"start":{"line":85,"column":4},"end":{"line":85,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}},"8":{"start":{"line":12,"column":0},"end":{"line":15,"column":2}},"9":{"start":{"line":17,"column":0},"end":{"line":95,"column":1}},"10":{"start":{"line":18,"column":2},"end":{"line":94,"column":3}},"11":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"12":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"13":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"14":{"start":{"line":30,"column":4},"end":{"line":36,"column":6}},"15":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"16":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"17":{"start":{"line":35,"column":6},"end":{"line":35,"column":52}},"18":{"start":{"line":38,"column":4},"end":{"line":38,"column":74}},"19":{"start":{"line":38,"column":27},"end":{"line":38,"column":73}},"20":{"start":{"line":40,"column":4},"end":{"line":83,"column":5}},"21":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":14}},"23":{"start":{"line":46,"column":6},"end":{"line":82,"column":8}},"24":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"25":{"start":{"line":49,"column":10},"end":{"line":49,"column":22}},"26":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"27":{"start":{"line":54,"column":10},"end":{"line":54,"column":16}},"28":{"start":{"line":58,"column":8},"end":{"line":70,"column":9}},"29":{"start":{"line":59,"column":10},"end":{"line":59,"column":63}},"30":{"start":{"line":61,"column":10},"end":{"line":63,"column":11}},"31":{"start":{"line":62,"column":12},"end":{"line":62,"column":18}},"32":{"start":{"line":68,"column":10},"end":{"line":68,"column":71}},"33":{"start":{"line":69,"column":10},"end":{"line":69,"column":119}},"34":{"start":{"line":72,"column":8},"end":{"line":81,"column":9}},"35":{"start":{"line":73,"column":10},"end":{"line":73,"column":65}},"36":{"start":{"line":75,"column":10},"end":{"line":77,"column":11}},"37":{"start":{"line":76,"column":12},"end":{"line":76,"column":18}},"38":{"start":{"line":79,"column":10},"end":{"line":79,"column":71}},"39":{"start":{"line":80,"column":10},"end":{"line":80,"column":119}},"40":{"start":{"line":85,"column":4},"end":{"line":93,"column":5}},"41":{"start":{"line":86,"column":6},"end":{"line":92,"column":8}},"42":{"start":{"line":97,"column":0},"end":{"line":97,"column":24}},"43":{"start":{"line":98,"column":0},"end":{"line":98,"column":24}},"44":{"start":{"line":99,"column":0},"end":{"line":99,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":8}},{"start":{"line":48,"column":8},"end":{"line":48,"column":8}}]},"5":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":41}},{"start":{"line":48,"column":45},"end":{"line":48,"column":84}}]},"6":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"7":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"8":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":10},"end":{"line":61,"column":10}},{"start":{"line":61,"column":10},"end":{"line":61,"column":10}}]},"9":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"10":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":10},"end":{"line":75,"column":10}},{"start":{"line":75,"column":10},"end":{"line":75,"column":10}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"number-leading-zero\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected a leading zero\",","  rejected: \"Unexpected leading zero\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      if (atRule.name.toLowerCase() === \"import\") {","        return","      }","","      check(atRule, atRule.params, atRuleParamIndex)","    })","","    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex))","","    function check(node, value, getIndex) {","      // Get out quickly if there are no periods","      if (value.indexOf(\".\") === -1) {","        return","      }","","      valueParser(value).walk(valueNode => {","        // Ignore `url` function","        if (valueNode.type === \"function\" && valueNode.value.toLowerCase() === \"url\") {","          return false","        }","","        // Ignore strings, comments, etc","        if (valueNode.type !== \"word\") {","          return","        }","","        // Check leading zero","        if (expectation === \"always\") {","          const match = /(?:\\D|^)(\\.\\d+)/.exec(valueNode.value)","","          if (match === null) {","            return","          }","","          // The regexp above consists of 2 capturing groups (or capturing parentheses).","          // We need the index of the second group. This makes sanse when we have \"-.5\" as an input","          // for regex. And we need the index of \".5\".","          const capturingGroupIndex = match[0].length - match[1].length","          complain(messages.expected, node, getIndex(node) + valueNode.sourceIndex + match.index + capturingGroupIndex)","        }","","        if (expectation === \"never\") {","          const match = /(?:\\D|^)(0+\\.\\d+)/.exec(valueNode.value)","","          if (match === null) {","            return","          }","","          const capturingGroupIndex = match[0].length - match[1].length","          complain(messages.rejected, node, getIndex(node) + valueNode.sourceIndex + match.index + capturingGroupIndex)","        }","      })","    }","","    function complain(message, node, index) {","      report({","        result,","        ruleName,","        message,","        node,","        index,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"17":1,"18":0,"19":0,"26":0,"27":0,"30":0,"31":0,"32":0,"35":0,"38":0,"40":1,"42":0,"43":0,"46":0,"48":0,"49":0,"53":0,"54":0,"58":0,"59":0,"61":0,"62":0,"68":0,"69":0,"72":0,"73":0,"75":0,"76":0,"79":0,"80":0,"85":1,"86":0,"97":1,"98":1,"99":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/number-max-precision/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/number-max-precision/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":1,"38":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":34}}},"2":{"name":"check","line":38,"loc":{"start":{"line":38,"column":4},"end":{"line":38,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":51}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":39}},"9":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"10":{"start":{"line":15,"column":35},"end":{"line":15,"column":94}},"11":{"start":{"line":18,"column":0},"end":{"line":75,"column":1}},"12":{"start":{"line":19,"column":2},"end":{"line":74,"column":3}},"13":{"start":{"line":20,"column":4},"end":{"line":23,"column":6}},"14":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"15":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"16":{"start":{"line":28,"column":4},"end":{"line":34,"column":6}},"17":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"18":{"start":{"line":30,"column":8},"end":{"line":30,"column":14}},"19":{"start":{"line":33,"column":6},"end":{"line":33,"column":52}},"20":{"start":{"line":36,"column":4},"end":{"line":36,"column":74}},"21":{"start":{"line":36,"column":27},"end":{"line":36,"column":73}},"22":{"start":{"line":38,"column":4},"end":{"line":73,"column":5}},"23":{"start":{"line":40,"column":6},"end":{"line":42,"column":7}},"24":{"start":{"line":41,"column":8},"end":{"line":41,"column":14}},"25":{"start":{"line":44,"column":6},"end":{"line":72,"column":8}},"26":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"27":{"start":{"line":47,"column":10},"end":{"line":47,"column":22}},"28":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"29":{"start":{"line":52,"column":10},"end":{"line":52,"column":16}},"30":{"start":{"line":55,"column":8},"end":{"line":55,"column":56}},"31":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"32":{"start":{"line":58,"column":10},"end":{"line":58,"column":16}},"33":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"34":{"start":{"line":62,"column":10},"end":{"line":62,"column":16}},"35":{"start":{"line":65,"column":8},"end":{"line":71,"column":10}},"36":{"start":{"line":77,"column":0},"end":{"line":77,"column":24}},"37":{"start":{"line":78,"column":0},"end":{"line":78,"column":24}},"38":{"start":{"line":79,"column":0},"end":{"line":79,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"5":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":41}},{"start":{"line":46,"column":45},"end":{"line":46,"column":84}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"7":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"8":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const _ = require(\"lodash\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"number-max-precision\"","","const messages = ruleMessages(ruleName, {","  expected: (number, precision) => `Expected \"${number}\" to be \"${number.toFixed(precision)}\"`,","})","","const rule = function (precision) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: precision,","      possible: [_.isNumber],","    })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      if (atRule.name.toLowerCase() === \"import\") {","        return","      }","","      check(atRule, atRule.params, atRuleParamIndex)","    })","","    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex))","","    function check(node, value, getIndex) {","      // Get out quickly if there are no periods","      if (value.indexOf(\".\") === -1) {","        return","      }","","      valueParser(value).walk(valueNode => {","        // Ignore `url` function","        if (valueNode.type === \"function\" && valueNode.value.toLowerCase() === \"url\") {","          return false","        }","","        // Ignore strings, comments, etc","        if (valueNode.type !== \"word\") {","          return","        }","","        const match = /\\d*\\.(\\d+)/.exec(valueNode.value)","","        if (match === null) {","          return","        }","","        if (match[1].length <= precision) {","          return","        }","","        report({","          result,","          ruleName,","          node,","          index: getIndex(node) + valueNode.sourceIndex + match.index,","          message: messages.expected(parseFloat(match[0]), precision),","        })","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"24":0,"25":0,"28":0,"29":0,"30":0,"33":0,"36":0,"38":1,"40":0,"41":0,"44":0,"46":0,"47":0,"51":0,"52":0,"55":0,"57":0,"58":0,"61":0,"62":0,"65":0,"77":1,"78":1,"79":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/number-no-trailing-zeros/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/number-no-trailing-zeros/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":1,"34":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":31}}},"2":{"name":"check","line":33,"loc":{"start":{"line":33,"column":4},"end":{"line":33,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":43}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":16,"column":0},"end":{"line":66,"column":1}},"10":{"start":{"line":17,"column":2},"end":{"line":65,"column":3}},"11":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"12":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"13":{"start":{"line":20,"column":6},"end":{"line":20,"column":12}},"14":{"start":{"line":23,"column":4},"end":{"line":29,"column":6}},"15":{"start":{"line":24,"column":6},"end":{"line":26,"column":7}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":14}},"17":{"start":{"line":28,"column":6},"end":{"line":28,"column":52}},"18":{"start":{"line":31,"column":4},"end":{"line":31,"column":74}},"19":{"start":{"line":31,"column":27},"end":{"line":31,"column":73}},"20":{"start":{"line":33,"column":4},"end":{"line":64,"column":5}},"21":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"22":{"start":{"line":36,"column":8},"end":{"line":36,"column":14}},"23":{"start":{"line":39,"column":6},"end":{"line":63,"column":8}},"24":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"25":{"start":{"line":42,"column":10},"end":{"line":42,"column":22}},"26":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"27":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"28":{"start":{"line":50,"column":8},"end":{"line":50,"column":63}},"29":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"30":{"start":{"line":53,"column":10},"end":{"line":53,"column":16}},"31":{"start":{"line":56,"column":8},"end":{"line":62,"column":10}},"32":{"start":{"line":68,"column":0},"end":{"line":68,"column":24}},"33":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"34":{"start":{"line":70,"column":0},"end":{"line":70,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":6}},{"start":{"line":24,"column":6},"end":{"line":24,"column":6}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"4":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":8}},{"start":{"line":41,"column":8},"end":{"line":41,"column":8}}]},"5":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":41}},{"start":{"line":41,"column":45},"end":{"line":41,"column":84}}]},"6":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"7":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"number-no-trailing-zeros\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected trailing zero(s)\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkAtRules(atRule => {","      if (atRule.name.toLowerCase() === \"import\") {","        return","      }","","      check(atRule, atRule.params, atRuleParamIndex)","    })","","    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex))","","    function check(node, value, getIndex) {","      // Get out quickly if there are no periods","      if (value.indexOf(\".\") === -1) {","        return","      }","","      valueParser(value).walk(valueNode => {","        // Ignore `url` function","        if (valueNode.type === \"function\" && valueNode.value.toLowerCase() === \"url\") {","          return false","        }","","        // Ignore strings, comments, etc","        if (valueNode.type !== \"word\") {","          return","        }","","        const match = /(\\.\\d*)0+(?:\\D|$)/.exec(valueNode.value)","","        if (match === null) {","          return","        }","","        report({","          message: messages.rejected,","          node,","          index: getIndex(node) + valueNode.sourceIndex + match.index + match[1].length,","          result,","          ruleName,","        })","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"28":0,"31":0,"33":1,"35":0,"36":0,"39":0,"41":0,"42":0,"46":0,"47":0,"50":0,"52":0,"53":0,"56":0,"68":1,"69":1,"70":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":24},"end":{"line":15,"column":59}},"12":{"start":{"line":18,"column":0},"end":{"line":49,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":48,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":23,"column":6}},"15":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"16":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"17":{"start":{"line":28,"column":4},"end":{"line":47,"column":6}},"18":{"start":{"line":29,"column":6},"end":{"line":29,"column":28}},"19":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"21":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"22":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"23":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"24":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"25":{"start":{"line":41,"column":6},"end":{"line":46,"column":8}},"26":{"start":{"line":51,"column":0},"end":{"line":51,"column":30}},"27":{"start":{"line":53,"column":0},"end":{"line":53,"column":24}},"28":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}},"29":{"start":{"line":55,"column":0},"end":{"line":55,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]}},"code":["\"use strict\"","","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","","const ruleName = \"property-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: property => `Unexpected property \"${property}\"`,","})","","const rule = function (blacklist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop","","      if (!isStandardSyntaxProperty(prop)) {","        return","      }","      if (isCustomProperty(prop)) {","        return","      }","      if (!matchesStringOrRegExp(postcss.vendor.unprefixed(prop), blacklist)) {","        return","      }","","      report({","        message: messages.rejected(prop),","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"24":0,"25":0,"28":0,"29":0,"31":0,"32":0,"34":0,"35":0,"37":0,"38":0,"41":0,"51":1,"53":1,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":32}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":34},"end":{"line":12,"column":76}},"9":{"start":{"line":15,"column":0},"end":{"line":51,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":50,"column":3}},"11":{"start":{"line":17,"column":4},"end":{"line":23,"column":6}},"12":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"13":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"14":{"start":{"line":28,"column":4},"end":{"line":49,"column":6}},"15":{"start":{"line":29,"column":6},"end":{"line":29,"column":28}},"16":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"17":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"18":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"19":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"20":{"start":{"line":38,"column":6},"end":{"line":38,"column":92}},"21":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"22":{"start":{"line":40,"column":8},"end":{"line":40,"column":14}},"23":{"start":{"line":43,"column":6},"end":{"line":48,"column":8}},"24":{"start":{"line":53,"column":0},"end":{"line":53,"column":24}},"25":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}},"26":{"start":{"line":55,"column":0},"end":{"line":55,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"4":{"line":38,"type":"cond-expr","locations":[{"start":{"line":38,"column":53},"end":{"line":38,"column":71}},{"start":{"line":38,"column":74},"end":{"line":38,"column":92}}]},"5":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]}},"code":["\"use strict\"","","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"property-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop","","      if (!isStandardSyntaxProperty(prop)) {","        return","      }","      if (isCustomProperty(prop)) {","        return","      }","","      const expectedProp = expectation === \"lower\" ? prop.toLowerCase() : prop.toUpperCase()","      if (prop === expectedProp) {","        return","      }","","      report({","        message: messages.expected(prop, expectedProp),","        node: decl,","        ruleName,","        result,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"16":0,"17":0,"24":0,"25":0,"28":0,"29":0,"31":0,"32":0,"34":0,"35":0,"38":0,"39":0,"40":0,"43":0,"53":1,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-no-unknown/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-no-unknown/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":1,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":86}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":54}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":34}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":38}},"12":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"13":{"start":{"line":17,"column":24},"end":{"line":17,"column":67}},"14":{"start":{"line":20,"column":0},"end":{"line":70,"column":1}},"15":{"start":{"line":21,"column":2},"end":{"line":69,"column":3}},"16":{"start":{"line":22,"column":4},"end":{"line":29,"column":6}},"17":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"18":{"start":{"line":32,"column":6},"end":{"line":32,"column":12}},"19":{"start":{"line":35,"column":4},"end":{"line":35,"column":63}},"20":{"start":{"line":37,"column":4},"end":{"line":68,"column":6}},"21":{"start":{"line":38,"column":6},"end":{"line":38,"column":28}},"22":{"start":{"line":40,"column":6},"end":{"line":42,"column":7}},"23":{"start":{"line":41,"column":8},"end":{"line":41,"column":14}},"24":{"start":{"line":43,"column":6},"end":{"line":45,"column":7}},"25":{"start":{"line":44,"column":8},"end":{"line":44,"column":14}},"26":{"start":{"line":46,"column":6},"end":{"line":48,"column":7}},"27":{"start":{"line":47,"column":8},"end":{"line":47,"column":14}},"28":{"start":{"line":50,"column":6},"end":{"line":52,"column":7}},"29":{"start":{"line":51,"column":8},"end":{"line":51,"column":14}},"30":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"31":{"start":{"line":55,"column":8},"end":{"line":55,"column":14}},"32":{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},"33":{"start":{"line":59,"column":8},"end":{"line":59,"column":14}},"34":{"start":{"line":62,"column":6},"end":{"line":67,"column":8}},"35":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}},"36":{"start":{"line":73,"column":0},"end":{"line":73,"column":24}},"37":{"start":{"line":74,"column":0},"end":{"line":74,"column":21}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":6}},{"start":{"line":43,"column":6},"end":{"line":43,"column":6}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":10},"end":{"line":50,"column":30}},{"start":{"line":50,"column":34},"end":{"line":50,"column":61}}]},"7":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"8":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]}},"code":["\"use strict\"","","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isStandardSyntaxDeclaration = require(\"../../utils/isStandardSyntaxDeclaration\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const properties = require(\"known-css-properties\").all","const postcss = require(\"postcss\")","","const ruleName = \"property-no-unknown\"","","const messages = ruleMessages(ruleName, {","  rejected: property => `Unexpected unknown property \"${property}\"`,","})","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignoreProperties: [_.isString],","        checkPrefixed: _.isBoolean,","      },","      optional: true,","    })","","    if (!validOptions) {","      return","    }","","    const shouldCheckPrefixed = _.get(options, \"checkPrefixed\")","","    root.walkDecls(decl => {","      const prop = decl.prop","","      if (!isStandardSyntaxProperty(prop)) {","        return","      }","      if (!isStandardSyntaxDeclaration(decl)) {","        return","      }","      if (isCustomProperty(prop)) {","        return","      }","","      if (!shouldCheckPrefixed && postcss.vendor.prefix(prop)) {","        return","      }","","      if (optionsMatches(options, \"ignoreProperties\", prop)) {","        return","      }","","      if (properties.indexOf(prop.toLowerCase()) !== -1) {","        return","      }","","      report({","        message: messages.rejected(prop),","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"20":1,"21":0,"22":0,"31":0,"32":0,"35":0,"37":0,"38":0,"40":0,"41":0,"43":0,"44":0,"46":0,"47":0,"50":0,"51":0,"54":0,"55":0,"58":0,"59":0,"62":0,"72":1,"73":1,"74":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-no-vendor-prefix/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-no-vendor-prefix/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":64}},"8":{"start":{"line":14,"column":0},"end":{"line":42,"column":1}},"9":{"start":{"line":15,"column":2},"end":{"line":41,"column":3}},"10":{"start":{"line":16,"column":4},"end":{"line":16,"column":70}},"11":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"12":{"start":{"line":18,"column":6},"end":{"line":18,"column":12}},"13":{"start":{"line":21,"column":4},"end":{"line":40,"column":6}},"14":{"start":{"line":22,"column":6},"end":{"line":22,"column":28}},"15":{"start":{"line":27,"column":6},"end":{"line":29,"column":7}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":14}},"17":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"19":{"start":{"line":34,"column":6},"end":{"line":39,"column":8}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":24}},"21":{"start":{"line":45,"column":0},"end":{"line":45,"column":24}},"22":{"start":{"line":46,"column":0},"end":{"line":46,"column":21}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":6}},{"start":{"line":27,"column":6},"end":{"line":27,"column":6}}]},"3":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":10},"end":{"line":27,"column":25}},{"start":{"line":27,"column":29},"end":{"line":27,"column":44}}]},"4":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]}},"code":["\"use strict\"","","const isAutoprefixable = require(\"../../utils/isAutoprefixable\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"property-no-vendor-prefix\"","","const messages = ruleMessages(ruleName, {","  rejected: property => `Unexpected vendor-prefix \"${property}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop","","      // Make sure there's a vendor prefix,","      // but this isn't a custom property","","      if (prop[0] !== \"-\" || prop[1] === \"-\") {","        return","      }","","      if (!isAutoprefixable.property(prop)) {","        return","      }","      report({","        message: messages.rejected(prop),","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"14":1,"15":0,"16":0,"17":0,"18":0,"21":0,"22":0,"27":0,"28":0,"31":0,"32":0,"34":0,"44":1,"45":1,"46":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/property-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":74}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":24},"end":{"line":15,"column":59}},"12":{"start":{"line":18,"column":0},"end":{"line":49,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":48,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":23,"column":6}},"15":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"16":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"17":{"start":{"line":28,"column":4},"end":{"line":47,"column":6}},"18":{"start":{"line":29,"column":6},"end":{"line":29,"column":28}},"19":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"21":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"22":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"23":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"24":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"25":{"start":{"line":41,"column":6},"end":{"line":46,"column":8}},"26":{"start":{"line":51,"column":0},"end":{"line":51,"column":30}},"27":{"start":{"line":53,"column":0},"end":{"line":53,"column":24}},"28":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}},"29":{"start":{"line":55,"column":0},"end":{"line":55,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]}},"code":["\"use strict\"","","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","","const ruleName = \"property-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: property => `Unexpected property \"${property}\"`,","})","","const rule = function (whitelist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop","","      if (!isStandardSyntaxProperty(prop)) {","        return","      }","      if (isCustomProperty(prop)) {","        return","      }","      if (matchesStringOrRegExp(postcss.vendor.unprefixed(prop), whitelist)) {","        return","      }","","      report({","        message: messages.rejected(prop),","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"24":0,"25":0,"28":0,"29":0,"31":0,"32":0,"34":0,"35":0,"37":0,"38":0,"41":0,"51":1,"53":1,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/root-no-standard-properties/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/root-no-standard-properties/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":1,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":31}}},"2":{"name":"checkSelector","line":36,"loc":{"start":{"line":36,"column":6},"end":{"line":36,"column":42}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":18},"end":{"line":41,"column":34}}},"4":{"name":"ignoreRule","line":67,"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":46}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":24},"end":{"line":13,"column":68}},"10":{"start":{"line":16,"column":0},"end":{"line":65,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":64,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"13":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"14":{"start":{"line":20,"column":6},"end":{"line":20,"column":12}},"15":{"start":{"line":23,"column":4},"end":{"line":28,"column":6}},"16":{"start":{"line":30,"column":4},"end":{"line":63,"column":6}},"17":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"19":{"start":{"line":34,"column":6},"end":{"line":34,"column":63}},"20":{"start":{"line":36,"column":6},"end":{"line":62,"column":7}},"21":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"22":{"start":{"line":38,"column":10},"end":{"line":38,"column":16}},"23":{"start":{"line":41,"column":8},"end":{"line":61,"column":10}},"24":{"start":{"line":42,"column":10},"end":{"line":44,"column":11}},"25":{"start":{"line":43,"column":12},"end":{"line":43,"column":18}},"26":{"start":{"line":46,"column":10},"end":{"line":46,"column":32}},"27":{"start":{"line":48,"column":10},"end":{"line":50,"column":11}},"28":{"start":{"line":49,"column":12},"end":{"line":49,"column":18}},"29":{"start":{"line":51,"column":10},"end":{"line":53,"column":11}},"30":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"31":{"start":{"line":55,"column":10},"end":{"line":60,"column":12}},"32":{"start":{"line":67,"column":0},"end":{"line":76,"column":1}},"33":{"start":{"line":68,"column":2},"end":{"line":68,"column":20}},"34":{"start":{"line":69,"column":2},"end":{"line":74,"column":4}},"35":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"36":{"start":{"line":72,"column":6},"end":{"line":72,"column":19}},"37":{"start":{"line":75,"column":2},"end":{"line":75,"column":15}},"38":{"start":{"line":78,"column":0},"end":{"line":78,"column":24}},"39":{"start":{"line":79,"column":0},"end":{"line":79,"column":24}},"40":{"start":{"line":80,"column":0},"end":{"line":80,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":10},"end":{"line":42,"column":10}},{"start":{"line":42,"column":10},"end":{"line":42,"column":10}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":10},"end":{"line":48,"column":10}},{"start":{"line":48,"column":10},"end":{"line":48,"column":10}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":10},"end":{"line":51,"column":10}},{"start":{"line":51,"column":10},"end":{"line":51,"column":10}}]},"7":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"8":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":26}},{"start":{"line":71,"column":30},"end":{"line":71,"column":74}},{"start":{"line":71,"column":78},"end":{"line":71,"column":110}},{"start":{"line":71,"column":114},"end":{"line":71,"column":171}}]}},"code":["\"use strict\"","","const isCustomProperty = require(\"../../utils/isCustomProperty\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"root-no-standard-properties\"","","const messages = ruleMessages(ruleName, {","  rejected: property => `Unexpected standard property \"${property}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed. Instead use the community 'stylelint-suitcss' plugin pack.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    root.walkRules(rule => {","      if (rule.selector.toLowerCase().indexOf(\":root\") === -1) {","        return","      }","      parseSelector(rule.selector, result, rule, checkSelector)","","      function checkSelector(selectorAST) {","        if (ignoreRule(selectorAST)) {","          return","        }","","        rule.each(function (node) {","          if (node.type !== \"decl\") {","            return","          }","","          const prop = node.prop","","          if (!isStandardSyntaxProperty(prop)) {","            return","          }","          if (isCustomProperty(prop)) {","            return","          }","","          report({","            message: messages.rejected(prop),","            node,","            result,","            ruleName,","          })","        })","      }","    })","  }","}","","function ignoreRule(selectorAST) {","  let ignore = false","  selectorAST.walk(selectorNode => {","    // ignore `:root` selector inside a `:not()` selector","    if (selectorNode.value && selectorNode.value.toLowerCase() === \":root\" && selectorNode.parent.parent.value && selectorNode.parent.parent.value.toLowerCase() === \":not\") {","      ignore = true","    }","  })","  return ignore","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"30":0,"31":0,"32":0,"34":0,"36":1,"37":0,"38":0,"41":0,"42":0,"43":0,"46":0,"48":0,"49":0,"51":0,"52":0,"55":0,"67":1,"68":0,"69":0,"71":0,"72":0,"75":0,"78":1,"79":1,"80":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/rule-empty-line-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/rule-empty-line-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":1,"42":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0,0,0],"17":[0,0],"18":[0,0,0,0],"19":[0,0],"20":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":72}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"9":{"start":{"line":13,"column":0},"end":{"line":16,"column":2}},"10":{"start":{"line":18,"column":0},"end":{"line":140,"column":1}},"11":{"start":{"line":19,"column":2},"end":{"line":139,"column":3}},"12":{"start":{"line":20,"column":4},"end":{"line":43,"column":6}},"13":{"start":{"line":45,"column":4},"end":{"line":47,"column":5}},"14":{"start":{"line":46,"column":6},"end":{"line":46,"column":12}},"15":{"start":{"line":49,"column":4},"end":{"line":138,"column":6}},"16":{"start":{"line":50,"column":6},"end":{"line":52,"column":7}},"17":{"start":{"line":51,"column":8},"end":{"line":51,"column":14}},"18":{"start":{"line":55,"column":6},"end":{"line":57,"column":7}},"19":{"start":{"line":56,"column":8},"end":{"line":56,"column":14}},"20":{"start":{"line":59,"column":6},"end":{"line":59,"column":85}},"21":{"start":{"line":62,"column":6},"end":{"line":68,"column":7}},"22":{"start":{"line":67,"column":8},"end":{"line":67,"column":14}},"23":{"start":{"line":71,"column":6},"end":{"line":76,"column":7}},"24":{"start":{"line":75,"column":8},"end":{"line":75,"column":14}},"25":{"start":{"line":79,"column":6},"end":{"line":84,"column":7}},"26":{"start":{"line":83,"column":8},"end":{"line":83,"column":14}},"27":{"start":{"line":87,"column":6},"end":{"line":92,"column":7}},"28":{"start":{"line":91,"column":8},"end":{"line":91,"column":54}},"29":{"start":{"line":95,"column":6},"end":{"line":101,"column":7}},"30":{"start":{"line":100,"column":8},"end":{"line":100,"column":54}},"31":{"start":{"line":104,"column":6},"end":{"line":111,"column":7}},"32":{"start":{"line":110,"column":8},"end":{"line":110,"column":54}},"33":{"start":{"line":114,"column":6},"end":{"line":121,"column":7}},"34":{"start":{"line":120,"column":8},"end":{"line":120,"column":54}},"35":{"start":{"line":123,"column":6},"end":{"line":123,"column":63}},"36":{"start":{"line":126,"column":6},"end":{"line":128,"column":7}},"37":{"start":{"line":127,"column":8},"end":{"line":127,"column":14}},"38":{"start":{"line":130,"column":6},"end":{"line":130,"column":83}},"39":{"start":{"line":132,"column":6},"end":{"line":137,"column":8}},"40":{"start":{"line":142,"column":0},"end":{"line":142,"column":24}},"41":{"start":{"line":143,"column":0},"end":{"line":143,"column":24}},"42":{"start":{"line":144,"column":0},"end":{"line":144,"column":21}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"4":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":73},"end":{"line":59,"column":77}},{"start":{"line":59,"column":80},"end":{"line":59,"column":85}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"6":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":58}},{"start":{"line":64,"column":11},"end":{"line":64,"column":22}},{"start":{"line":65,"column":11},"end":{"line":65,"column":41}}]},"7":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":6}},{"start":{"line":71,"column":6},"end":{"line":71,"column":6}}]},"8":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":57}},{"start":{"line":73,"column":11},"end":{"line":73,"column":31}}]},"9":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":6},"end":{"line":79,"column":6}},{"start":{"line":79,"column":6},"end":{"line":79,"column":6}}]},"10":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":48}},{"start":{"line":81,"column":11},"end":{"line":81,"column":46}}]},"11":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":6},"end":{"line":87,"column":6}},{"start":{"line":87,"column":6},"end":{"line":87,"column":6}}]},"12":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":57}},{"start":{"line":89,"column":11},"end":{"line":89,"column":37}}]},"13":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":6},"end":{"line":95,"column":6}},{"start":{"line":95,"column":6},"end":{"line":95,"column":6}}]},"14":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":55}},{"start":{"line":97,"column":11},"end":{"line":97,"column":22}},{"start":{"line":98,"column":11},"end":{"line":98,"column":38}}]},"15":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":6}},{"start":{"line":104,"column":6},"end":{"line":104,"column":6}}]},"16":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":72}},{"start":{"line":106,"column":11},"end":{"line":106,"column":22}},{"start":{"line":107,"column":11},"end":{"line":107,"column":38}},{"start":{"line":108,"column":11},"end":{"line":108,"column":31}}]},"17":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]},"18":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":70}},{"start":{"line":116,"column":11},"end":{"line":116,"column":22}},{"start":{"line":117,"column":11},"end":{"line":117,"column":41}},{"start":{"line":118,"column":11},"end":{"line":118,"column":53}}]},"19":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":6},"end":{"line":126,"column":6}},{"start":{"line":126,"column":6},"end":{"line":126,"column":6}}]},"20":{"line":130,"type":"cond-expr","locations":[{"start":{"line":130,"column":46},"end":{"line":130,"column":63}},{"start":{"line":130,"column":66},"end":{"line":130,"column":83}}]}},"code":["\"use strict\"","","const hasEmptyLine = require(\"../../utils/hasEmptyLine\")","const isSingleLineString = require(\"../../utils/isSingleLineString\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"rule-empty-line-before\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected empty line before rule\",","  rejected: \"Unexpected empty line before rule\",","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    }, {","      actual: options,","      possible: {","        ignore: [","          \"after-comment\",","          \"inside-block\",","        ],","        except: [","          \"after-rule\",","          \"after-single-line-comment\",","          \"first-nested\",","          \"inside-block-and-after-rule\",","        ],","      },","      optional: true,","    })","","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","","      // Ignore the first node","      if (rule === root.first) {","        return","      }","","      let expectEmptyLineBefore = expectation.indexOf(\"always\") !== -1 ? true : false","","      // Optionally ignore the expectation if a comment precedes this node","      if (","        optionsMatches(options, \"ignore\", \"after-comment\")","        && rule.prev()","        && rule.prev().type === \"comment\"","      ) {","        return","      }","","      // Optionally ignore the expectation if inside a block","      if (","        optionsMatches(options, \"ignore\", \"inside-block\")","        && rule.parent !== root","      ) {","        return","      }","","      // Ignore if the expectation is for multiple and the rule is single-line","      if (","        expectation.indexOf(\"multi-line\") !== -1","        && isSingleLineString(rule.toString())","      ) {","        return","      }","","      // Optionally reverse the expectation for the first nested node","      if (","        optionsMatches(options, \"except\", \"first-nested\")","        && rule === rule.parent.first","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Optionally reverse the expectation if a rule precedes this node","      if (","        optionsMatches(options, \"except\", \"after-rule\")","        && rule.prev()","        && rule.prev().type === \"rule\"","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Optionally reverse the expectation if a rule precedes this node and is inside a block","      if (","        optionsMatches(options, \"except\", \"inside-block-and-after-rule\")","        && rule.prev()","        && rule.prev().type === \"rule\"","        && rule.parent !== root","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      // Optionally reverse the expectation for single line comments","      if (","        optionsMatches(options, \"except\", \"after-single-line-comment\")","        && rule.prev()","        && rule.prev().type === \"comment\"","        && isSingleLineString(rule.prev().toString())","      ) {","        expectEmptyLineBefore = !expectEmptyLineBefore","      }","","      const hasEmptyLineBefore = hasEmptyLine(rule.raws.before)","","      // Return if the expectation is met","      if (expectEmptyLineBefore === hasEmptyLineBefore) {","        return","      }","","      const message = expectEmptyLineBefore ? messages.expected : messages.rejected","","      report({","        message,","        node: rule,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"18":1,"19":0,"20":0,"45":0,"46":0,"49":0,"50":0,"51":0,"55":0,"56":0,"59":0,"62":0,"67":0,"71":0,"75":0,"79":0,"83":0,"87":0,"91":0,"95":0,"100":0,"104":0,"110":0,"114":0,"120":0,"123":0,"126":0,"127":0,"130":0,"132":0,"142":1,"143":1,"144":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxRule.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxRule.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":58}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":67}},"3":{"start":{"line":10,"column":0},"end":{"line":46,"column":1}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":66}},"5":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":16}},"7":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"8":{"start":{"line":21,"column":4},"end":{"line":21,"column":16}},"9":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"10":{"start":{"line":26,"column":4},"end":{"line":26,"column":16}},"11":{"start":{"line":31,"column":2},"end":{"line":33,"column":3}},"12":{"start":{"line":32,"column":4},"end":{"line":32,"column":16}},"13":{"start":{"line":36,"column":2},"end":{"line":38,"column":3}},"14":{"start":{"line":37,"column":4},"end":{"line":37,"column":16}},"15":{"start":{"line":41,"column":2},"end":{"line":43,"column":3}},"16":{"start":{"line":42,"column":4},"end":{"line":42,"column":16}},"17":{"start":{"line":45,"column":2},"end":{"line":45,"column":13}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"4":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":6},"end":{"line":25,"column":34}},{"start":{"line":25,"column":38},"end":{"line":25,"column":64}}]},"5":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"6":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":17}},{"start":{"line":31,"column":21},"end":{"line":31,"column":35}}]},"7":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":2},"end":{"line":36,"column":2}},{"start":{"line":36,"column":2},"end":{"line":36,"column":2}}]},"8":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":31}},{"start":{"line":36,"column":35},"end":{"line":36,"column":61}}]},"9":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const _ = require(\"lodash\")","const isCustomPropertySet = require(\"../utils/isCustomPropertySet\")","","/**"," * Check whether a Node is a standard rule"," */","module.exports = function (rule/*: Object*/)/*: boolean*/ {","  // Get full selector","  const selector = _.get(rule, \"raws.selector.raw\", rule.selector)","","  // Custom property set (e.g. --custom-property-set: {})","  if (isCustomPropertySet(rule)) {","    return false","  }","","  // Called Less mixin (e.g. a { .mixin() })","  if (rule.ruleWithoutBody) {","    return false","  }","","  // Less detached rulesets","  if (selector.slice(0, 1) === \"@\" && selector.slice(-1) === \":\") {","    return false","  }","","  // Ignore mixin or &:extend rule","  // https://github.com/webschik/postcss-less/blob/master/lib/less-parser.js#L52","  if (rule.params && rule.params[0]) {","    return false","  }","","  // Non-outputting Less mixin definition (e.g. .mixin() {})","  if (_.endsWith(selector, \")\") && !_.includes(selector, \":\")) {","    return false","  }","","  // Ignore Scss nested properties","  if (selector.slice(-1) === \":\") {","    return false","  }","","  return true","}",""],"l":{"4":1,"5":1,"10":1,"12":0,"15":0,"16":0,"20":0,"21":0,"25":0,"26":0,"31":0,"32":0,"36":0,"37":0,"41":0,"42":0,"45":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/rule-nested-empty-line-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/rule-nested-empty-line-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":1,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":71}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":15,"column":0},"end":{"line":61,"column":1}},"8":{"start":{"line":16,"column":2},"end":{"line":60,"column":3}},"9":{"start":{"line":17,"column":4},"end":{"line":36,"column":6}},"10":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"11":{"start":{"line":38,"column":6},"end":{"line":38,"column":12}},"12":{"start":{"line":41,"column":4},"end":{"line":46,"column":6}},"13":{"start":{"line":48,"column":4},"end":{"line":59,"column":6}},"14":{"start":{"line":49,"column":6},"end":{"line":51,"column":7}},"15":{"start":{"line":50,"column":8},"end":{"line":50,"column":14}},"16":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"17":{"start":{"line":55,"column":8},"end":{"line":55,"column":14}},"18":{"start":{"line":58,"column":6},"end":{"line":58,"column":107}},"19":{"start":{"line":63,"column":0},"end":{"line":63,"column":24}},"20":{"start":{"line":64,"column":0},"end":{"line":64,"column":24}},"21":{"start":{"line":65,"column":0},"end":{"line":65,"column":21}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const checkRuleEmptyLineBefore = require(\"../checkRuleEmptyLineBefore\")","","const ruleName = \"rule-nested-empty-line-before\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected empty line before nested rule\",","  rejected: \"Unexpected empty line before nested rule\",","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    }, {","      actual: options,","      possible: {","        ignore: [\"after-comment\"],","        except: [","          \"first-nested\",","          \"after-comment\",","          \"after-rule\",","        ],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed. Instead use 'rule-empty-line-before'.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","","      // Only attend to nested rule sets","      if (rule.parent === root) {","        return","      }","","      checkRuleEmptyLineBefore({ rule, expectation, options, result, messages, checkedRuleName: ruleName })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"15":1,"16":0,"17":0,"37":0,"38":0,"41":0,"48":0,"49":0,"50":0,"54":0,"55":0,"58":0,"63":1,"64":1,"65":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/checkRuleEmptyLineBefore.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/checkRuleEmptyLineBefore.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0,0,0],"12":[0,0],"13":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":53}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":65}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":57}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":41}},"5":{"start":{"line":8,"column":0},"end":{"line":51,"column":1}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":86}},"7":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":10}},"9":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"10":{"start":{"line":18,"column":4},"end":{"line":18,"column":10}},"11":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"12":{"start":{"line":23,"column":4},"end":{"line":23,"column":50}},"13":{"start":{"line":27,"column":2},"end":{"line":29,"column":3}},"14":{"start":{"line":28,"column":4},"end":{"line":28,"column":50}},"15":{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},"16":{"start":{"line":33,"column":4},"end":{"line":33,"column":50}},"17":{"start":{"line":36,"column":2},"end":{"line":36,"column":64}},"18":{"start":{"line":39,"column":2},"end":{"line":41,"column":3}},"19":{"start":{"line":40,"column":4},"end":{"line":40,"column":10}},"20":{"start":{"line":43,"column":2},"end":{"line":43,"column":89}},"21":{"start":{"line":45,"column":2},"end":{"line":50,"column":4}}},"branchMap":{"1":{"line":9,"type":"cond-expr","locations":[{"start":{"line":9,"column":74},"end":{"line":9,"column":78}},{"start":{"line":9,"column":81},"end":{"line":9,"column":86}}]},"2":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"3":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":6},"end":{"line":12,"column":61}},{"start":{"line":12,"column":65},"end":{"line":12,"column":81}},{"start":{"line":12,"column":85},"end":{"line":12,"column":120}}]},"4":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]},"5":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":6},"end":{"line":17,"column":51}},{"start":{"line":17,"column":55},"end":{"line":17,"column":95}}]},"6":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"7":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":60}},{"start":{"line":22,"column":64},"end":{"line":22,"column":100}}]},"8":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"9":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":58}},{"start":{"line":27,"column":62},"end":{"line":27,"column":78}},{"start":{"line":27,"column":82},"end":{"line":27,"column":114}}]},"10":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"11":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":73}},{"start":{"line":32,"column":77},"end":{"line":32,"column":93}},{"start":{"line":32,"column":97},"end":{"line":32,"column":132}},{"start":{"line":32,"column":136},"end":{"line":32,"column":183}}]},"12":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"13":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":42},"end":{"line":43,"column":64}},{"start":{"line":43,"column":67},"end":{"line":43,"column":89}}]}},"code":["\"use strict\"","","const hasEmptyLine = require(\"../utils/hasEmptyLine\")","const isSingleLineString = require(\"../utils/isSingleLineString\")","const optionsMatches = require(\"../utils/optionsMatches\")","const report = require(\"../utils/report\")","","module.exports = function (opts) {","  let expectEmptyLineBefore = opts.expectation.indexOf(\"always\") !== -1 ? true : false","","  // Optionally ignore the expectation if a comment precedes this node","  if (optionsMatches(opts.options, \"ignore\", \"after-comment\") && opts.rule.prev() && opts.rule.prev().type === \"comment\") {","    return","  }","","  // Ignore if the expectation is for multiple and the rule is single-line","  if (opts.expectation.indexOf(\"multi-line\") !== -1 && isSingleLineString(opts.rule.toString())) {","    return","  }","","  // Optionally reverse the expectation for the first nested node","  if (optionsMatches(opts.options, \"except\", \"first-nested\") && opts.rule === opts.rule.parent.first) {","    expectEmptyLineBefore = !expectEmptyLineBefore","  }","","  // Optionally reverse the expectation if a rule precedes this node","  if (optionsMatches(opts.options, \"except\", \"after-rule\") && opts.rule.prev() && opts.rule.prev().type === \"rule\") {","    expectEmptyLineBefore = !expectEmptyLineBefore","  }","","  // Optionally reverse the expectation for single line comments","  if (optionsMatches(opts.options, \"except\", \"after-single-line-comment\") && opts.rule.prev() && opts.rule.prev().type === \"comment\" && isSingleLineString(opts.rule.prev().toString())) {","    expectEmptyLineBefore = !expectEmptyLineBefore","  }","","  const hasEmptyLineBefore = hasEmptyLine(opts.rule.raws.before)","","  // Return if the expectation is met","  if (expectEmptyLineBefore === hasEmptyLineBefore) {","    return","  }","","  const message = expectEmptyLineBefore ? opts.messages.expected : opts.messages.rejected","","  report({","    message,","    node: opts.rule,","    result: opts.result,","    ruleName: opts.checkedRuleName,","  })","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":0,"12":0,"13":0,"17":0,"18":0,"22":0,"23":0,"27":0,"28":0,"32":0,"33":0,"36":0,"39":0,"40":0,"43":0,"45":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/rule-non-nested-empty-line-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/rule-non-nested-empty-line-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":71}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":52}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":15,"column":0},"end":{"line":62,"column":1}},"8":{"start":{"line":16,"column":2},"end":{"line":61,"column":3}},"9":{"start":{"line":17,"column":4},"end":{"line":32,"column":6}},"10":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"11":{"start":{"line":34,"column":6},"end":{"line":34,"column":12}},"12":{"start":{"line":37,"column":4},"end":{"line":42,"column":6}},"13":{"start":{"line":44,"column":4},"end":{"line":60,"column":6}},"14":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"15":{"start":{"line":46,"column":8},"end":{"line":46,"column":14}},"16":{"start":{"line":50,"column":6},"end":{"line":52,"column":7}},"17":{"start":{"line":51,"column":8},"end":{"line":51,"column":14}},"18":{"start":{"line":55,"column":6},"end":{"line":57,"column":7}},"19":{"start":{"line":56,"column":8},"end":{"line":56,"column":14}},"20":{"start":{"line":59,"column":6},"end":{"line":59,"column":107}},"21":{"start":{"line":64,"column":0},"end":{"line":64,"column":24}},"22":{"start":{"line":65,"column":0},"end":{"line":65,"column":24}},"23":{"start":{"line":66,"column":0},"end":{"line":66,"column":21}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"4":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const checkRuleEmptyLineBefore = require(\"../checkRuleEmptyLineBefore\")","","const ruleName = \"rule-non-nested-empty-line-before\"","","const messages = ruleMessages(ruleName, {","  expected: \"Expected empty line before non-nested rule\",","  rejected: \"Unexpected empty line before non-nested rule\",","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    }, {","      actual: options,","      possible: {","        ignore: [\"after-comment\"],","        except: [\"after-single-line-comment\"],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed. Instead use 'rule-empty-line-before'.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","","      // Ignore nested rule sets","      if (rule.parent !== root) {","        return","      }","","      // Ignore the first node","      if (rule === root.first) {","        return","      }","","      checkRuleEmptyLineBefore({ rule, expectation, options, result, messages, checkedRuleName: ruleName })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"15":1,"16":0,"17":0,"33":0,"34":0,"37":0,"44":0,"45":0,"46":0,"50":0,"51":0,"55":0,"56":0,"59":0,"64":1,"65":1,"66":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-brackets-space-inside/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-brackets-space-inside/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":1,"39":1,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":36}}},"2":{"name":"complain","line":68,"loc":{"start":{"line":68,"column":6},"end":{"line":68,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":59}},"8":{"start":{"line":12,"column":0},"end":{"line":17,"column":2}},"9":{"start":{"line":19,"column":0},"end":{"line":79,"column":1}},"10":{"start":{"line":20,"column":2},"end":{"line":78,"column":3}},"11":{"start":{"line":21,"column":4},"end":{"line":27,"column":6}},"12":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"13":{"start":{"line":29,"column":6},"end":{"line":29,"column":12}},"14":{"start":{"line":32,"column":4},"end":{"line":77,"column":6}},"15":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"16":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"17":{"start":{"line":36,"column":6},"end":{"line":38,"column":7}},"18":{"start":{"line":37,"column":8},"end":{"line":37,"column":14}},"19":{"start":{"line":40,"column":6},"end":{"line":66,"column":8}},"20":{"start":{"line":41,"column":8},"end":{"line":65,"column":10}},"21":{"start":{"line":42,"column":10},"end":{"line":42,"column":66}},"22":{"start":{"line":44,"column":10},"end":{"line":53,"column":12}},"23":{"start":{"line":45,"column":12},"end":{"line":45,"column":89}},"24":{"start":{"line":46,"column":12},"end":{"line":46,"column":74}},"25":{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},"26":{"start":{"line":48,"column":14},"end":{"line":48,"column":55}},"27":{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},"28":{"start":{"line":51,"column":14},"end":{"line":51,"column":55}},"29":{"start":{"line":55,"column":10},"end":{"line":64,"column":12}},"30":{"start":{"line":56,"column":12},"end":{"line":56,"column":89}},"31":{"start":{"line":57,"column":12},"end":{"line":57,"column":74}},"32":{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},"33":{"start":{"line":59,"column":14},"end":{"line":59,"column":55}},"34":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"35":{"start":{"line":62,"column":14},"end":{"line":62,"column":55}},"36":{"start":{"line":68,"column":6},"end":{"line":76,"column":7}},"37":{"start":{"line":69,"column":8},"end":{"line":75,"column":10}},"38":{"start":{"line":81,"column":0},"end":{"line":81,"column":24}},"39":{"start":{"line":82,"column":0},"end":{"line":82,"column":24}},"40":{"start":{"line":83,"column":0},"end":{"line":83,"column":21}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":6}},{"start":{"line":36,"column":6},"end":{"line":36,"column":6}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":12},"end":{"line":47,"column":12}},{"start":{"line":47,"column":12},"end":{"line":47,"column":12}}]},"5":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":16},"end":{"line":47,"column":31}},{"start":{"line":47,"column":35},"end":{"line":47,"column":58}}]},"6":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":12}},{"start":{"line":50,"column":12},"end":{"line":50,"column":12}}]},"7":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":16},"end":{"line":50,"column":32}},{"start":{"line":50,"column":36},"end":{"line":50,"column":60}}]},"8":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":12}},{"start":{"line":58,"column":12},"end":{"line":58,"column":12}}]},"9":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":16},"end":{"line":58,"column":31}},{"start":{"line":58,"column":35},"end":{"line":58,"column":58}}]},"10":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":12}},{"start":{"line":61,"column":12},"end":{"line":61,"column":12}}]},"11":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":16},"end":{"line":61,"column":32}},{"start":{"line":61,"column":36},"end":{"line":61,"column":60}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"selector-attribute-brackets-space-inside\"","","const messages = ruleMessages(ruleName, {","  expectedOpening: \"Expected single space after \\\"[\\\"\",","  rejectedOpening: \"Unexpected whitespace after \\\"[\\\"\",","  expectedClosing: \"Expected single space before \\\"]\\\"\",","  rejectedClosing: \"Unexpected whitespace before \\\"]\\\"\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (rule.selector.indexOf(\"[\") === -1) {","        return","      }","","      parseSelector(rule.selector, result, rule, selectorTree => {","        selectorTree.walkAttributes(attributeNode => {","          const attributeSelectorString = attributeNode.toString()","","          styleSearch({ source: attributeSelectorString, target: \"[\" }, match => {","            const nextCharIsSpace = attributeSelectorString[match.startIndex + 1] === \" \"","            const index = attributeNode.sourceIndex + match.startIndex + 1","            if (nextCharIsSpace && expectation === \"never\") {","              complain(messages.rejectedOpening, index)","            }","            if (!nextCharIsSpace && expectation === \"always\") {","              complain(messages.expectedOpening, index)","            }","          })","","          styleSearch({ source: attributeSelectorString, target: \"]\" }, match => {","            const prevCharIsSpace = attributeSelectorString[match.startIndex - 1] === \" \"","            const index = attributeNode.sourceIndex + match.startIndex - 1","            if (prevCharIsSpace && expectation === \"never\") {","              complain(messages.rejectedClosing, index)","            }","            if (!prevCharIsSpace && expectation === \"always\") {","              complain(messages.expectedClosing, index)","            }","          })","        })","      })","","      function complain(message, index) {","        report({","          message,","          index,","          result,","          ruleName,","          node: rule,","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"19":1,"20":0,"21":0,"28":0,"29":0,"32":0,"33":0,"34":0,"36":0,"37":0,"40":0,"41":0,"42":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0,"51":0,"55":0,"56":0,"57":0,"58":0,"59":0,"61":0,"62":0,"68":1,"69":0,"81":1,"82":1,"83":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-operator-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-operator-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":56}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":24},"end":{"line":13,"column":59}},"10":{"start":{"line":16,"column":0},"end":{"line":54,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":45}},"12":{"start":{"line":18,"column":2},"end":{"line":53,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"14":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"15":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"16":{"start":{"line":27,"column":4},"end":{"line":52,"column":6}},"17":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"18":{"start":{"line":29,"column":8},"end":{"line":29,"column":14}},"19":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"21":{"start":{"line":35,"column":6},"end":{"line":51,"column":8}},"22":{"start":{"line":36,"column":8},"end":{"line":50,"column":10}},"23":{"start":{"line":37,"column":10},"end":{"line":37,"column":49}},"24":{"start":{"line":39,"column":10},"end":{"line":41,"column":11}},"25":{"start":{"line":40,"column":12},"end":{"line":40,"column":18}},"26":{"start":{"line":43,"column":10},"end":{"line":49,"column":12}},"27":{"start":{"line":56,"column":0},"end":{"line":56,"column":30}},"28":{"start":{"line":58,"column":0},"end":{"line":58,"column":24}},"29":{"start":{"line":59,"column":0},"end":{"line":59,"column":24}},"30":{"start":{"line":60,"column":0},"end":{"line":60,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"4":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":10},"end":{"line":31,"column":43}},{"start":{"line":31,"column":47},"end":{"line":31,"column":80}}]},"5":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":10},"end":{"line":39,"column":10}},{"start":{"line":39,"column":10},"end":{"line":39,"column":10}}]},"6":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":14},"end":{"line":39,"column":23}},{"start":{"line":39,"column":27},"end":{"line":39,"column":35}},{"start":{"line":39,"column":39},"end":{"line":39,"column":73}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","","const ruleName = \"selector-attribute-operator-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: operator => `Unexpected operator \"${operator}\"`,","})","","const rule = function (blacklistInput) {","  const blacklist = [].concat(blacklistInput)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (rule.selector.indexOf(\"[\") === -1 || rule.selector.indexOf(\"=\") === -1) {","        return","      }","","      parseSelector(rule.selector, result, rule, selectorTree => {","        selectorTree.walkAttributes(attributeNode => {","          const operator = attributeNode.operator","","          if (!operator || operator && blacklist.indexOf(operator) === -1) {","            return","          }","","          report({","            message: messages.rejected(operator),","            node: rule,","            index: attributeNode.attribute.length + 1,","            result,","            ruleName,","          })","        })","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"19":0,"23":0,"24":0,"27":0,"28":0,"29":0,"31":0,"32":0,"35":0,"36":0,"37":0,"39":0,"40":0,"43":0,"56":1,"58":1,"59":1,"60":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-operator-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-operator-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":97}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":29},"end":{"line":11,"column":72}},"8":{"start":{"line":12,"column":29},"end":{"line":12,"column":72}},"9":{"start":{"line":15,"column":0},"end":{"line":37,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":36,"column":3}},"11":{"start":{"line":17,"column":4},"end":{"line":17,"column":69}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":35,"column":6}},"16":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"17":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const selectorAttributeOperatorSpaceChecker = require(\"../selectorAttributeOperatorSpaceChecker\")","","const ruleName = \"selector-attribute-operator-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: operator => `Expected single space after \"${operator}\"`,","  rejectedAfter: operator => `Unexpected whitespace after \"${operator}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const checker = whitespaceChecker(\"space\", expectation, messages)","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    selectorAttributeOperatorSpaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","      checkBeforeOperator: false,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"39":1,"40":1,"41":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selectorAttributeOperatorSpaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selectorAttributeOperatorSpaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":36}}},"2":{"name":"checkOperator","line":34,"loc":{"start":{"line":34,"column":4},"end":{"line":34,"column":74}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":69}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":55}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":8,"column":0},"end":{"line":48,"column":1}},"6":{"start":{"line":9,"column":2},"end":{"line":47,"column":4}},"7":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"8":{"start":{"line":11,"column":6},"end":{"line":11,"column":12}},"9":{"start":{"line":13,"column":4},"end":{"line":15,"column":5}},"10":{"start":{"line":14,"column":6},"end":{"line":14,"column":12}},"11":{"start":{"line":17,"column":4},"end":{"line":32,"column":6}},"12":{"start":{"line":18,"column":6},"end":{"line":31,"column":8}},"13":{"start":{"line":19,"column":8},"end":{"line":19,"column":47}},"14":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"15":{"start":{"line":22,"column":10},"end":{"line":22,"column":16}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":60}},"17":{"start":{"line":27,"column":8},"end":{"line":30,"column":10}},"18":{"start":{"line":28,"column":10},"end":{"line":28,"column":91}},"19":{"start":{"line":29,"column":10},"end":{"line":29,"column":94}},"20":{"start":{"line":34,"column":4},"end":{"line":46,"column":5}},"21":{"start":{"line":35,"column":6},"end":{"line":45,"column":8}},"22":{"start":{"line":38,"column":18},"end":{"line":44,"column":10}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":4}},{"start":{"line":10,"column":4},"end":{"line":10,"column":4}}]},"2":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":13,"column":4}},{"start":{"line":13,"column":4},"end":{"line":13,"column":4}}]},"3":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":8},"end":{"line":13,"column":41}},{"start":{"line":13,"column":45},"end":{"line":13,"column":78}}]},"4":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":8}},{"start":{"line":21,"column":8},"end":{"line":21,"column":8}}]},"5":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":54},"end":{"line":28,"column":70}},{"start":{"line":28,"column":73},"end":{"line":28,"column":91}}]},"6":{"line":39,"type":"cond-expr","locations":[{"start":{"line":39,"column":59},"end":{"line":39,"column":70}},{"start":{"line":39,"column":73},"end":{"line":39,"column":102}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../utils/isStandardSyntaxRule\")","const parseSelector = require(\"../utils/parseSelector\")","const report = require(\"../utils/report\")","const styleSearch = require(\"style-search\")","","module.exports = function (options) {","  options.root.walkRules(rule => {","    if (!isStandardSyntaxRule(rule)) {","      return","    }","    if (rule.selector.indexOf(\"[\") === -1 || rule.selector.indexOf(\"=\") === -1) {","      return","    }","","    parseSelector(rule.selector, options.result, rule, selectorTree => {","      selectorTree.walkAttributes(attributeNode => {","        const operator = attributeNode.operator","","        if (!operator) {","          return","        }","","        const attributeNodeString = attributeNode.toString()","","        styleSearch({ source: attributeNodeString, target: operator }, match => {","          const index = options.checkBeforeOperator ? match.startIndex : match.endIndex - 1","          checkOperator(attributeNodeString, index, rule, attributeNode.sourceIndex, operator)","        })","      })","    })","","    function checkOperator(source, index, node, attributeIndex, operator) {","      options.locationChecker({","        source,","        index,","        err: m => report({","          message: m.replace(options.checkBeforeOperator ? operator[0] : operator[operator.length - 1], operator),","          node,","          index: attributeIndex + index,","          result: options.result,","          ruleName: options.checkedRuleName,","        }),","      })","    }","  })","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":0,"10":0,"11":0,"13":0,"14":0,"17":0,"18":0,"19":0,"21":0,"22":0,"25":0,"27":0,"28":0,"29":0,"34":1,"35":0,"38":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-operator-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-operator-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":97}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":59}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":30},"end":{"line":11,"column":74}},"8":{"start":{"line":12,"column":30},"end":{"line":12,"column":74}},"9":{"start":{"line":15,"column":0},"end":{"line":37,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":2},"end":{"line":36,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":35,"column":6}},"16":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"17":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const selectorAttributeOperatorSpaceChecker = require(\"../selectorAttributeOperatorSpaceChecker\")","","const ruleName = \"selector-attribute-operator-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: operator => `Expected single space before \"${operator}\"`,","  rejectedBefore: operator => `Unexpected whitespace before \"${operator}\"`,","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    selectorAttributeOperatorSpaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","      checkBeforeOperator: true,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"39":1,"40":1,"41":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-operator-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-operator-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":56}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":24},"end":{"line":13,"column":59}},"10":{"start":{"line":16,"column":0},"end":{"line":54,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":45}},"12":{"start":{"line":18,"column":2},"end":{"line":53,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"14":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"15":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"16":{"start":{"line":27,"column":4},"end":{"line":52,"column":6}},"17":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"18":{"start":{"line":29,"column":8},"end":{"line":29,"column":14}},"19":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"21":{"start":{"line":35,"column":6},"end":{"line":51,"column":8}},"22":{"start":{"line":36,"column":8},"end":{"line":50,"column":10}},"23":{"start":{"line":37,"column":10},"end":{"line":37,"column":49}},"24":{"start":{"line":39,"column":10},"end":{"line":41,"column":11}},"25":{"start":{"line":40,"column":12},"end":{"line":40,"column":18}},"26":{"start":{"line":43,"column":10},"end":{"line":49,"column":12}},"27":{"start":{"line":56,"column":0},"end":{"line":56,"column":30}},"28":{"start":{"line":58,"column":0},"end":{"line":58,"column":24}},"29":{"start":{"line":59,"column":0},"end":{"line":59,"column":24}},"30":{"start":{"line":60,"column":0},"end":{"line":60,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"4":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":10},"end":{"line":31,"column":43}},{"start":{"line":31,"column":47},"end":{"line":31,"column":80}}]},"5":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":10},"end":{"line":39,"column":10}},{"start":{"line":39,"column":10},"end":{"line":39,"column":10}}]},"6":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":14},"end":{"line":39,"column":23}},{"start":{"line":39,"column":27},"end":{"line":39,"column":35}},{"start":{"line":39,"column":39},"end":{"line":39,"column":73}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","","const ruleName = \"selector-attribute-operator-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: operator => `Unexpected operator \"${operator}\"`,","})","","const rule = function (whitelistInput) {","  const whitelist = [].concat(whitelistInput)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (rule.selector.indexOf(\"[\") === -1 || rule.selector.indexOf(\"=\") === -1) {","        return","      }","","      parseSelector(rule.selector, result, rule, selectorTree => {","        selectorTree.walkAttributes(attributeNode => {","          const operator = attributeNode.operator","","          if (!operator || operator && whitelist.indexOf(operator) !== -1) {","            return","          }","","          report({","            message: messages.rejected(operator),","            node: rule,","            index: attributeNode.attribute.length + 1,","            result,","            ruleName,","          })","        })","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"19":0,"23":0,"24":0,"27":0,"28":0,"29":0,"31":0,"32":0,"35":0,"36":0,"37":0,"39":0,"40":0,"43":0,"56":1,"58":1,"59":1,"60":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-quotes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-attribute-quotes/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}},"2":{"name":"complain","line":55,"loc":{"start":{"line":55,"column":6},"end":{"line":55,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"7":{"start":{"line":11,"column":0},"end":{"line":14,"column":2}},"8":{"start":{"line":12,"column":21},"end":{"line":12,"column":56}},"9":{"start":{"line":13,"column":21},"end":{"line":13,"column":58}},"10":{"start":{"line":16,"column":0},"end":{"line":66,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":65,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":64,"column":6}},"16":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"17":{"start":{"line":31,"column":8},"end":{"line":31,"column":14}},"18":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"19":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"20":{"start":{"line":37,"column":6},"end":{"line":53,"column":8}},"21":{"start":{"line":38,"column":8},"end":{"line":52,"column":10}},"22":{"start":{"line":39,"column":10},"end":{"line":41,"column":11}},"23":{"start":{"line":40,"column":12},"end":{"line":40,"column":18}},"24":{"start":{"line":43,"column":10},"end":{"line":43,"column":66}},"25":{"start":{"line":45,"column":10},"end":{"line":47,"column":11}},"26":{"start":{"line":46,"column":12},"end":{"line":46,"column":150}},"27":{"start":{"line":49,"column":10},"end":{"line":51,"column":11}},"28":{"start":{"line":50,"column":12},"end":{"line":50,"column":150}},"29":{"start":{"line":55,"column":6},"end":{"line":63,"column":7}},"30":{"start":{"line":56,"column":8},"end":{"line":62,"column":10}},"31":{"start":{"line":68,"column":0},"end":{"line":68,"column":24}},"32":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"33":{"start":{"line":70,"column":0},"end":{"line":70,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"4":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":10},"end":{"line":33,"column":43}},{"start":{"line":33,"column":47},"end":{"line":33,"column":80}}]},"5":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":10},"end":{"line":39,"column":10}},{"start":{"line":39,"column":10},"end":{"line":39,"column":10}}]},"6":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":10},"end":{"line":45,"column":10}},{"start":{"line":45,"column":10},"end":{"line":45,"column":10}}]},"7":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":14},"end":{"line":45,"column":35}},{"start":{"line":45,"column":39},"end":{"line":45,"column":63}}]},"8":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":10},"end":{"line":49,"column":10}},{"start":{"line":49,"column":10},"end":{"line":49,"column":10}}]},"9":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":14},"end":{"line":49,"column":34}},{"start":{"line":49,"column":38},"end":{"line":49,"column":61}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-attribute-quotes\"","","const messages = ruleMessages(ruleName, {","  expected: value => `Expected quotes around \"${value}\"`,","  rejected: value => `Unexpected quotes around \"${value}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (rule.selector.indexOf(\"[\") === -1 || rule.selector.indexOf(\"=\") === -1) {","        return","      }","","      parseSelector(rule.selector, result, rule, selectorTree => {","        selectorTree.walkAttributes(attributeNode => {","          if (!attributeNode.operator) {","            return","          }","","          const attributeSelectorString = attributeNode.toString()","","          if (!attributeNode.quoted && expectation === \"always\") {","            complain(messages.expected(attributeNode.raws.unquoted), attributeNode.sourceIndex + attributeSelectorString.indexOf(attributeNode.value))","          }","","          if (attributeNode.quoted && expectation === \"never\") {","            complain(messages.rejected(attributeNode.raws.unquoted), attributeNode.sourceIndex + attributeSelectorString.indexOf(attributeNode.value))","          }","        })","      })","","      function complain(message, index) {","        report({","          message,","          index,","          result,","          ruleName,","          node: rule,","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"13":0,"16":1,"17":0,"18":0,"25":0,"26":0,"29":0,"30":0,"31":0,"33":0,"34":0,"37":0,"38":0,"39":0,"40":0,"43":0,"45":0,"46":0,"49":0,"50":0,"55":1,"56":0,"68":1,"69":1,"70":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-class-pattern/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-class-pattern/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":1,"55":1,"56":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":41}}},"2":{"name":"checkSelector","line":69,"loc":{"start":{"line":69,"column":4},"end":{"line":69,"column":47}}},"3":{"name":"hasInterpolatingAmpersand","line":92,"loc":{"start":{"line":92,"column":0},"end":{"line":92,"column":45}}},"4":{"name":"isCombinator","line":107,"loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":68}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":72}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":41}},"11":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"12":{"start":{"line":16,"column":29},"end":{"line":16,"column":101}},"13":{"start":{"line":19,"column":0},"end":{"line":87,"column":1}},"14":{"start":{"line":20,"column":2},"end":{"line":86,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":33,"column":6}},"16":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"17":{"start":{"line":35,"column":6},"end":{"line":35,"column":12}},"18":{"start":{"line":38,"column":4},"end":{"line":38,"column":81}},"19":{"start":{"line":39,"column":4},"end":{"line":39,"column":81}},"20":{"start":{"line":41,"column":4},"end":{"line":67,"column":6}},"21":{"start":{"line":42,"column":6},"end":{"line":43,"column":34}},"22":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"23":{"start":{"line":46,"column":8},"end":{"line":46,"column":14}},"24":{"start":{"line":48,"column":6},"end":{"line":50,"column":7}},"25":{"start":{"line":49,"column":8},"end":{"line":49,"column":14}},"26":{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},"27":{"start":{"line":51,"column":30},"end":{"line":51,"column":51}},"28":{"start":{"line":52,"column":8},"end":{"line":52,"column":14}},"29":{"start":{"line":56,"column":6},"end":{"line":66,"column":7}},"30":{"start":{"line":57,"column":8},"end":{"line":63,"column":10}},"31":{"start":{"line":58,"column":10},"end":{"line":60,"column":11}},"32":{"start":{"line":59,"column":12},"end":{"line":59,"column":18}},"33":{"start":{"line":62,"column":10},"end":{"line":62,"column":76}},"34":{"start":{"line":62,"column":53},"end":{"line":62,"column":75}},"35":{"start":{"line":65,"column":8},"end":{"line":65,"column":74}},"36":{"start":{"line":65,"column":51},"end":{"line":65,"column":73}},"37":{"start":{"line":69,"column":4},"end":{"line":85,"column":5}},"38":{"start":{"line":70,"column":6},"end":{"line":84,"column":8}},"39":{"start":{"line":71,"column":8},"end":{"line":72,"column":45}},"40":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"41":{"start":{"line":75,"column":10},"end":{"line":75,"column":16}},"42":{"start":{"line":77,"column":8},"end":{"line":83,"column":10}},"43":{"start":{"line":92,"column":0},"end":{"line":105,"column":1}},"44":{"start":{"line":93,"column":2},"end":{"line":103,"column":3}},"45":{"start":{"line":94,"column":4},"end":{"line":96,"column":5}},"46":{"start":{"line":95,"column":6},"end":{"line":95,"column":14}},"47":{"start":{"line":97,"column":4},"end":{"line":99,"column":5}},"48":{"start":{"line":98,"column":6},"end":{"line":98,"column":17}},"49":{"start":{"line":100,"column":4},"end":{"line":102,"column":5}},"50":{"start":{"line":101,"column":6},"end":{"line":101,"column":17}},"51":{"start":{"line":104,"column":2},"end":{"line":104,"column":14}},"52":{"start":{"line":107,"column":0},"end":{"line":110,"column":1}},"53":{"start":{"line":108,"column":2},"end":{"line":109,"column":3}},"54":{"start":{"line":112,"column":0},"end":{"line":112,"column":24}},"55":{"start":{"line":113,"column":0},"end":{"line":113,"column":24}},"56":{"start":{"line":114,"column":0},"end":{"line":114,"column":21}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"2":{"line":39,"type":"cond-expr","locations":[{"start":{"line":39,"column":52},"end":{"line":39,"column":71}},{"start":{"line":39,"column":74},"end":{"line":39,"column":81}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":6}},{"start":{"line":48,"column":6},"end":{"line":48,"column":6}}]},"5":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":6},"end":{"line":56,"column":6}},{"start":{"line":56,"column":6},"end":{"line":56,"column":6}}]},"7":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":10},"end":{"line":56,"column":38}},{"start":{"line":56,"column":42},"end":{"line":56,"column":77}}]},"8":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":10},"end":{"line":58,"column":10}},{"start":{"line":58,"column":10},"end":{"line":58,"column":10}}]},"9":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":8}},{"start":{"line":74,"column":8},"end":{"line":74,"column":8}}]},"10":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":4},"end":{"line":94,"column":4}},{"start":{"line":94,"column":4},"end":{"line":94,"column":4}}]},"11":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"12":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":39}},{"start":{"line":97,"column":43},"end":{"line":97,"column":73}}]},"13":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"14":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":8},"end":{"line":100,"column":39}},{"start":{"line":100,"column":43},"end":{"line":100,"column":73}}]}},"code":["\"use strict\"","","const isKeyframeSelector = require(\"../../utils/isKeyframeSelector\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const resolveNestedSelector = require(\"postcss-resolve-nested-selector\")","","const ruleName = \"selector-class-pattern\"","","const messages = ruleMessages(ruleName, {","  expected: selectorValue => `Expected class selector \".${selectorValue}\" to match specified pattern`,","})","","const rule = function (pattern, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: pattern,","      possible: [","        _.isRegExp,","        _.isString,","      ],","    }, {","      actual: options,","      possible: {","        resolveNestedSelectors: _.isBoolean,","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    const shouldResolveNestedSelectors = _.get(options, \"resolveNestedSelectors\")","    const normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern","","    root.walkRules(rule => {","      const selector = rule.selector,","        selectors = rule.selectors","","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      if (selectors.some(s => isKeyframeSelector(s))) {","        return","      }","","      // Only bother resolving selectors that have an interpolating &","      if (shouldResolveNestedSelectors && hasInterpolatingAmpersand(selector)) {","        resolveNestedSelector(selector, rule).forEach(selector => {","          if (!isStandardSyntaxSelector(selector)) {","            return","          }","","          parseSelector(selector, result, rule, s => checkSelector(s, rule))","        })","      } else {","        parseSelector(selector, result, rule, s => checkSelector(s, rule))","      }","    })","","    function checkSelector(fullSelector, rule) {","      fullSelector.walkClasses(classNode => {","        const value = classNode.value,","          sourceIndex = classNode.sourceIndex","","        if (normalizedPattern.test(value)) {","          return","        }","        report({","          result,","          ruleName,","          message: messages.expected(value),","          node: rule,","          index: sourceIndex,","        })","      })","    }","  }","}","","// An \"interpolating ampersand\" means an \"&\" used to interpolate","// within another simple selector, rather than an \"&\" that","// stands on its own as a simple selector","function hasInterpolatingAmpersand(selector) {","  for (let i = 0, l = selector.length; i < l; i++) {","    if (selector[i] !== \"&\") {","      continue","    }","    if (!_.isUndefined(selector[i - 1]) && !isCombinator(selector[i - 1])) {","      return true","    }","    if (!_.isUndefined(selector[i + 1]) && !isCombinator(selector[i + 1])) {","      return true","    }","  }","  return false","}","","function isCombinator(x) {","  return (/[\\s+>~]/.test(x)","  )","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"16":0,"19":1,"20":0,"21":0,"34":0,"35":0,"38":0,"39":0,"41":0,"42":0,"45":0,"46":0,"48":0,"49":0,"51":0,"52":0,"56":0,"57":0,"58":0,"59":0,"62":0,"65":0,"69":1,"70":0,"71":0,"74":0,"75":0,"77":0,"92":1,"93":0,"94":0,"95":0,"97":0,"98":0,"100":0,"101":0,"104":0,"107":1,"108":0,"112":1,"113":1,"114":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isKeyframeSelector.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isKeyframeSelector.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":17},"end":{"line":9,"column":62}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":55}},"2":{"start":{"line":9,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":12,"column":3}},"4":{"start":{"line":11,"column":4},"end":{"line":11,"column":15}},"5":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":15}},"7":{"start":{"line":19,"column":2},"end":{"line":19,"column":14}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":2},"end":{"line":10,"column":2}},{"start":{"line":10,"column":2},"end":{"line":10,"column":2}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const keywordSets = require(\"../reference/keywordSets\")","","/**"," * Check whether a string is a keyframe selector."," */","module.exports = function (selector/*: string*/)/*: boolean*/ {","  if (keywordSets.keyframeSelectorKeywords.has(selector)) {","    return true","  }","","  // Percentages","  if (/^(?:\\d+\\.?\\d*|\\d*\\.?\\d+)%$/.test(selector)) {","    return true","  }","","  return false","}",""],"l":{"4":1,"9":1,"10":0,"11":0,"15":0,"16":0,"19":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxSelector.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxSelector.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":62}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":61}},"2":{"start":{"line":8,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":12,"column":3}},"4":{"start":{"line":11,"column":4},"end":{"line":11,"column":16}},"5":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":16}},"7":{"start":{"line":19,"column":2},"end":{"line":19,"column":13}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":2},"end":{"line":10,"column":2}},{"start":{"line":10,"column":2},"end":{"line":10,"column":2}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const hasInterpolation = require(\"../utils/hasInterpolation\")","/**"," * Check whether a selector is standard"," */","module.exports = function (selector/*: string*/)/*: boolean*/ {","  // SCSS or Less interpolation","  if (hasInterpolation(selector)) {","    return false","  }","","  // SCSS placeholder selectors","  if (selector.indexOf(\"%\") === 0) {","    return false","  }","","  return true","}",""],"l":{"4":1,"8":1,"10":0,"11":0,"15":0,"16":0,"19":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-combinator-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-combinator-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":83}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":31},"end":{"line":11,"column":76}},"8":{"start":{"line":12,"column":31},"end":{"line":12,"column":76}},"9":{"start":{"line":15,"column":0},"end":{"line":36,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const selectorCombinatorSpaceChecker = require(\"../selectorCombinatorSpaceChecker\")","","const ruleName = \"selector-combinator-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: combinator => `Expected single space after \"${combinator}\"`,","  rejectedAfter: combinator => `Unexpected whitespace after \"${combinator}\"`,","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    selectorCombinatorSpaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selectorCombinatorSpaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selectorCombinatorSpaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":33}}},"2":{"name":"check","line":38,"loc":{"start":{"line":38,"column":2},"end":{"line":38,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":63}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":8,"column":0},"end":{"line":48,"column":1}},"6":{"start":{"line":9,"column":2},"end":{"line":36,"column":4}},"7":{"start":{"line":12,"column":4},"end":{"line":35,"column":6}},"8":{"start":{"line":13,"column":6},"end":{"line":34,"column":8}},"9":{"start":{"line":18,"column":8},"end":{"line":20,"column":31}},"10":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"11":{"start":{"line":25,"column":10},"end":{"line":25,"column":16}},"12":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"13":{"start":{"line":30,"column":10},"end":{"line":30,"column":16}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":41}},"15":{"start":{"line":38,"column":2},"end":{"line":47,"column":3}},"16":{"start":{"line":39,"column":4},"end":{"line":46,"column":6}},"17":{"start":{"line":39,"column":52},"end":{"line":45,"column":6}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":8}},{"start":{"line":24,"column":8},"end":{"line":24,"column":8}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":12},"end":{"line":24,"column":26}},{"start":{"line":24,"column":30},"end":{"line":24,"column":56}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":8}},{"start":{"line":29,"column":8},"end":{"line":29,"column":8}}]}},"code":["\"use strict\"","","const report = require(\"../utils/report\")","const _ = require(\"lodash\")","const punctuationSets = require(\"../reference/punctuationSets\")","const styleSearch = require(\"style-search\")","","module.exports = function (opts) {","  opts.root.walkRules(rule => {","    // Check each selector individually, instead of all as one string,","    // in case some that aren't the first begin with combinators (nesting syntax)","    rule.selectors.forEach(selector => {","      styleSearch({","        source: selector,","        target: _.toArray(punctuationSets.nonSpaceCombinators),","        parentheticals: \"skip\",","      }, match => {","        const endIndex = match.endIndex,","          startIndex = match.startIndex,","          target = match.target","","        // Catch ~= in attribute selectors","","        if (target === \"~\" && selector[endIndex] === \"=\") {","          return","        }","","        // Catch escaped combinator-like character","        if (selector[startIndex - 1] === \"\\\\\") {","          return","        }","","        check(selector, startIndex, rule)","      })","    })","  })","","  function check(source, index, node) {","    opts.locationChecker({ source, index, err: m => report({","      message: m,","      node,","      index,","      result: opts.result,","      ruleName: opts.checkedRuleName,","    }),","    })","  }","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":0,"12":0,"13":0,"18":0,"24":0,"25":0,"29":0,"30":0,"33":0,"38":1,"39":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-combinator-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-combinator-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":83}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"6":{"start":{"line":10,"column":0},"end":{"line":13,"column":2}},"7":{"start":{"line":11,"column":32},"end":{"line":11,"column":78}},"8":{"start":{"line":12,"column":32},"end":{"line":12,"column":78}},"9":{"start":{"line":15,"column":0},"end":{"line":36,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":67}},"11":{"start":{"line":17,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":34,"column":6}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"17":{"start":{"line":39,"column":0},"end":{"line":39,"column":24}},"18":{"start":{"line":40,"column":0},"end":{"line":40,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const selectorCombinatorSpaceChecker = require(\"../selectorCombinatorSpaceChecker\")","","const ruleName = \"selector-combinator-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: combinator => `Expected single space before \"${combinator}\"`,","  rejectedBefore: combinator => `Unexpected whitespace before \"${combinator}\"`,","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    selectorCombinatorSpaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"15":1,"16":0,"17":0,"18":0,"25":0,"26":0,"29":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-descendant-combinator-no-non-space/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":66}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":68}},"10":{"start":{"line":16,"column":0},"end":{"line":52,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":51,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"13":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"14":{"start":{"line":20,"column":6},"end":{"line":20,"column":12}},"15":{"start":{"line":23,"column":4},"end":{"line":50,"column":6}},"16":{"start":{"line":24,"column":6},"end":{"line":26,"column":7}},"17":{"start":{"line":25,"column":8},"end":{"line":25,"column":14}},"18":{"start":{"line":28,"column":6},"end":{"line":28,"column":36}},"19":{"start":{"line":30,"column":6},"end":{"line":49,"column":8}},"20":{"start":{"line":31,"column":8},"end":{"line":48,"column":10}},"21":{"start":{"line":32,"column":10},"end":{"line":32,"column":44}},"22":{"start":{"line":34,"column":10},"end":{"line":36,"column":11}},"23":{"start":{"line":35,"column":12},"end":{"line":35,"column":18}},"24":{"start":{"line":37,"column":10},"end":{"line":39,"column":11}},"25":{"start":{"line":38,"column":12},"end":{"line":38,"column":18}},"26":{"start":{"line":41,"column":10},"end":{"line":47,"column":12}},"27":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}},"28":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"29":{"start":{"line":56,"column":0},"end":{"line":56,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":6}},{"start":{"line":24,"column":6},"end":{"line":24,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":10},"end":{"line":34,"column":10}},{"start":{"line":34,"column":10},"end":{"line":34,"column":10}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":10},"end":{"line":37,"column":10}},{"start":{"line":37,"column":10},"end":{"line":37,"column":10}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const punctuationSets = require(\"../../reference/punctuationSets\")","","const ruleName = \"selector-descendant-combinator-no-non-space\"","","const messages = ruleMessages(ruleName, {","  rejected: nonSpaceCharacter => `Unexpected \"${nonSpaceCharacter}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","","      const selector = rule.selector","","      parseSelector(selector, result, rule, fullSelector => {","        fullSelector.walkCombinators(combinatorNode => {","          const value = combinatorNode.value","","          if (punctuationSets.nonSpaceCombinators.has(value)) {","            return","          }","          if (value === \" \") {","            return","          }","","          report({","            result,","            ruleName,","            message: messages.rejected(value),","            node: rule,","            index: combinatorNode.sourceIndex,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"28":0,"30":0,"31":0,"32":0,"34":0,"35":0,"37":0,"38":0,"41":0,"54":1,"55":1,"56":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-id-pattern/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-id-pattern/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":38}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":29},"end":{"line":14,"column":98}},"11":{"start":{"line":17,"column":0},"end":{"line":66,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":65,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"14":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"15":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"16":{"start":{"line":30,"column":4},"end":{"line":30,"column":81}},"17":{"start":{"line":32,"column":4},"end":{"line":64,"column":6}},"18":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"19":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"20":{"start":{"line":37,"column":6},"end":{"line":37,"column":36}},"21":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"22":{"start":{"line":40,"column":8},"end":{"line":40,"column":14}},"23":{"start":{"line":43,"column":6},"end":{"line":63,"column":8}},"24":{"start":{"line":44,"column":8},"end":{"line":62,"column":10}},"25":{"start":{"line":45,"column":10},"end":{"line":47,"column":11}},"26":{"start":{"line":46,"column":12},"end":{"line":46,"column":18}},"27":{"start":{"line":48,"column":10},"end":{"line":49,"column":50}},"28":{"start":{"line":51,"column":10},"end":{"line":53,"column":11}},"29":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"30":{"start":{"line":55,"column":10},"end":{"line":61,"column":12}},"31":{"start":{"line":68,"column":0},"end":{"line":68,"column":24}},"32":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"33":{"start":{"line":70,"column":0},"end":{"line":70,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":30,"type":"cond-expr","locations":[{"start":{"line":30,"column":52},"end":{"line":30,"column":71}},{"start":{"line":30,"column":74},"end":{"line":30,"column":81}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"4":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":10},"end":{"line":45,"column":10}},{"start":{"line":45,"column":10},"end":{"line":45,"column":10}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":10},"end":{"line":51,"column":10}},{"start":{"line":51,"column":10},"end":{"line":51,"column":10}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-id-pattern\"","","const messages = ruleMessages(ruleName, {","  expected: selectorValue => `Expected id selector \"#${selectorValue}\" to match specified pattern`,","})","","const rule = function (pattern) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: pattern,","      possible: [","        _.isRegExp,","        _.isString,","      ],","    })","    if (!validOptions) {","      return","    }","","    const normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","","      parseSelector(selector, result, rule, fullSelector => {","        fullSelector.walk(selectorNode => {","          if (selectorNode.type !== \"id\") {","            return","          }","          const value = selectorNode.value,","            sourceIndex = selectorNode.sourceIndex","","          if (normalizedPattern.test(value)) {","            return","          }","","          report({","            result,","            ruleName,","            message: messages.expected(value),","            node: rule,","            index: sourceIndex,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"26":0,"27":0,"30":0,"32":0,"33":0,"34":0,"37":0,"39":0,"40":0,"43":0,"44":0,"45":0,"46":0,"48":0,"51":0,"52":0,"55":0,"68":1,"69":1,"70":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-list-comma-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-list-comma-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":1,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":52}},"8":{"start":{"line":12,"column":0},"end":{"line":16,"column":2}},"9":{"start":{"line":13,"column":23},"end":{"line":13,"column":53}},"10":{"start":{"line":14,"column":32},"end":{"line":14,"column":83}},"11":{"start":{"line":15,"column":32},"end":{"line":15,"column":88}},"12":{"start":{"line":18,"column":0},"end":{"line":71,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":19,"column":69}},"14":{"start":{"line":20,"column":2},"end":{"line":70,"column":3}},"15":{"start":{"line":21,"column":4},"end":{"line":28,"column":6}},"16":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"17":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"18":{"start":{"line":33,"column":4},"end":{"line":69,"column":6}},"19":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"20":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"21":{"start":{"line":40,"column":6},"end":{"line":40,"column":82}},"22":{"start":{"line":41,"column":6},"end":{"line":68,"column":8}},"23":{"start":{"line":46,"column":8},"end":{"line":46,"column":65}},"24":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"25":{"start":{"line":51,"column":10},"end":{"line":51,"column":16}},"26":{"start":{"line":56,"column":8},"end":{"line":56,"column":122}},"27":{"start":{"line":57,"column":8},"end":{"line":67,"column":10}},"28":{"start":{"line":60,"column":20},"end":{"line":66,"column":12}},"29":{"start":{"line":73,"column":0},"end":{"line":73,"column":24}},"30":{"start":{"line":74,"column":0},"end":{"line":74,"column":24}},"31":{"start":{"line":75,"column":0},"end":{"line":75,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"3":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":44},"end":{"line":40,"column":66}},{"start":{"line":40,"column":69},"end":{"line":40,"column":82}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"5":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":61},"end":{"line":56,"column":103}},{"start":{"line":56,"column":106},"end":{"line":56,"column":122}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const styleSearch = require(\"style-search\")","","const ruleName = \"selector-list-comma-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\",\\\"\",","  expectedAfterMultiLine: () => \"Expected newline after \\\",\\\" in a multi-line list\",","  rejectedAfterMultiLine: () => \"Unexpected whitespace after \\\",\\\" in a multi-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      // Get raw selector so we can allow end-of-line comments, e.g.","      // a, /* comment */","      // b {}","      const selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector","      styleSearch({","        source: selector,","        target: \",\",","        functionArguments: \"skip\",","      }, match => {","        const nextThreeChars = selector.substr(match.endIndex, 3)","","        // If there's a // comment, that means there has to be a newline","        // ending the comment so we're fine","        if (nextThreeChars === \" //\") {","          return","        }","","        // If there is a space and then a comment begins, look for the newline","        // after that comment","        const indextoCheckAfter = nextThreeChars === \" /*\" ? selector.indexOf(\"*/\", match.endIndex) + 1 : match.startIndex","        checker.afterOneOnly({","          source: selector,","          index: indextoCheckAfter,","          err: m => report({","            message: m,","            node: rule,","            index: match.startIndex,","            result,","            ruleName,","          }),","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"14":0,"15":0,"18":1,"19":0,"20":0,"21":0,"29":0,"30":0,"33":0,"34":0,"35":0,"40":0,"41":0,"46":0,"50":0,"51":0,"56":0,"57":0,"60":0,"73":1,"74":1,"75":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-list-comma-newline-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-list-comma-newline-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":91}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":53}},"6":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":55}},"8":{"start":{"line":12,"column":33},"end":{"line":12,"column":85}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":90}},"10":{"start":{"line":16,"column":0},"end":{"line":38,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":69}},"12":{"start":{"line":18,"column":2},"end":{"line":37,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":26,"column":6}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":31,"column":4},"end":{"line":36,"column":6}},"17":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":24}},"19":{"start":{"line":42,"column":0},"end":{"line":42,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const selectorListCommaWhitespaceChecker = require(\"../selectorListCommaWhitespaceChecker\")","","const ruleName = \"selector-list-comma-newline-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected newline before \\\",\\\"\",","  expectedBeforeMultiLine: () => \"Expected newline before \\\",\\\" in a multi-line list\",","  rejectedBeforeMultiLine: () => \"Unexpected whitespace before \\\",\\\" in a multi-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    selectorListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.beforeAllowingIndentation,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"16":1,"17":0,"18":0,"19":0,"27":0,"28":0,"31":0,"40":1,"41":1,"42":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selectorListCommaWhitespaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selectorListCommaWhitespaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":33}}},"2":{"name":"checkDelimiter","line":22,"loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":47}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":69}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":41}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"4":{"start":{"line":7,"column":0},"end":{"line":32,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":20,"column":4}},"6":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"7":{"start":{"line":10,"column":6},"end":{"line":10,"column":12}},"8":{"start":{"line":12,"column":4},"end":{"line":12,"column":34}},"9":{"start":{"line":13,"column":4},"end":{"line":19,"column":6}},"10":{"start":{"line":18,"column":6},"end":{"line":18,"column":54}},"11":{"start":{"line":22,"column":2},"end":{"line":31,"column":3}},"12":{"start":{"line":23,"column":4},"end":{"line":30,"column":6}},"13":{"start":{"line":23,"column":52},"end":{"line":29,"column":6}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":9,"column":4}},{"start":{"line":9,"column":4},"end":{"line":9,"column":4}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../utils/isStandardSyntaxRule\")","const report = require(\"../utils/report\")","const styleSearch = require(\"style-search\")","","module.exports = function (opts) {","  opts.root.walkRules(rule => {","    if (!isStandardSyntaxRule(rule)) {","      return","    }","    const selector = rule.selector","    styleSearch({","      source: selector,","      target: \",\",","      functionArguments: \"skip\",","    }, match => {","      checkDelimiter(selector, match.startIndex, rule)","    })","  })","","  function checkDelimiter(source, index, node) {","    opts.locationChecker({ source, index, err: m => report({","      message: m,","      node,","      index,","      result: opts.result,","      ruleName: opts.checkedRuleName,","    }),","    })","  }","}",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"10":0,"12":0,"13":0,"18":0,"22":1,"23":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-list-comma-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-list-comma-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":91}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":58}},"8":{"start":{"line":12,"column":23},"end":{"line":12,"column":58}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":90}},"10":{"start":{"line":14,"column":33},"end":{"line":14,"column":90}},"11":{"start":{"line":17,"column":0},"end":{"line":40,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":33,"column":4},"end":{"line":38,"column":6}},"18":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const selectorListCommaWhitespaceChecker = require(\"../selectorListCommaWhitespaceChecker\")","","const ruleName = \"selector-list-comma-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\",\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\",\\\"\",","  expectedAfterSingleLine: () => \"Expected single space after \\\",\\\" in a single-line list\",","  rejectedAfterSingleLine: () => \"Unexpected whitespace after \\\",\\\" in a single-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    selectorListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"29":0,"30":0,"33":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-list-comma-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-list-comma-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":91}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":60}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":60}},"9":{"start":{"line":13,"column":34},"end":{"line":13,"column":92}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":92}},"11":{"start":{"line":17,"column":0},"end":{"line":40,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":33,"column":4},"end":{"line":38,"column":6}},"18":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const selectorListCommaWhitespaceChecker = require(\"../selectorListCommaWhitespaceChecker\")","","const ruleName = \"selector-list-comma-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\",\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\",\\\"\",","  expectedBeforeSingleLine: () => \"Expected single space before \\\",\\\" in a single-line list\",","  rejectedBeforeSingleLine: () => \"Unexpected whitespace before \\\",\\\" in a single-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    selectorListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"29":0,"30":0,"33":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-max-compound-selectors/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-max-compound-selectors/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":1,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":28}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":23}}},"3":{"name":"checkSelector","line":32,"loc":{"start":{"line":32,"column":4},"end":{"line":32,"column":47}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":73}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":57}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":50}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":31},"end":{"line":14,"column":102}},"11":{"start":{"line":17,"column":0},"end":{"line":81,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":80,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":26,"column":6}},"14":{"start":{"line":23,"column":10},"end":{"line":23,"column":51}},"15":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"17":{"start":{"line":32,"column":4},"end":{"line":56,"column":5}},"18":{"start":{"line":33,"column":6},"end":{"line":33,"column":27}},"19":{"start":{"line":35,"column":6},"end":{"line":45,"column":8}},"20":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"21":{"start":{"line":38,"column":10},"end":{"line":38,"column":40}},"22":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"23":{"start":{"line":43,"column":10},"end":{"line":43,"column":25}},"24":{"start":{"line":47,"column":6},"end":{"line":55,"column":7}},"25":{"start":{"line":48,"column":8},"end":{"line":54,"column":10}},"26":{"start":{"line":58,"column":4},"end":{"line":79,"column":6}},"27":{"start":{"line":59,"column":6},"end":{"line":61,"column":7}},"28":{"start":{"line":60,"column":8},"end":{"line":60,"column":14}},"29":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"30":{"start":{"line":63,"column":8},"end":{"line":63,"column":14}},"31":{"start":{"line":68,"column":6},"end":{"line":70,"column":7}},"32":{"start":{"line":68,"column":34},"end":{"line":68,"column":80}},"33":{"start":{"line":69,"column":8},"end":{"line":69,"column":14}},"34":{"start":{"line":73,"column":6},"end":{"line":78,"column":8}},"35":{"start":{"line":74,"column":8},"end":{"line":77,"column":10}},"36":{"start":{"line":76,"column":10},"end":{"line":76,"column":79}},"37":{"start":{"line":76,"column":30},"end":{"line":76,"column":52}},"38":{"start":{"line":83,"column":0},"end":{"line":83,"column":24}},"39":{"start":{"line":84,"column":0},"end":{"line":84,"column":24}},"40":{"start":{"line":85,"column":0},"end":{"line":85,"column":21}}},"branchMap":{"1":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":17},"end":{"line":23,"column":40}},{"start":{"line":23,"column":44},"end":{"line":23,"column":51}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"4":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":41}},{"start":{"line":37,"column":45},"end":{"line":37,"column":71}}]},"5":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"6":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"7":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":10},"end":{"line":47,"column":38}},{"start":{"line":47,"column":42},"end":{"line":47,"column":72}},{"start":{"line":47,"column":76},"end":{"line":47,"column":95}}]},"8":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"9":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"10":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]},"11":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":34},"end":{"line":68,"column":54}},{"start":{"line":68,"column":58},"end":{"line":68,"column":80}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const resolvedNestedSelector = require(\"postcss-resolve-nested-selector\")","const selectorParser = require(\"postcss-selector-parser\")","","const ruleName = \"selector-max-compound-selectors\"","","const messages = ruleMessages(ruleName, {","  expected: (selector, max) => `Expected \"${selector}\" to have no more than ${max} compound selectors`,","})","","const rule = function (max) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: max,","      possible: [","        function (max) {","          return typeof max === \"number\" && max > 0","        },","      ],","    })","    if (!validOptions) {","      return","    }","","    // Finds actual selectors in selectorNode object and checks them","    function checkSelector(selectorNode, rule) {","      let compoundCount = 1","","      selectorNode.each(childNode => {","        // Only traverse inside actual selectors and :not()","        if (childNode.type === \"selector\" || childNode.value === \":not\") {","          checkSelector(childNode, rule)","        }","","        // Compound selectors are separated by combinators, so increase count when meeting one","        if (childNode.type === \"combinator\") {","          compoundCount++","        }","      })","","      if (selectorNode.type !== \"root\" && selectorNode.type !== \"pseudo\" && compoundCount > max) {","        report({","          ruleName,","          result,","          node: rule,","          message: messages.expected(selectorNode, max),","          word: selectorNode,","        })","      }","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (!isStandardSyntaxSelector(rule.selector)) {","        return","      }","","      // Nested selectors are processed in steps, as nesting levels are resolved.","      // Here we skip processing the intermediate parts of selectors (to process only fully resolved selectors)","      if (rule.nodes.some(node => node.type === \"rule\" || node.type === \"atrule\")) {","        return","      }","","      // Using `rule.selectors` gets us each selector if there is a comma separated set","      rule.selectors.forEach(selector => {","        resolvedNestedSelector(selector, rule).forEach(resolvedSelector => {","          // Process each resolved selector with `checkSelector` via postcss-selector-parser","          selectorParser(s => checkSelector(s, rule)).process(resolvedSelector)","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"23":0,"27":0,"28":0,"32":1,"33":0,"35":0,"37":0,"38":0,"42":0,"43":0,"47":0,"48":0,"58":0,"59":0,"60":0,"62":0,"63":0,"68":0,"69":0,"73":0,"74":0,"76":0,"83":1,"84":1,"85":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-max-empty-lines/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-max-empty-lines/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":19},"end":{"line":12,"column":63}},"9":{"start":{"line":15,"column":0},"end":{"line":51,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":37}},"11":{"start":{"line":18,"column":2},"end":{"line":50,"column":3}},"12":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"13":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"14":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"15":{"start":{"line":27,"column":4},"end":{"line":49,"column":6}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":82}},"17":{"start":{"line":29,"column":6},"end":{"line":29,"column":66}},"18":{"start":{"line":30,"column":6},"end":{"line":30,"column":70}},"19":{"start":{"line":32,"column":6},"end":{"line":48,"column":8}},"20":{"start":{"line":33,"column":8},"end":{"line":47,"column":9}},"21":{"start":{"line":35,"column":10},"end":{"line":35,"column":38}},"22":{"start":{"line":36,"column":10},"end":{"line":38,"column":11}},"23":{"start":{"line":37,"column":12},"end":{"line":37,"column":22}},"24":{"start":{"line":40,"column":10},"end":{"line":46,"column":12}},"25":{"start":{"line":53,"column":0},"end":{"line":53,"column":24}},"26":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}},"27":{"start":{"line":55,"column":0},"end":{"line":55,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":44},"end":{"line":28,"column":66}},{"start":{"line":28,"column":69},"end":{"line":28,"column":82}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"4":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":91}},{"start":{"line":33,"column":95},"end":{"line":33,"column":180}}]},"5":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":10},"end":{"line":36,"column":10}},{"start":{"line":36,"column":10},"end":{"line":36,"column":10}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"selector-max-empty-lines\"","","const messages = ruleMessages(ruleName, {","  expected: max => `Expected no more than ${max} empty line(s)`,","})","","const rule = function (max) {","  const maxAdjacentNewlines = max + 1","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: max,","      possible: _.isNumber,","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      const selector = rule.raws.selector ? rule.raws.selector.raw : rule.selector","      const repeatLFNewLines = _.repeat(\"\\n\", maxAdjacentNewlines)","      const repeatCRLFNewLines = _.repeat(\"\\r\\n\", maxAdjacentNewlines)","","      styleSearch({ source: selector, target: \"\\n\" }, match => {","        if (selector.substr(match.startIndex + 1, maxAdjacentNewlines) === repeatLFNewLines || selector.substr(match.startIndex + 1, maxAdjacentNewlines * 2) === repeatCRLFNewLines) {","          // Put index at `\\r` if it's CRLF, otherwise leave it at `\\n`","          let index = match.startIndex","          if (selector[index - 1] === \"\\r\") {","            index -= 1","          }","","          report({","            message: messages.expected(max),","            node: rule,","            index,","            result,","            ruleName,","          })","        }","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"16":0,"18":0,"19":0,"23":0,"24":0,"27":0,"28":0,"29":0,"30":0,"32":0,"33":0,"35":0,"36":0,"37":0,"40":0,"53":1,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-max-specificity/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-max-specificity/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":28}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":23}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":73}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":43}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":39},"end":{"line":14,"column":115}},"11":{"start":{"line":17,"column":0},"end":{"line":70,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":69,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":28,"column":6}},"14":{"start":{"line":24,"column":10},"end":{"line":24,"column":56}},"15":{"start":{"line":25,"column":10},"end":{"line":25,"column":34}},"16":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"17":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"18":{"start":{"line":33,"column":4},"end":{"line":33,"column":71}},"19":{"start":{"line":34,"column":4},"end":{"line":68,"column":6}},"20":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"21":{"start":{"line":36,"column":8},"end":{"line":36,"column":14}},"22":{"start":{"line":38,"column":6},"end":{"line":40,"column":7}},"23":{"start":{"line":39,"column":8},"end":{"line":39,"column":14}},"24":{"start":{"line":42,"column":6},"end":{"line":67,"column":8}},"25":{"start":{"line":43,"column":8},"end":{"line":66,"column":10}},"26":{"start":{"line":45,"column":10},"end":{"line":47,"column":11}},"27":{"start":{"line":46,"column":12},"end":{"line":46,"column":18}},"28":{"start":{"line":49,"column":10},"end":{"line":51,"column":11}},"29":{"start":{"line":50,"column":12},"end":{"line":50,"column":18}},"30":{"start":{"line":53,"column":10},"end":{"line":65,"column":11}},"31":{"start":{"line":54,"column":12},"end":{"line":62,"column":13}},"32":{"start":{"line":55,"column":14},"end":{"line":61,"column":16}},"33":{"start":{"line":64,"column":12},"end":{"line":64,"column":64}},"34":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}},"35":{"start":{"line":73,"column":0},"end":{"line":73,"column":24}},"36":{"start":{"line":74,"column":0},"end":{"line":74,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":10},"end":{"line":45,"column":10}},{"start":{"line":45,"column":10},"end":{"line":45,"column":10}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":10},"end":{"line":49,"column":10}},{"start":{"line":49,"column":10},"end":{"line":49,"column":10}}]},"6":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":12}},{"start":{"line":54,"column":12},"end":{"line":54,"column":12}}]}},"code":["\"use strict\"","","const specificity = require(\"specificity\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const resolvedNestedSelector = require(\"postcss-resolve-nested-selector\")","","const ruleName = \"selector-max-specificity\"","","const messages = ruleMessages(ruleName, {","  expected: (selector, specificity) => `Expected \"${selector}\" to have a specificity no more than \"${specificity}\"`,","})","","const rule = function (max) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: max,","      possible: [","        function (max) {","        // Check that the max specificity is in the form \"a,b,c\"","          const pattern = new RegExp(\"^\\\\d+,\\\\d+,\\\\d+$\")","          return pattern.test(max)","        },","      ],","    })","    if (!validOptions) {","      return","    }","","    const maxSpecificityArray = (\"0,\" + max).split(\",\").map(parseFloat)","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (!isStandardSyntaxSelector(rule.selector)) {","        return","      }","      // Using rule.selectors gets us each selector in the eventuality we have a comma separated set","      rule.selectors.forEach(selector => {","        resolvedNestedSelector(selector, rule).forEach(resolvedSelector => {","          // Return early if selector contains a not pseudo-class","          if (selector.indexOf(\":not(\") !== -1) {","            return","          }","          // Return early if selector contains a matches","          if (selector.indexOf(\":matches(\") !== -1) {","            return","          }","          // Check if the selector specificity exceeds the allowed maximum","          try {","            if (specificity.compare(resolvedSelector, maxSpecificityArray) === 1) {","              report({","                ruleName,","                result,","                node: rule,","                message: messages.expected(resolvedSelector, max),","                word: selector,","              })","            }","          } catch (e) {","            result.warn(\"Cannot parse selector\", { node: rule })","          }","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"24":0,"25":0,"29":0,"30":0,"33":0,"34":0,"35":0,"36":0,"38":0,"39":0,"42":0,"43":0,"45":0,"46":0,"49":0,"50":0,"53":0,"54":0,"55":0,"64":0,"72":1,"73":1,"74":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-nested-pattern/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-nested-pattern/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":42}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":13,"column":24},"end":{"line":13,"column":91}},"10":{"start":{"line":16,"column":0},"end":{"line":57,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":56,"column":3}},"12":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"14":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"15":{"start":{"line":29,"column":4},"end":{"line":29,"column":81}},"16":{"start":{"line":31,"column":4},"end":{"line":55,"column":6}},"17":{"start":{"line":32,"column":6},"end":{"line":34,"column":7}},"18":{"start":{"line":33,"column":8},"end":{"line":33,"column":14}},"19":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"20":{"start":{"line":36,"column":8},"end":{"line":36,"column":14}},"21":{"start":{"line":39,"column":6},"end":{"line":39,"column":36}},"22":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"23":{"start":{"line":42,"column":8},"end":{"line":42,"column":14}},"24":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"25":{"start":{"line":46,"column":8},"end":{"line":46,"column":14}},"26":{"start":{"line":49,"column":6},"end":{"line":54,"column":8}},"27":{"start":{"line":59,"column":0},"end":{"line":59,"column":24}},"28":{"start":{"line":60,"column":0},"end":{"line":60,"column":24}},"29":{"start":{"line":61,"column":0},"end":{"line":61,"column":21}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":29,"type":"cond-expr","locations":[{"start":{"line":29,"column":52},"end":{"line":29,"column":71}},{"start":{"line":29,"column":74},"end":{"line":29,"column":81}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"4":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"5":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"6":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-nested-pattern\"","","const messages = ruleMessages(ruleName, {","  expected: selector => `Expected nested selector \"${selector}\" to match specified pattern`,","})","","const rule = function (pattern) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: pattern,","      possible: [","        _.isRegExp,","        _.isString,","      ],","    })","    if (!validOptions) {","      return","    }","","    const normalizedPattern = _.isString(pattern) ? new RegExp(pattern) : pattern","","    root.walkRules(rule => {","      if (rule.parent.type !== \"rule\") {","        return","      }","      if (!isStandardSyntaxRule(rule)) {","        return","      }","","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","","      if (normalizedPattern.test(selector)) {","        return","      }","","      report({","        result,","        ruleName,","        message: messages.expected(selector),","        node: rule,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"13":0,"16":1,"17":0,"18":0,"25":0,"26":0,"29":0,"31":0,"32":0,"33":0,"35":0,"36":0,"39":0,"41":0,"42":0,"45":0,"46":0,"49":0,"59":1,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-attribute/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-attribute/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":40}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":16,"column":0},"end":{"line":45,"column":1}},"10":{"start":{"line":17,"column":2},"end":{"line":44,"column":3}},"11":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"12":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"13":{"start":{"line":20,"column":6},"end":{"line":20,"column":12}},"14":{"start":{"line":23,"column":4},"end":{"line":43,"column":6}},"15":{"start":{"line":24,"column":6},"end":{"line":26,"column":7}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":14}},"17":{"start":{"line":27,"column":6},"end":{"line":27,"column":36}},"18":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"19":{"start":{"line":30,"column":8},"end":{"line":30,"column":14}},"20":{"start":{"line":32,"column":6},"end":{"line":42,"column":8}},"21":{"start":{"line":33,"column":8},"end":{"line":41,"column":10}},"22":{"start":{"line":34,"column":10},"end":{"line":40,"column":12}},"23":{"start":{"line":47,"column":0},"end":{"line":47,"column":24}},"24":{"start":{"line":48,"column":0},"end":{"line":48,"column":24}},"25":{"start":{"line":49,"column":0},"end":{"line":49,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":6}},{"start":{"line":24,"column":6},"end":{"line":24,"column":6}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-no-attribute\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected attribute selector\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      parseSelector(selector, result, rule, selectorAST => {","        selectorAST.walkAttributes(attribute => {","          report({","            message: messages.rejected,","            node: rule,","            index: attribute.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"27":0,"29":0,"30":0,"32":0,"33":0,"34":0,"47":1,"48":1,"49":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-combinator/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-combinator/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":41}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":16,"column":0},"end":{"line":45,"column":1}},"10":{"start":{"line":17,"column":2},"end":{"line":44,"column":3}},"11":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"12":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"13":{"start":{"line":20,"column":6},"end":{"line":20,"column":12}},"14":{"start":{"line":23,"column":4},"end":{"line":43,"column":6}},"15":{"start":{"line":24,"column":6},"end":{"line":26,"column":7}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":14}},"17":{"start":{"line":27,"column":6},"end":{"line":27,"column":36}},"18":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"19":{"start":{"line":30,"column":8},"end":{"line":30,"column":14}},"20":{"start":{"line":32,"column":6},"end":{"line":42,"column":8}},"21":{"start":{"line":33,"column":8},"end":{"line":41,"column":10}},"22":{"start":{"line":34,"column":10},"end":{"line":40,"column":12}},"23":{"start":{"line":47,"column":0},"end":{"line":47,"column":24}},"24":{"start":{"line":48,"column":0},"end":{"line":48,"column":24}},"25":{"start":{"line":49,"column":0},"end":{"line":49,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":6}},{"start":{"line":24,"column":6},"end":{"line":24,"column":6}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-no-combinator\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected combinator\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      parseSelector(selector, result, rule, selectorAST => {","        selectorAST.walkCombinators(combinator => {","          report({","            message: messages.rejected,","            node: rule,","            index: combinator.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"27":0,"29":0,"30":0,"32":0,"33":0,"34":0,"47":1,"48":1,"49":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-empty/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-empty/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":1,"21":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":13,"column":0},"end":{"line":47,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":46,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":70}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"10":{"start":{"line":17,"column":6},"end":{"line":17,"column":12}},"11":{"start":{"line":20,"column":4},"end":{"line":25,"column":6}},"12":{"start":{"line":27,"column":4},"end":{"line":45,"column":6}},"13":{"start":{"line":28,"column":6},"end":{"line":28,"column":19}},"14":{"start":{"line":30,"column":6},"end":{"line":44,"column":8}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":32}},"16":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"17":{"start":{"line":34,"column":10},"end":{"line":34,"column":16}},"18":{"start":{"line":37,"column":8},"end":{"line":43,"column":10}},"19":{"start":{"line":49,"column":0},"end":{"line":49,"column":24}},"20":{"start":{"line":50,"column":0},"end":{"line":50,"column":24}},"21":{"start":{"line":51,"column":0},"end":{"line":51,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-no-empty\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected empty selector\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    result.warn((","      \"'selector-no-empty' has been deprecated and in 8.0 will be removed.\"","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: \"https://stylelint.io/user-guide/rules/selector-no-empty/\",","    })","","    root.walkRules(rule => {","      let index = 0","","      rule.selector.split(\",\").forEach(item => {","        index += item.length + 1","","        if (item.trim() !== \"\") {","          return","        }","","        report({","          message: messages.rejected,","          node: rule,","          index: index - 1,","          ruleName,","          result,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"13":1,"14":0,"15":0,"16":0,"17":0,"20":0,"27":0,"28":0,"30":0,"31":0,"33":0,"34":0,"37":0,"49":1,"50":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-id/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-id/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":1,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":17,"column":0},"end":{"line":53,"column":1}},"11":{"start":{"line":18,"column":2},"end":{"line":52,"column":3}},"12":{"start":{"line":19,"column":4},"end":{"line":19,"column":70}},"13":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"14":{"start":{"line":21,"column":6},"end":{"line":21,"column":12}},"15":{"start":{"line":24,"column":4},"end":{"line":51,"column":6}},"16":{"start":{"line":25,"column":6},"end":{"line":27,"column":7}},"17":{"start":{"line":26,"column":8},"end":{"line":26,"column":14}},"18":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"19":{"start":{"line":29,"column":8},"end":{"line":29,"column":14}},"20":{"start":{"line":31,"column":6},"end":{"line":31,"column":36}},"21":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"22":{"start":{"line":34,"column":8},"end":{"line":34,"column":14}},"23":{"start":{"line":36,"column":6},"end":{"line":50,"column":8}},"24":{"start":{"line":37,"column":8},"end":{"line":49,"column":10}},"25":{"start":{"line":38,"column":10},"end":{"line":40,"column":11}},"26":{"start":{"line":39,"column":12},"end":{"line":39,"column":18}},"27":{"start":{"line":42,"column":10},"end":{"line":48,"column":12}},"28":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"29":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"30":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":6},"end":{"line":25,"column":6}},{"start":{"line":25,"column":6},"end":{"line":25,"column":6}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"4":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"5":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":10},"end":{"line":38,"column":10}},{"start":{"line":38,"column":10},"end":{"line":38,"column":10}}]}},"code":["\"use strict\"","","const isKeyframeRule = require(\"../../utils/isKeyframeRule\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-no-id\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected id selector\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (isKeyframeRule(rule)) {","        return","      }","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      parseSelector(selector, result, rule, selectorAST => {","        selectorAST.walkIds(idNode => {","          if (idNode.parent.parent.type === \"pseudo\") {","            return","          }","","          report({","            message: messages.rejected,","            node: rule,","            index: idNode.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"17":1,"18":0,"19":0,"20":0,"21":0,"24":0,"25":0,"26":0,"28":0,"29":0,"31":0,"33":0,"34":0,"36":0,"37":0,"38":0,"39":0,"42":0,"55":1,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-qualifying-type/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-qualifying-type/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":1,"61":1,"62":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"isSelectorCharacters","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":37}}},"2":{"name":"getRightNodes","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":29}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":13},"end":{"line":47,"column":41}}},"4":{"name":"checkSelector","line":85,"loc":{"start":{"line":85,"column":6},"end":{"line":85,"column":42}}},"5":{"name":"complain","line":120,"loc":{"start":{"line":120,"column":6},"end":{"line":120,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":73}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":46}},"11":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"12":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"13":{"start":{"line":25,"column":0},"end":{"line":27,"column":1}},"14":{"start":{"line":26,"column":2},"end":{"line":26,"column":68}},"15":{"start":{"line":26,"column":41},"end":{"line":26,"column":67}},"16":{"start":{"line":29,"column":0},"end":{"line":45,"column":1}},"17":{"start":{"line":30,"column":2},"end":{"line":30,"column":19}},"18":{"start":{"line":31,"column":2},"end":{"line":31,"column":22}},"19":{"start":{"line":33,"column":2},"end":{"line":42,"column":3}},"20":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"21":{"start":{"line":35,"column":6},"end":{"line":35,"column":11}},"22":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"23":{"start":{"line":38,"column":6},"end":{"line":38,"column":14}},"24":{"start":{"line":41,"column":4},"end":{"line":41,"column":26}},"25":{"start":{"line":44,"column":2},"end":{"line":44,"column":15}},"26":{"start":{"line":47,"column":0},"end":{"line":131,"column":1}},"27":{"start":{"line":48,"column":2},"end":{"line":130,"column":3}},"28":{"start":{"line":49,"column":4},"end":{"line":65,"column":6}},"29":{"start":{"line":66,"column":4},"end":{"line":68,"column":5}},"30":{"start":{"line":67,"column":6},"end":{"line":67,"column":12}},"31":{"start":{"line":70,"column":4},"end":{"line":129,"column":6}},"32":{"start":{"line":71,"column":6},"end":{"line":73,"column":7}},"33":{"start":{"line":72,"column":8},"end":{"line":72,"column":14}},"34":{"start":{"line":74,"column":6},"end":{"line":76,"column":7}},"35":{"start":{"line":75,"column":8},"end":{"line":75,"column":14}},"36":{"start":{"line":78,"column":6},"end":{"line":80,"column":7}},"37":{"start":{"line":79,"column":8},"end":{"line":79,"column":14}},"38":{"start":{"line":81,"column":6},"end":{"line":83,"column":7}},"39":{"start":{"line":82,"column":8},"end":{"line":82,"column":14}},"40":{"start":{"line":85,"column":6},"end":{"line":110,"column":7}},"41":{"start":{"line":86,"column":8},"end":{"line":109,"column":10}},"42":{"start":{"line":87,"column":10},"end":{"line":87,"column":48}},"43":{"start":{"line":89,"column":10},"end":{"line":91,"column":11}},"44":{"start":{"line":90,"column":12},"end":{"line":90,"column":18}},"45":{"start":{"line":93,"column":10},"end":{"line":93,"column":55}},"46":{"start":{"line":94,"column":10},"end":{"line":94,"column":44}},"47":{"start":{"line":96,"column":10},"end":{"line":108,"column":12}},"48":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"49":{"start":{"line":98,"column":14},"end":{"line":98,"column":29}},"50":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"51":{"start":{"line":102,"column":14},"end":{"line":102,"column":29}},"52":{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},"53":{"start":{"line":106,"column":14},"end":{"line":106,"column":29}},"54":{"start":{"line":112,"column":6},"end":{"line":118,"column":8}},"55":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"56":{"start":{"line":114,"column":10},"end":{"line":114,"column":16}},"57":{"start":{"line":117,"column":8},"end":{"line":117,"column":68}},"58":{"start":{"line":120,"column":6},"end":{"line":128,"column":7}},"59":{"start":{"line":121,"column":8},"end":{"line":127,"column":10}},"60":{"start":{"line":133,"column":0},"end":{"line":133,"column":24}},"61":{"start":{"line":134,"column":0},"end":{"line":134,"column":24}},"62":{"start":{"line":135,"column":0},"end":{"line":135,"column":21}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"3":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":31}},{"start":{"line":37,"column":35},"end":{"line":37,"column":61}},{"start":{"line":37,"column":65},"end":{"line":37,"column":95}}]},"4":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":6}},{"start":{"line":71,"column":6},"end":{"line":71,"column":6}}]},"6":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":6},"end":{"line":74,"column":6}},{"start":{"line":74,"column":6},"end":{"line":74,"column":6}}]},"7":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":78,"column":6}},{"start":{"line":78,"column":6},"end":{"line":78,"column":6}}]},"8":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"9":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":10},"end":{"line":89,"column":10}},{"start":{"line":89,"column":10},"end":{"line":89,"column":10}}]},"10":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":97,"column":12}},{"start":{"line":97,"column":12},"end":{"line":97,"column":12}}]},"11":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":16},"end":{"line":97,"column":42}},{"start":{"line":97,"column":46},"end":{"line":97,"column":86}}]},"12":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":101,"column":12}},{"start":{"line":101,"column":12},"end":{"line":101,"column":12}}]},"13":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":16},"end":{"line":101,"column":45}},{"start":{"line":101,"column":49},"end":{"line":101,"column":92}}]},"14":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":12}},{"start":{"line":105,"column":12},"end":{"line":105,"column":12}}]},"15":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":16},"end":{"line":105,"column":49}},{"start":{"line":105,"column":53},"end":{"line":105,"column":100}}]},"16":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":8}},{"start":{"line":113,"column":8},"end":{"line":113,"column":8}}]}},"code":["\"use strict\"","","const isKeyframeRule = require(\"../../utils/isKeyframeRule\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const resolvedNestedSelector = require(\"postcss-resolve-nested-selector\")","","const ruleName = \"selector-no-qualifying-type\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected qualifying type selector\",","})","","const selectorCharacters = [","  \"#\",","  \".\",","  \"[\",","]","","function isSelectorCharacters(value) {","  return selectorCharacters.some(char => value.indexOf(char) !== -1)","}","","function getRightNodes(node) {","  const result = []","  let rightNode = node","","  while ((rightNode = rightNode.next())) {","    if (rightNode.type === \"combinator\") {","      break","    }","    if (rightNode.type !== \"id\" && rightNode.type !== \"class\" && rightNode.type !== \"attribute\") {","      continue","    }","","    result.push(rightNode)","  }","","  return result","}","","const rule = function (enabled, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: enabled,","      possible: [","        true,","        false,","      ],","    }, {","      actual: options,","      possible: {","        ignore: [","          \"attribute\",","          \"class\",","          \"id\",","        ],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (isKeyframeRule(rule)) {","        return","      }","      // Increasing performance","      if (!isStandardSyntaxSelector(rule.selector)) {","        return","      }","      if (!isSelectorCharacters(rule.selector)) {","        return","      }","","      function checkSelector(selectorAST) {","        selectorAST.walkTags(selector => {","          const selectorParent = selector.parent","","          if (selectorParent.nodes.length === 1) {","            return","          }","","          const selectorNodes = getRightNodes(selector)","          const index = selector.sourceIndex","","          selectorNodes.forEach(selectorNode => {","            if (selectorNode.type === \"id\" && !optionsMatches(options, \"ignore\", \"id\")) {","              complain(index)","            }","","            if (selectorNode.type === \"class\" && !optionsMatches(options, \"ignore\", \"class\")) {","              complain(index)","            }","","            if (selectorNode.type === \"attribute\" && !optionsMatches(options, \"ignore\", \"attribute\")) {","              complain(index)","            }","          })","        })","      }","","      resolvedNestedSelector(rule.selector, rule).forEach(resolvedSelector => {","        if (!isStandardSyntaxSelector(resolvedSelector)) {","          return","        }","","        parseSelector(resolvedSelector, result, rule, checkSelector)","      })","","      function complain(index) {","        report({","          ruleName,","          result,","          node: rule,","          message: messages.rejected,","          index,","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"19":1,"25":1,"26":0,"29":1,"30":0,"31":0,"33":0,"34":0,"35":0,"37":0,"38":0,"41":0,"44":0,"47":1,"48":0,"49":0,"66":0,"67":0,"70":0,"71":0,"72":0,"74":0,"75":0,"78":0,"79":0,"81":0,"82":0,"85":1,"86":0,"87":0,"89":0,"90":0,"93":0,"94":0,"96":0,"97":0,"98":0,"101":0,"102":0,"105":0,"106":0,"112":0,"113":0,"114":0,"117":0,"120":1,"121":0,"133":1,"134":1,"135":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-type/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-type/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":1,"60":1,"61":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":13},"end":{"line":21,"column":36}}},"2":{"name":"checkSelector","line":67,"loc":{"start":{"line":67,"column":4},"end":{"line":67,"column":43}}},"3":{"name":"hasCombinatorBefore","line":99,"loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":35}}},"4":{"name":"isCompounded","line":103,"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":28}}},"5":{"name":"isCombinator","line":113,"loc":{"start":{"line":113,"column":0},"end":{"line":113,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":68}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":72}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":80}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":88}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":60}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":58}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":44}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":56}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":72}},"12":{"start":{"line":15,"column":0},"end":{"line":15,"column":35}},"13":{"start":{"line":17,"column":0},"end":{"line":19,"column":2}},"14":{"start":{"line":21,"column":0},"end":{"line":97,"column":1}},"15":{"start":{"line":22,"column":2},"end":{"line":96,"column":3}},"16":{"start":{"line":23,"column":4},"end":{"line":33,"column":6}},"17":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"18":{"start":{"line":35,"column":6},"end":{"line":35,"column":12}},"19":{"start":{"line":38,"column":4},"end":{"line":38,"column":76}},"20":{"start":{"line":39,"column":4},"end":{"line":39,"column":76}},"21":{"start":{"line":41,"column":4},"end":{"line":65,"column":6}},"22":{"start":{"line":42,"column":6},"end":{"line":43,"column":34}},"23":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"24":{"start":{"line":46,"column":8},"end":{"line":46,"column":14}},"25":{"start":{"line":48,"column":6},"end":{"line":50,"column":7}},"26":{"start":{"line":49,"column":8},"end":{"line":49,"column":14}},"27":{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},"28":{"start":{"line":51,"column":30},"end":{"line":51,"column":51}},"29":{"start":{"line":52,"column":8},"end":{"line":52,"column":14}},"30":{"start":{"line":55,"column":6},"end":{"line":64,"column":7}},"31":{"start":{"line":57,"column":8},"end":{"line":61,"column":10}},"32":{"start":{"line":58,"column":10},"end":{"line":60,"column":12}},"33":{"start":{"line":59,"column":12},"end":{"line":59,"column":41}},"34":{"start":{"line":63,"column":8},"end":{"line":63,"column":37}},"35":{"start":{"line":67,"column":4},"end":{"line":95,"column":5}},"36":{"start":{"line":68,"column":6},"end":{"line":94,"column":8}},"37":{"start":{"line":69,"column":8},"end":{"line":93,"column":10}},"38":{"start":{"line":70,"column":10},"end":{"line":72,"column":11}},"39":{"start":{"line":71,"column":12},"end":{"line":71,"column":18}},"40":{"start":{"line":74,"column":10},"end":{"line":76,"column":11}},"41":{"start":{"line":75,"column":12},"end":{"line":75,"column":18}},"42":{"start":{"line":78,"column":10},"end":{"line":80,"column":11}},"43":{"start":{"line":79,"column":12},"end":{"line":79,"column":18}},"44":{"start":{"line":82,"column":10},"end":{"line":84,"column":11}},"45":{"start":{"line":83,"column":12},"end":{"line":83,"column":18}},"46":{"start":{"line":86,"column":10},"end":{"line":92,"column":12}},"47":{"start":{"line":99,"column":0},"end":{"line":101,"column":1}},"48":{"start":{"line":100,"column":2},"end":{"line":100,"column":87}},"49":{"start":{"line":103,"column":0},"end":{"line":111,"column":1}},"50":{"start":{"line":104,"column":2},"end":{"line":106,"column":3}},"51":{"start":{"line":105,"column":4},"end":{"line":105,"column":15}},"52":{"start":{"line":107,"column":2},"end":{"line":109,"column":3}},"53":{"start":{"line":108,"column":4},"end":{"line":108,"column":15}},"54":{"start":{"line":110,"column":2},"end":{"line":110,"column":14}},"55":{"start":{"line":113,"column":0},"end":{"line":116,"column":1}},"56":{"start":{"line":114,"column":2},"end":{"line":114,"column":25}},"57":{"start":{"line":114,"column":13},"end":{"line":114,"column":25}},"58":{"start":{"line":115,"column":2},"end":{"line":115,"column":45}},"59":{"start":{"line":118,"column":0},"end":{"line":118,"column":24}},"60":{"start":{"line":119,"column":0},"end":{"line":119,"column":24}},"61":{"start":{"line":120,"column":0},"end":{"line":120,"column":21}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]},"3":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":6}},{"start":{"line":48,"column":6},"end":{"line":48,"column":6}}]},"4":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"6":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":10},"end":{"line":70,"column":10}},{"start":{"line":70,"column":10},"end":{"line":70,"column":10}}]},"7":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":10},"end":{"line":74,"column":10}},{"start":{"line":74,"column":10},"end":{"line":74,"column":10}}]},"8":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":10},"end":{"line":78,"column":10}},{"start":{"line":78,"column":10},"end":{"line":78,"column":10}}]},"9":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":14},"end":{"line":78,"column":30}},{"start":{"line":78,"column":34},"end":{"line":78,"column":58}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":10},"end":{"line":82,"column":10}},{"start":{"line":82,"column":10},"end":{"line":82,"column":10}}]},"11":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":14},"end":{"line":82,"column":30}},{"start":{"line":82,"column":34},"end":{"line":82,"column":51}}]},"12":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":2},"end":{"line":104,"column":2}},{"start":{"line":104,"column":2},"end":{"line":104,"column":2}}]},"13":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":17}},{"start":{"line":104,"column":21},"end":{"line":104,"column":47}}]},"14":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":2},"end":{"line":107,"column":2}},{"start":{"line":107,"column":2},"end":{"line":107,"column":2}}]},"15":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":6},"end":{"line":107,"column":17}},{"start":{"line":107,"column":21},"end":{"line":107,"column":47}}]},"16":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":2},"end":{"line":114,"column":2}},{"start":{"line":114,"column":2},"end":{"line":114,"column":2}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const isKeyframeSelector = require(\"../../utils/isKeyframeSelector\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const isStandardSyntaxTypeSelector = require(\"../../utils/isStandardSyntaxTypeSelector\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const resolveNestedSelector = require(\"postcss-resolve-nested-selector\")","","const ruleName = \"selector-no-type\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected type selector\",","})","","const rule = function (on, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual: on }, {","      actual: options,","      possible: {","        ignore: [","          \"descendant\",","          \"compounded\",","        ],","        ignoreTypes: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    const ignoreDescendant = optionsMatches(options, \"ignore\", \"descendant\")","    const ignoreCompounded = optionsMatches(options, \"ignore\", \"compounded\")","","    root.walkRules(rule => {","      const selector = rule.selector,","        selectors = rule.selectors","","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      if (selectors.some(s => isKeyframeSelector(s))) {","        return","      }","","      if (ignoreDescendant) {","        // Resolve each selector within the list before checking","        selectors.forEach(selector => {","          resolveNestedSelector(selector, rule).forEach(selector => {","            checkSelector(selector, rule)","          })","        })","      } else {","        checkSelector(selector, rule)","      }","    })","","    function checkSelector(selector, rule) {","      parseSelector(selector, result, rule, selectorAST => {","        selectorAST.walkTags(tag => {","          if (!isStandardSyntaxTypeSelector(tag)) {","            return","          }","","          if (optionsMatches(options, \"ignoreTypes\", tag.value)) {","            return","          }","","          if (ignoreDescendant && hasCombinatorBefore(tag)) {","            return","          }","","          if (ignoreCompounded && isCompounded(tag)) {","            return","          }","","          report({","            message: messages.rejected,","            node: rule,","            index: tag.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    }","  }","}","","function hasCombinatorBefore(node) {","  return node.parent.nodes.slice(0, node.parent.nodes.indexOf(node)).some(isCombinator)","}","","function isCompounded(node) {","  if (node.prev() && !isCombinator(node.prev())) {","    return true","  }","  if (node.next() && !isCombinator(node.next())) {","    return true","  }","  return false","}","","function isCombinator(node) {","  if (!node) return false","  return _.get(node, \"type\") === \"combinator\"","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"15":1,"17":1,"21":1,"22":0,"23":0,"34":0,"35":0,"38":0,"39":0,"41":0,"42":0,"45":0,"46":0,"48":0,"49":0,"51":0,"52":0,"55":0,"57":0,"58":0,"59":0,"63":0,"67":1,"68":0,"69":0,"70":0,"71":0,"74":0,"75":0,"78":0,"79":0,"82":0,"83":0,"86":0,"99":1,"100":0,"103":1,"104":0,"105":0,"107":0,"108":0,"110":0,"113":1,"114":0,"115":0,"118":1,"119":1,"120":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxTypeSelector.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isStandardSyntaxTypeSelector.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":17},"end":{"line":13,"column":58}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":11,"column":55}},"2":{"start":{"line":13,"column":0},"end":{"line":39,"column":1}},"3":{"start":{"line":18,"column":2},"end":{"line":18,"column":48}},"4":{"start":{"line":19,"column":2},"end":{"line":20,"column":43}},"5":{"start":{"line":22,"column":2},"end":{"line":27,"column":3}},"6":{"start":{"line":23,"column":4},"end":{"line":23,"column":76}},"7":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"8":{"start":{"line":25,"column":6},"end":{"line":25,"column":18}},"9":{"start":{"line":30,"column":2},"end":{"line":32,"column":3}},"10":{"start":{"line":31,"column":4},"end":{"line":31,"column":16}},"11":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"12":{"start":{"line":35,"column":4},"end":{"line":35,"column":16}},"13":{"start":{"line":38,"column":2},"end":{"line":38,"column":13}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"3":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":31}},{"start":{"line":24,"column":36},"end":{"line":24,"column":102}},{"start":{"line":24,"column":106},"end":{"line":24,"column":167}}]},"4":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"5":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":17}},{"start":{"line":30,"column":21},"end":{"line":30,"column":51}}]},"6":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a type selector is standard"," *"," * @param {Node} postcss-selector-parser node (of type tag)"," * @return {boolean} If `true`, the type selector is standard"," */","","const keywordSets = require(\"../reference/keywordSets\")","","module.exports = function (node/*: Object*/)/*: boolean*/ {","  // postcss-selector-parser includes the arguments to nth-child() functions","  // as \"tags\", so we need to ignore them ourselves.","  // The fake-tag's \"parent\" is actually a selector node, whose parent","  // should be the :nth-child pseudo node.","  const _node$parent$parent = node.parent.parent","  const parentType = _node$parent$parent.type,","    parentValue = _node$parent$parent.value","","  if (parentValue) {","    const normalisedParentName = parentValue.toLowerCase().replace(/:+/, \"\")","    if (parentType === \"pseudo\" && (keywordSets.aNPlusBNotationPseudoClasses.has(normalisedParentName) || keywordSets.linguisticPseudoClasses.has(normalisedParentName))) {","      return false","    }","  }","","  // &-bar is a nesting selector combined with a suffix","  if (node.prev() && node.prev().type === \"nesting\") {","    return false","  }","","  if (node.value[0] === \"%\") {","    return false","  }","","  return true","}",""],"l":{"11":1,"13":1,"18":0,"19":0,"22":0,"23":0,"24":0,"25":0,"30":0,"31":0,"34":0,"35":0,"38":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-universal/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-universal/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":40}},"8":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"9":{"start":{"line":16,"column":0},"end":{"line":45,"column":1}},"10":{"start":{"line":17,"column":2},"end":{"line":44,"column":3}},"11":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"12":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"13":{"start":{"line":20,"column":6},"end":{"line":20,"column":12}},"14":{"start":{"line":23,"column":4},"end":{"line":43,"column":6}},"15":{"start":{"line":24,"column":6},"end":{"line":26,"column":7}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":14}},"17":{"start":{"line":27,"column":6},"end":{"line":27,"column":36}},"18":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"19":{"start":{"line":30,"column":8},"end":{"line":30,"column":14}},"20":{"start":{"line":32,"column":6},"end":{"line":42,"column":8}},"21":{"start":{"line":33,"column":8},"end":{"line":41,"column":10}},"22":{"start":{"line":34,"column":10},"end":{"line":40,"column":12}},"23":{"start":{"line":47,"column":0},"end":{"line":47,"column":24}},"24":{"start":{"line":48,"column":0},"end":{"line":48,"column":24}},"25":{"start":{"line":49,"column":0},"end":{"line":49,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":6}},{"start":{"line":24,"column":6},"end":{"line":24,"column":6}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-no-universal\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected universal selector\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      parseSelector(selector, result, rule, selectorAST => {","        selectorAST.walkUniversals(universal => {","          report({","            message: messages.rejected,","            node: rule,","            index: universal.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"12":1,"16":1,"17":0,"18":0,"19":0,"20":0,"23":0,"24":0,"25":0,"27":0,"29":0,"30":0,"32":0,"33":0,"34":0,"47":1,"48":1,"49":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-vendor-prefix/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-no-vendor-prefix/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":44}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":24},"end":{"line":14,"column":64}},"11":{"start":{"line":17,"column":0},"end":{"line":48,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":47,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":19,"column":70}},"14":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"15":{"start":{"line":21,"column":6},"end":{"line":21,"column":12}},"16":{"start":{"line":24,"column":4},"end":{"line":46,"column":6}},"17":{"start":{"line":25,"column":6},"end":{"line":27,"column":7}},"18":{"start":{"line":26,"column":8},"end":{"line":26,"column":14}},"19":{"start":{"line":28,"column":6},"end":{"line":28,"column":36}},"20":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"21":{"start":{"line":31,"column":8},"end":{"line":31,"column":14}},"22":{"start":{"line":33,"column":6},"end":{"line":45,"column":8}},"23":{"start":{"line":34,"column":8},"end":{"line":44,"column":10}},"24":{"start":{"line":35,"column":10},"end":{"line":43,"column":11}},"25":{"start":{"line":36,"column":12},"end":{"line":42,"column":14}},"26":{"start":{"line":50,"column":0},"end":{"line":50,"column":24}},"27":{"start":{"line":51,"column":0},"end":{"line":51,"column":24}},"28":{"start":{"line":52,"column":0},"end":{"line":52,"column":21}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":6},"end":{"line":25,"column":6}},{"start":{"line":25,"column":6},"end":{"line":25,"column":6}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"4":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":10},"end":{"line":35,"column":10}},{"start":{"line":35,"column":10},"end":{"line":35,"column":10}}]},"5":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":22},"end":{"line":41,"column":38}},{"start":{"line":41,"column":42},"end":{"line":41,"column":44}}]}},"code":["\"use strict\"","","const isAutoprefixable = require(\"../../utils/isAutoprefixable\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-no-vendor-prefix\"","","const messages = ruleMessages(ruleName, {","  rejected: selector => `Unexpected vendor-prefix \"${selector}\"`,","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      parseSelector(selector, result, rule, selectorTree => {","        selectorTree.walkPseudos(pseudoNode => {","          if (isAutoprefixable.selector(pseudoNode.value)) {","            report({","              result,","              ruleName,","              message: messages.rejected(pseudoNode.value),","              node: rule,","              index: (rule.raws.before || \"\").length + pseudoNode.sourceIndex,","            })","          }","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"20":0,"21":0,"24":0,"25":0,"26":0,"28":0,"30":0,"31":0,"33":0,"34":0,"35":0,"36":0,"50":1,"51":1,"52":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":1,"34":1,"35":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":80}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":50}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":24},"end":{"line":15,"column":63}},"12":{"start":{"line":18,"column":0},"end":{"line":65,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":64,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":23,"column":6}},"15":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"16":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"17":{"start":{"line":28,"column":4},"end":{"line":63,"column":6}},"18":{"start":{"line":29,"column":6},"end":{"line":29,"column":36}},"19":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"21":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"22":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"23":{"start":{"line":38,"column":6},"end":{"line":62,"column":8}},"24":{"start":{"line":39,"column":8},"end":{"line":61,"column":10}},"25":{"start":{"line":40,"column":10},"end":{"line":40,"column":40}},"26":{"start":{"line":44,"column":10},"end":{"line":46,"column":11}},"27":{"start":{"line":45,"column":12},"end":{"line":45,"column":18}},"28":{"start":{"line":48,"column":10},"end":{"line":48,"column":37}},"29":{"start":{"line":50,"column":10},"end":{"line":52,"column":11}},"30":{"start":{"line":51,"column":12},"end":{"line":51,"column":18}},"31":{"start":{"line":54,"column":10},"end":{"line":60,"column":12}},"32":{"start":{"line":67,"column":0},"end":{"line":67,"column":30}},"33":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"34":{"start":{"line":70,"column":0},"end":{"line":70,"column":24}},"35":{"start":{"line":71,"column":0},"end":{"line":71,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":10},"end":{"line":44,"column":10}},{"start":{"line":44,"column":10},"end":{"line":44,"column":10}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":10},"end":{"line":50,"column":10}},{"start":{"line":50,"column":10},"end":{"line":50,"column":10}}]}},"code":["\"use strict\"","","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","","const ruleName = \"selector-pseudo-class-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: selector => `Unexpected pseudo-class \"${selector}\"`,","})","","const rule = function (blacklist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      if (selector.indexOf(\":\") === -1) {","        return","      }","","      parseSelector(selector, result, rule, selectorTree => {","        selectorTree.walkPseudos(pseudoNode => {","          const value = pseudoNode.value","","          // Ignore pseudo-elements","","          if (value.slice(0, 2) === \"::\") {","            return","          }","","          const name = value.slice(1)","","          if (!matchesStringOrRegExp(postcss.vendor.unprefixed(name).toLowerCase(), blacklist)) {","            return","          }","","          report({","            index: pseudoNode.sourceIndex,","            message: messages.rejected(name),","            node: rule,","            result,","            ruleName,","          })","        })","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"24":0,"25":0,"28":0,"29":0,"31":0,"32":0,"34":0,"35":0,"38":0,"39":0,"40":0,"44":0,"45":0,"48":0,"50":0,"51":0,"54":0,"67":1,"69":1,"70":1,"71":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":58}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":76}},"11":{"start":{"line":17,"column":0},"end":{"line":70,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":69,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"14":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"15":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"16":{"start":{"line":30,"column":4},"end":{"line":68,"column":6}},"17":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"19":{"start":{"line":34,"column":6},"end":{"line":34,"column":36}},"20":{"start":{"line":35,"column":6},"end":{"line":35,"column":52}},"21":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"22":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"23":{"start":{"line":41,"column":6},"end":{"line":67,"column":8}},"24":{"start":{"line":42,"column":8},"end":{"line":66,"column":10}},"25":{"start":{"line":43,"column":10},"end":{"line":43,"column":41}},"26":{"start":{"line":45,"column":10},"end":{"line":47,"column":11}},"27":{"start":{"line":46,"column":12},"end":{"line":46,"column":18}},"28":{"start":{"line":49,"column":10},"end":{"line":51,"column":11}},"29":{"start":{"line":50,"column":12},"end":{"line":50,"column":18}},"30":{"start":{"line":53,"column":10},"end":{"line":53,"column":102}},"31":{"start":{"line":55,"column":10},"end":{"line":57,"column":11}},"32":{"start":{"line":56,"column":12},"end":{"line":56,"column":18}},"33":{"start":{"line":59,"column":10},"end":{"line":65,"column":12}},"34":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}},"35":{"start":{"line":73,"column":0},"end":{"line":73,"column":24}},"36":{"start":{"line":74,"column":0},"end":{"line":74,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":10},"end":{"line":45,"column":10}},{"start":{"line":45,"column":10},"end":{"line":45,"column":10}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":10},"end":{"line":49,"column":10}},{"start":{"line":49,"column":10},"end":{"line":49,"column":10}}]},"6":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":14},"end":{"line":49,"column":41}},{"start":{"line":49,"column":45},"end":{"line":49,"column":120}}]},"7":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":59},"end":{"line":53,"column":79}},{"start":{"line":53,"column":82},"end":{"line":53,"column":102}}]},"8":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":10},"end":{"line":55,"column":10}},{"start":{"line":55,"column":10},"end":{"line":55,"column":10}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","","const ruleName = \"selector-pseudo-class-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","      const startIndexPseudo = selector.indexOf(\":\")","","      if (startIndexPseudo === -1) {","        return","      }","","      parseSelector(selector, result, rule, selectorTree => {","        selectorTree.walkPseudos(pseudoNode => {","          const pseudo = pseudoNode.value","","          if (!isStandardSyntaxSelector(pseudo)) {","            return","          }","","          if (pseudo.indexOf(\"::\") !== -1 || keywordSets.levelOneAndTwoPseudoElements.has(pseudo.toLowerCase().slice(1))) {","            return","          }","","          const expectedPseudo = expectation === \"lower\" ? pseudo.toLowerCase() : pseudo.toUpperCase()","","          if (pseudo === expectedPseudo) {","            return","          }","","          report({","            message: messages.expected(pseudo, expectedPseudo),","            node: rule,","            index: pseudoNode.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"26":0,"27":0,"30":0,"31":0,"32":0,"34":0,"35":0,"37":0,"38":0,"41":0,"42":0,"43":0,"45":0,"46":0,"49":0,"50":0,"53":0,"55":0,"56":0,"59":0,"72":1,"73":1,"74":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-no-unknown/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":1,"47":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":13},"end":{"line":21,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":64}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":58}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":27}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":34}},"12":{"start":{"line":15,"column":0},"end":{"line":15,"column":51}},"13":{"start":{"line":17,"column":0},"end":{"line":19,"column":2}},"14":{"start":{"line":18,"column":24},"end":{"line":18,"column":80}},"15":{"start":{"line":21,"column":0},"end":{"line":97,"column":1}},"16":{"start":{"line":22,"column":2},"end":{"line":96,"column":3}},"17":{"start":{"line":23,"column":4},"end":{"line":29,"column":6}},"18":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"19":{"start":{"line":31,"column":6},"end":{"line":31,"column":12}},"20":{"start":{"line":34,"column":4},"end":{"line":95,"column":6}},"21":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"22":{"start":{"line":36,"column":8},"end":{"line":36,"column":14}},"23":{"start":{"line":38,"column":6},"end":{"line":38,"column":36}},"24":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"25":{"start":{"line":43,"column":8},"end":{"line":43,"column":14}},"26":{"start":{"line":46,"column":6},"end":{"line":94,"column":8}},"27":{"start":{"line":47,"column":8},"end":{"line":93,"column":10}},"28":{"start":{"line":48,"column":10},"end":{"line":48,"column":40}},"29":{"start":{"line":50,"column":10},"end":{"line":52,"column":11}},"30":{"start":{"line":51,"column":12},"end":{"line":51,"column":18}},"31":{"start":{"line":54,"column":10},"end":{"line":56,"column":11}},"32":{"start":{"line":55,"column":12},"end":{"line":55,"column":18}},"33":{"start":{"line":59,"column":10},"end":{"line":61,"column":11}},"34":{"start":{"line":60,"column":12},"end":{"line":60,"column":18}},"35":{"start":{"line":63,"column":10},"end":{"line":65,"column":11}},"36":{"start":{"line":64,"column":12},"end":{"line":64,"column":18}},"37":{"start":{"line":67,"column":10},"end":{"line":67,"column":37}},"38":{"start":{"line":69,"column":10},"end":{"line":74,"column":11}},"39":{"start":{"line":73,"column":12},"end":{"line":73,"column":18}},"40":{"start":{"line":76,"column":10},"end":{"line":84,"column":11}},"41":{"start":{"line":77,"column":12},"end":{"line":77,"column":113}},"42":{"start":{"line":79,"column":12},"end":{"line":83,"column":13}},"43":{"start":{"line":82,"column":14},"end":{"line":82,"column":20}},"44":{"start":{"line":86,"column":10},"end":{"line":92,"column":12}},"45":{"start":{"line":99,"column":0},"end":{"line":99,"column":24}},"46":{"start":{"line":100,"column":0},"end":{"line":100,"column":24}},"47":{"start":{"line":101,"column":0},"end":{"line":101,"column":21}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":10},"end":{"line":50,"column":10}},{"start":{"line":50,"column":10},"end":{"line":50,"column":10}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":10},"end":{"line":54,"column":10}},{"start":{"line":54,"column":10},"end":{"line":54,"column":10}}]},"6":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":10},"end":{"line":59,"column":10}},{"start":{"line":59,"column":10},"end":{"line":59,"column":10}}]},"7":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":10},"end":{"line":63,"column":10}},{"start":{"line":63,"column":10},"end":{"line":63,"column":10}}]},"8":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":10},"end":{"line":69,"column":10}},{"start":{"line":69,"column":10},"end":{"line":69,"column":10}}]},"9":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":14},"end":{"line":69,"column":41}},{"start":{"line":70,"column":15},"end":{"line":70,"column":64}},{"start":{"line":71,"column":15},"end":{"line":71,"column":65}}]},"10":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":10},"end":{"line":76,"column":10}},{"start":{"line":76,"column":10},"end":{"line":76,"column":10}}]},"11":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":12}},{"start":{"line":79,"column":12},"end":{"line":79,"column":12}}]},"12":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":84}},{"start":{"line":80,"column":17},"end":{"line":80,"column":83}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const isCustomSelector = require(\"../../utils/isCustomSelector\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","","const ruleName = \"selector-pseudo-class-no-unknown\"","","const messages = ruleMessages(ruleName, {","  rejected: selector => `Unexpected unknown pseudo-class selector \"${selector}\"`,","})","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignorePseudoClasses: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","","      // Return early before parse if no pseudos for performance","","      if (selector.indexOf(\":\") === -1) {","        return","      }","","      parseSelector(selector, result, rule, selectorTree => {","        selectorTree.walkPseudos(pseudoNode => {","          const value = pseudoNode.value","","          if (!isStandardSyntaxSelector(value)) {","            return","          }","","          if (isCustomSelector(value)) {","            return","          }","","          // Ignore pseudo-elements","          if (value.slice(0, 2) === \"::\") {","            return","          }","","          if (optionsMatches(options, \"ignorePseudoClasses\", pseudoNode.value.slice(1))) {","            return","          }","","          const name = value.slice(1)","","          if (postcss.vendor.prefix(name)","            || keywordSets.pseudoClasses.has(name.toLowerCase())","            || keywordSets.pseudoElements.has(name.toLowerCase())","          ) {","            return","          }","","          if (pseudoNode.prev()) {","            const prevPseudoNodeValue = postcss.vendor.unprefixed(pseudoNode.prev().value.toLowerCase().slice(2))","","            if (keywordSets.webkitProprietaryPseudoElements.has(prevPseudoNodeValue)","              && keywordSets.webkitProprietaryPseudoClasses.has(name.toLowerCase())","            ) {","              return","            }","          }","","          report({","            message: messages.rejected(value),","            node: rule,","            index: pseudoNode.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"15":1,"17":1,"18":0,"21":1,"22":0,"23":0,"30":0,"31":0,"34":0,"35":0,"36":0,"38":0,"42":0,"43":0,"46":0,"47":0,"48":0,"50":0,"51":0,"54":0,"55":0,"59":0,"60":0,"63":0,"64":0,"67":0,"69":0,"73":0,"76":0,"77":0,"79":0,"82":0,"86":0,"99":1,"100":1,"101":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCustomSelector.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCustomSelector.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":62}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":9,"column":1}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":41}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","/**"," * Check whether a selector is a custom one"," */","module.exports = function (selector/*: string*/)/*: boolean*/ {","  return (selector.slice(0, 3) === \":--\")","}",""],"l":{"7":1,"8":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-parentheses-space-inside/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-parentheses-space-inside/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":1,"42":1,"43":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":36}}},"2":{"name":"complain","line":73,"loc":{"start":{"line":73,"column":6},"end":{"line":73,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":65}},"9":{"start":{"line":13,"column":0},"end":{"line":18,"column":2}},"10":{"start":{"line":20,"column":0},"end":{"line":84,"column":1}},"11":{"start":{"line":21,"column":2},"end":{"line":83,"column":3}},"12":{"start":{"line":22,"column":4},"end":{"line":28,"column":6}},"13":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"14":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"15":{"start":{"line":33,"column":4},"end":{"line":82,"column":6}},"16":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"17":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"18":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"19":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"20":{"start":{"line":41,"column":6},"end":{"line":71,"column":8}},"21":{"start":{"line":42,"column":8},"end":{"line":70,"column":10}},"22":{"start":{"line":43,"column":10},"end":{"line":45,"column":11}},"23":{"start":{"line":44,"column":12},"end":{"line":44,"column":18}},"24":{"start":{"line":47,"column":10},"end":{"line":47,"column":60}},"25":{"start":{"line":49,"column":10},"end":{"line":58,"column":12}},"26":{"start":{"line":50,"column":12},"end":{"line":50,"column":86}},"27":{"start":{"line":51,"column":12},"end":{"line":51,"column":71}},"28":{"start":{"line":52,"column":12},"end":{"line":54,"column":13}},"29":{"start":{"line":53,"column":14},"end":{"line":53,"column":55}},"30":{"start":{"line":55,"column":12},"end":{"line":57,"column":13}},"31":{"start":{"line":56,"column":14},"end":{"line":56,"column":55}},"32":{"start":{"line":60,"column":10},"end":{"line":69,"column":12}},"33":{"start":{"line":61,"column":12},"end":{"line":61,"column":86}},"34":{"start":{"line":62,"column":12},"end":{"line":62,"column":71}},"35":{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},"36":{"start":{"line":64,"column":14},"end":{"line":64,"column":55}},"37":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"38":{"start":{"line":67,"column":14},"end":{"line":67,"column":55}},"39":{"start":{"line":73,"column":6},"end":{"line":81,"column":7}},"40":{"start":{"line":74,"column":8},"end":{"line":80,"column":10}},"41":{"start":{"line":86,"column":0},"end":{"line":86,"column":24}},"42":{"start":{"line":87,"column":0},"end":{"line":87,"column":24}},"43":{"start":{"line":88,"column":0},"end":{"line":88,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":10},"end":{"line":43,"column":10}},{"start":{"line":43,"column":10},"end":{"line":43,"column":10}}]},"5":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":12}},{"start":{"line":52,"column":12},"end":{"line":52,"column":12}}]},"6":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":16},"end":{"line":52,"column":31}},{"start":{"line":52,"column":35},"end":{"line":52,"column":58}}]},"7":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":12}},{"start":{"line":55,"column":12},"end":{"line":55,"column":12}}]},"8":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":32}},{"start":{"line":55,"column":36},"end":{"line":55,"column":60}}]},"9":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":12}},{"start":{"line":63,"column":12},"end":{"line":63,"column":12}}]},"10":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":16},"end":{"line":63,"column":31}},{"start":{"line":63,"column":35},"end":{"line":63,"column":58}}]},"11":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":12},"end":{"line":66,"column":12}},{"start":{"line":66,"column":12},"end":{"line":66,"column":12}}]},"12":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":16},"end":{"line":66,"column":32}},{"start":{"line":66,"column":36},"end":{"line":66,"column":60}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const styleSearch = require(\"style-search\")","","const ruleName = \"selector-pseudo-class-parentheses-space-inside\"","","const messages = ruleMessages(ruleName, {","  expectedOpening: \"Expected single space after \\\"(\\\"\",","  rejectedOpening: \"Unexpected whitespace after \\\"(\\\"\",","  expectedClosing: \"Expected single space before \\\")\\\"\",","  rejectedClosing: \"Unexpected whitespace before \\\")\\\"\",","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (rule.selector.indexOf(\"(\") === -1) {","        return","      }","","      parseSelector(rule.selector, result, rule, selectorTree => {","        selectorTree.walkPseudos(pseudoNode => {","          if (_.get(pseudoNode, \"parent.parent.type\") === \"pseudo\") {","            return","          }","","          const pseudoSelectorString = pseudoNode.toString()","","          styleSearch({ source: pseudoSelectorString, target: \"(\" }, match => {","            const nextCharIsSpace = pseudoSelectorString[match.startIndex + 1] === \" \"","            const index = pseudoNode.sourceIndex + match.startIndex + 1","            if (nextCharIsSpace && expectation === \"never\") {","              complain(messages.rejectedOpening, index)","            }","            if (!nextCharIsSpace && expectation === \"always\") {","              complain(messages.expectedOpening, index)","            }","          })","","          styleSearch({ source: pseudoSelectorString, target: \")\" }, match => {","            const prevCharIsSpace = pseudoSelectorString[match.startIndex - 1] === \" \"","            const index = pseudoNode.sourceIndex + match.startIndex - 1","            if (prevCharIsSpace && expectation === \"never\") {","              complain(messages.rejectedClosing, index)","            }","            if (!prevCharIsSpace && expectation === \"always\") {","              complain(messages.expectedClosing, index)","            }","          })","        })","      })","","      function complain(message, index) {","        report({","          message,","          index,","          result,","          ruleName,","          node: rule,","        })","      }","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"20":1,"21":0,"22":0,"29":0,"30":0,"33":0,"34":0,"35":0,"37":0,"38":0,"41":0,"42":0,"43":0,"44":0,"47":0,"49":0,"50":0,"51":0,"52":0,"53":0,"55":0,"56":0,"60":0,"61":0,"62":0,"63":0,"64":0,"66":0,"67":0,"73":1,"74":0,"86":1,"87":1,"88":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-class-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":1,"34":1,"35":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":80}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":50}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":24},"end":{"line":15,"column":63}},"12":{"start":{"line":18,"column":0},"end":{"line":65,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":64,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":23,"column":6}},"15":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"16":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"17":{"start":{"line":28,"column":4},"end":{"line":63,"column":6}},"18":{"start":{"line":29,"column":6},"end":{"line":29,"column":36}},"19":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"21":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"22":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"23":{"start":{"line":38,"column":6},"end":{"line":62,"column":8}},"24":{"start":{"line":39,"column":8},"end":{"line":61,"column":10}},"25":{"start":{"line":40,"column":10},"end":{"line":40,"column":40}},"26":{"start":{"line":44,"column":10},"end":{"line":46,"column":11}},"27":{"start":{"line":45,"column":12},"end":{"line":45,"column":18}},"28":{"start":{"line":48,"column":10},"end":{"line":48,"column":37}},"29":{"start":{"line":50,"column":10},"end":{"line":52,"column":11}},"30":{"start":{"line":51,"column":12},"end":{"line":51,"column":18}},"31":{"start":{"line":54,"column":10},"end":{"line":60,"column":12}},"32":{"start":{"line":67,"column":0},"end":{"line":67,"column":30}},"33":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"34":{"start":{"line":70,"column":0},"end":{"line":70,"column":24}},"35":{"start":{"line":71,"column":0},"end":{"line":71,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":10},"end":{"line":44,"column":10}},{"start":{"line":44,"column":10},"end":{"line":44,"column":10}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":10},"end":{"line":50,"column":10}},{"start":{"line":50,"column":10},"end":{"line":50,"column":10}}]}},"code":["\"use strict\"","","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const postcss = require(\"postcss\")","","const ruleName = \"selector-pseudo-class-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: selector => `Unexpected pseudo-class \"${selector}\"`,","})","","const rule = function (whitelist) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isString],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      const selector = rule.selector","","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      if (selector.indexOf(\":\") === -1) {","        return","      }","","      parseSelector(selector, result, rule, selectorTree => {","        selectorTree.walkPseudos(pseudoNode => {","          const value = pseudoNode.value","","          // Ignore pseudo-elements","","          if (value.slice(0, 2) === \"::\") {","            return","          }","","          const name = value.slice(1)","","          if (matchesStringOrRegExp(postcss.vendor.unprefixed(name).toLowerCase(), whitelist)) {","            return","          }","","          report({","            index: pseudoNode.sourceIndex,","            message: messages.rejected(name),","            node: rule,","            result,","            ruleName,","          })","        })","      })","    })","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"24":0,"25":0,"28":0,"29":0,"31":0,"32":0,"34":0,"35":0,"38":0,"39":0,"40":0,"44":0,"45":0,"48":0,"50":0,"51":0,"54":0,"67":1,"69":1,"70":1,"71":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-element-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-element-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":58}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":58}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":47}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":76}},"11":{"start":{"line":17,"column":0},"end":{"line":70,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":69,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"14":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"15":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"16":{"start":{"line":30,"column":4},"end":{"line":68,"column":6}},"17":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"19":{"start":{"line":34,"column":6},"end":{"line":34,"column":36}},"20":{"start":{"line":35,"column":6},"end":{"line":35,"column":59}},"21":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"22":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"23":{"start":{"line":41,"column":6},"end":{"line":67,"column":8}},"24":{"start":{"line":42,"column":8},"end":{"line":66,"column":10}},"25":{"start":{"line":43,"column":10},"end":{"line":43,"column":48}},"26":{"start":{"line":45,"column":10},"end":{"line":47,"column":11}},"27":{"start":{"line":46,"column":12},"end":{"line":46,"column":18}},"28":{"start":{"line":49,"column":10},"end":{"line":51,"column":11}},"29":{"start":{"line":50,"column":12},"end":{"line":50,"column":18}},"30":{"start":{"line":53,"column":10},"end":{"line":53,"column":123}},"31":{"start":{"line":55,"column":10},"end":{"line":57,"column":11}},"32":{"start":{"line":56,"column":12},"end":{"line":56,"column":18}},"33":{"start":{"line":59,"column":10},"end":{"line":65,"column":12}},"34":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}},"35":{"start":{"line":73,"column":0},"end":{"line":73,"column":24}},"36":{"start":{"line":74,"column":0},"end":{"line":74,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":10},"end":{"line":45,"column":10}},{"start":{"line":45,"column":10},"end":{"line":45,"column":10}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":10},"end":{"line":49,"column":10}},{"start":{"line":49,"column":10},"end":{"line":49,"column":10}}]},"6":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":14},"end":{"line":49,"column":48}},{"start":{"line":49,"column":52},"end":{"line":49,"column":135}}]},"7":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":66},"end":{"line":53,"column":93}},{"start":{"line":53,"column":96},"end":{"line":53,"column":123}}]},"8":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":10},"end":{"line":55,"column":10}},{"start":{"line":55,"column":10},"end":{"line":55,"column":10}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","","const ruleName = \"selector-pseudo-element-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","      const startIndexPseudoElement = selector.indexOf(\":\")","","      if (startIndexPseudoElement === -1) {","        return","      }","","      parseSelector(selector, result, rule, selectorTree => {","        selectorTree.walkPseudos(pseudoNode => {","          const pseudoElement = pseudoNode.value","","          if (!isStandardSyntaxSelector(pseudoElement)) {","            return","          }","","          if (pseudoElement.indexOf(\"::\") === -1 && !keywordSets.levelOneAndTwoPseudoElements.has(pseudoElement.toLowerCase().slice(1))) {","            return","          }","","          const expectedPseudoElement = expectation === \"lower\" ? pseudoElement.toLowerCase() : pseudoElement.toUpperCase()","","          if (pseudoElement === expectedPseudoElement) {","            return","          }","","          report({","            message: messages.expected(pseudoElement, expectedPseudoElement),","            node: rule,","            index: pseudoNode.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"26":0,"27":0,"30":0,"31":0,"32":0,"34":0,"35":0,"37":0,"38":0,"41":0,"42":0,"43":0,"45":0,"46":0,"49":0,"50":0,"53":0,"55":0,"56":0,"59":0,"72":1,"73":1,"74":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-element-colon-notation/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":27}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":57}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":17},"end":{"line":14,"column":62}},"11":{"start":{"line":17,"column":0},"end":{"line":63,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":62,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"14":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"15":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"16":{"start":{"line":30,"column":4},"end":{"line":61,"column":6}},"17":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":14}},"19":{"start":{"line":34,"column":6},"end":{"line":34,"column":36}},"20":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"21":{"start":{"line":38,"column":8},"end":{"line":38,"column":14}},"22":{"start":{"line":42,"column":6},"end":{"line":42,"column":108}},"23":{"start":{"line":42,"column":100},"end":{"line":42,"column":107}},"24":{"start":{"line":43,"column":6},"end":{"line":60,"column":8}},"25":{"start":{"line":44,"column":8},"end":{"line":44,"column":70}},"26":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"27":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"28":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"29":{"start":{"line":50,"column":10},"end":{"line":50,"column":16}},"30":{"start":{"line":53,"column":8},"end":{"line":59,"column":10}},"31":{"start":{"line":65,"column":0},"end":{"line":65,"column":24}},"32":{"start":{"line":66,"column":0},"end":{"line":66,"column":24}},"33":{"start":{"line":67,"column":0},"end":{"line":67,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"5":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":36}},{"start":{"line":46,"column":40},"end":{"line":46,"column":56}}]},"6":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"7":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":36}},{"start":{"line":49,"column":40},"end":{"line":49,"column":55}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const keywordSets = require(\"../../reference/keywordSets\")","const styleSearch = require(\"style-search\")","","const ruleName = \"selector-pseudo-element-colon-notation\"","","const messages = ruleMessages(ruleName, {","  expected: q => `Expected ${q} colon pseudo-element notation`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"single\",","        \"double\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","","      // get out early if no pseudo elements or classes","      if (selector.indexOf(\":\") === -1) {","        return","      }","","      // match only level 1 and 2 pseudo elements","      const pseudoElementsWithColons = _.toArray(keywordSets.levelOneAndTwoPseudoElements).map(x => `:${x}`)","      styleSearch({ source: selector.toLowerCase(), target: pseudoElementsWithColons }, match => {","        const prevCharIsColon = selector[match.startIndex - 1] === \":\"","","        if (expectation === \"single\" && !prevCharIsColon) {","          return","        }","        if (expectation === \"double\" && prevCharIsColon) {","          return","        }","","        report({","          message: messages.expected(expectation),","          node: rule,","          index: match.startIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"26":0,"27":0,"30":0,"31":0,"32":0,"34":0,"37":0,"38":0,"42":0,"43":0,"44":0,"46":0,"47":0,"49":0,"50":0,"53":0,"65":1,"66":1,"67":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-pseudo-element-no-unknown/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":1,"40":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":60}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":58}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":34}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":53}},"12":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"13":{"start":{"line":17,"column":24},"end":{"line":17,"column":82}},"14":{"start":{"line":20,"column":0},"end":{"line":79,"column":1}},"15":{"start":{"line":21,"column":2},"end":{"line":78,"column":3}},"16":{"start":{"line":22,"column":4},"end":{"line":28,"column":6}},"17":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"18":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"19":{"start":{"line":33,"column":4},"end":{"line":77,"column":6}},"20":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"21":{"start":{"line":35,"column":8},"end":{"line":35,"column":14}},"22":{"start":{"line":37,"column":6},"end":{"line":37,"column":36}},"23":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"24":{"start":{"line":42,"column":8},"end":{"line":42,"column":14}},"25":{"start":{"line":45,"column":6},"end":{"line":76,"column":8}},"26":{"start":{"line":46,"column":8},"end":{"line":75,"column":10}},"27":{"start":{"line":47,"column":10},"end":{"line":47,"column":40}},"28":{"start":{"line":49,"column":10},"end":{"line":51,"column":11}},"29":{"start":{"line":50,"column":12},"end":{"line":50,"column":18}},"30":{"start":{"line":54,"column":10},"end":{"line":56,"column":11}},"31":{"start":{"line":55,"column":12},"end":{"line":55,"column":18}},"32":{"start":{"line":58,"column":10},"end":{"line":60,"column":11}},"33":{"start":{"line":59,"column":12},"end":{"line":59,"column":18}},"34":{"start":{"line":62,"column":10},"end":{"line":62,"column":37}},"35":{"start":{"line":64,"column":10},"end":{"line":66,"column":11}},"36":{"start":{"line":65,"column":12},"end":{"line":65,"column":18}},"37":{"start":{"line":68,"column":10},"end":{"line":74,"column":12}},"38":{"start":{"line":81,"column":0},"end":{"line":81,"column":24}},"39":{"start":{"line":82,"column":0},"end":{"line":82,"column":24}},"40":{"start":{"line":83,"column":0},"end":{"line":83,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":10},"end":{"line":49,"column":10}},{"start":{"line":49,"column":10},"end":{"line":49,"column":10}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":10},"end":{"line":54,"column":10}},{"start":{"line":54,"column":10},"end":{"line":54,"column":10}}]},"6":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":10},"end":{"line":58,"column":10}},{"start":{"line":58,"column":10},"end":{"line":58,"column":10}}]},"7":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":10},"end":{"line":64,"column":10}},{"start":{"line":64,"column":10},"end":{"line":64,"column":10}}]},"8":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":14},"end":{"line":64,"column":41}},{"start":{"line":64,"column":45},"end":{"line":64,"column":95}}]}},"code":["\"use strict\"","","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const keywordSets = require(\"../../reference/keywordSets\")","const postcss = require(\"postcss\")","","const ruleName = \"selector-pseudo-element-no-unknown\"","","const messages = ruleMessages(ruleName, {","  rejected: selector => `Unexpected unknown pseudo-element selector \"${selector}\"`,","})","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignorePseudoElements: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      const selector = rule.selector","","      // Return early before parse if no pseudos for performance","","      if (selector.indexOf(\":\") === -1) {","        return","      }","","      parseSelector(selector, result, rule, selectorTree => {","        selectorTree.walkPseudos(pseudoNode => {","          const value = pseudoNode.value","","          if (!isStandardSyntaxSelector(value)) {","            return","          }","","          // Ignore pseudo-classes","          if (value.slice(0, 2) !== \"::\") {","            return","          }","","          if (optionsMatches(options, \"ignorePseudoElements\", pseudoNode.value.slice(2))) {","            return","          }","","          const name = value.slice(2)","","          if (postcss.vendor.prefix(name) || keywordSets.pseudoElements.has(name.toLowerCase())) {","            return","          }","","          report({","            message: messages.rejected(value),","            node: rule,","            index: pseudoNode.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"20":1,"21":0,"22":0,"29":0,"30":0,"33":0,"34":0,"35":0,"37":0,"41":0,"42":0,"45":0,"46":0,"47":0,"49":0,"50":0,"54":0,"55":0,"58":0,"59":0,"62":0,"64":0,"65":0,"68":0,"81":1,"82":1,"83":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-root-no-composition/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-root-no-composition/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":47}},"5":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"6":{"start":{"line":13,"column":0},"end":{"line":40,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":39,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":70}},"9":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"10":{"start":{"line":17,"column":6},"end":{"line":17,"column":12}},"11":{"start":{"line":20,"column":4},"end":{"line":25,"column":6}},"12":{"start":{"line":27,"column":4},"end":{"line":38,"column":6}},"13":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"14":{"start":{"line":29,"column":8},"end":{"line":29,"column":14}},"15":{"start":{"line":32,"column":6},"end":{"line":37,"column":8}},"16":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"17":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"18":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"3":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":10},"end":{"line":28,"column":61}},{"start":{"line":28,"column":65},"end":{"line":28,"column":111}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-root-no-composition\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected composition\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed. Instead use the community 'stylelint-suitcss' plugin pack.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    root.walkRules(rule => {","      if (rule.selector.toLowerCase().indexOf(\":root\") === -1 || rule.selector.toLowerCase().trim() === \":root\") {","        return","      }","","      report({","        message: messages.rejected,","        node: rule,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"13":1,"14":0,"15":0,"16":0,"17":0,"20":0,"27":0,"28":0,"29":0,"32":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-type-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-type-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":1,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":68}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":88}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":56}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":62}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":34},"end":{"line":15,"column":76}},"12":{"start":{"line":18,"column":0},"end":{"line":71,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":70,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":26,"column":6}},"15":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"17":{"start":{"line":31,"column":4},"end":{"line":69,"column":6}},"18":{"start":{"line":32,"column":6},"end":{"line":33,"column":34}},"19":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"20":{"start":{"line":36,"column":8},"end":{"line":36,"column":14}},"21":{"start":{"line":38,"column":6},"end":{"line":40,"column":7}},"22":{"start":{"line":39,"column":8},"end":{"line":39,"column":14}},"23":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"24":{"start":{"line":41,"column":30},"end":{"line":41,"column":51}},"25":{"start":{"line":42,"column":8},"end":{"line":42,"column":14}},"26":{"start":{"line":45,"column":6},"end":{"line":68,"column":8}},"27":{"start":{"line":46,"column":8},"end":{"line":67,"column":10}},"28":{"start":{"line":47,"column":10},"end":{"line":49,"column":11}},"29":{"start":{"line":48,"column":12},"end":{"line":48,"column":18}},"30":{"start":{"line":51,"column":10},"end":{"line":52,"column":29}},"31":{"start":{"line":54,"column":10},"end":{"line":54,"column":99}},"32":{"start":{"line":56,"column":10},"end":{"line":58,"column":11}},"33":{"start":{"line":57,"column":12},"end":{"line":57,"column":18}},"34":{"start":{"line":60,"column":10},"end":{"line":66,"column":12}},"35":{"start":{"line":73,"column":0},"end":{"line":73,"column":24}},"36":{"start":{"line":74,"column":0},"end":{"line":74,"column":24}},"37":{"start":{"line":75,"column":0},"end":{"line":75,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]},"3":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"4":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"5":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":10},"end":{"line":47,"column":10}},{"start":{"line":47,"column":10},"end":{"line":47,"column":10}}]},"6":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":58},"end":{"line":54,"column":77}},{"start":{"line":54,"column":80},"end":{"line":54,"column":99}}]},"7":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":10},"end":{"line":56,"column":10}},{"start":{"line":56,"column":10},"end":{"line":56,"column":10}}]}},"code":["\"use strict\"","","const isKeyframeSelector = require(\"../../utils/isKeyframeSelector\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const isStandardSyntaxTypeSelector = require(\"../../utils/isStandardSyntaxTypeSelector\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"selector-type-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      const selector = rule.selector,","        selectors = rule.selectors","","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      if (selectors.some(s => isKeyframeSelector(s))) {","        return","      }","","      parseSelector(selector, result, rule, selectorAST => {","        selectorAST.walkTags(tag => {","          if (!isStandardSyntaxTypeSelector(tag)) {","            return","          }","","          const sourceIndex = tag.sourceIndex,","            value = tag.value","","          const expectedValue = expectation === \"lower\" ? value.toLowerCase() : value.toUpperCase()","","          if (value === expectedValue) {","            return","          }","","          report({","            message: messages.expected(value, expectedValue),","            node: rule,","            index: sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"27":0,"28":0,"31":0,"32":0,"35":0,"36":0,"38":0,"39":0,"41":0,"42":0,"45":0,"46":0,"47":0,"48":0,"51":0,"54":0,"56":0,"57":0,"60":0,"73":1,"74":1,"75":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-type-no-unknown/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/selector-type-no-unknown/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":1,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":1,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":48,"loc":{"start":{"line":48,"column":13},"end":{"line":48,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":68}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":88}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":60}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":56}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":27}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":35}},"13":{"start":{"line":16,"column":0},"end":{"line":16,"column":43}},"14":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"15":{"start":{"line":19,"column":24},"end":{"line":19,"column":72}},"16":{"start":{"line":23,"column":0},"end":{"line":46,"column":2}},"17":{"start":{"line":48,"column":0},"end":{"line":118,"column":1}},"18":{"start":{"line":49,"column":2},"end":{"line":117,"column":3}},"19":{"start":{"line":50,"column":4},"end":{"line":60,"column":6}},"20":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"21":{"start":{"line":62,"column":6},"end":{"line":62,"column":12}},"22":{"start":{"line":65,"column":4},"end":{"line":116,"column":6}},"23":{"start":{"line":66,"column":6},"end":{"line":67,"column":34}},"24":{"start":{"line":69,"column":6},"end":{"line":71,"column":7}},"25":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"26":{"start":{"line":72,"column":6},"end":{"line":74,"column":7}},"27":{"start":{"line":73,"column":8},"end":{"line":73,"column":14}},"28":{"start":{"line":75,"column":6},"end":{"line":77,"column":7}},"29":{"start":{"line":75,"column":30},"end":{"line":75,"column":51}},"30":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"31":{"start":{"line":79,"column":6},"end":{"line":115,"column":8}},"32":{"start":{"line":80,"column":8},"end":{"line":114,"column":10}},"33":{"start":{"line":81,"column":10},"end":{"line":83,"column":11}},"34":{"start":{"line":82,"column":12},"end":{"line":82,"column":18}},"35":{"start":{"line":85,"column":10},"end":{"line":90,"column":11}},"36":{"start":{"line":89,"column":12},"end":{"line":89,"column":18}},"37":{"start":{"line":92,"column":10},"end":{"line":94,"column":11}},"38":{"start":{"line":93,"column":12},"end":{"line":93,"column":18}},"39":{"start":{"line":96,"column":10},"end":{"line":98,"column":11}},"40":{"start":{"line":97,"column":12},"end":{"line":97,"column":18}},"41":{"start":{"line":100,"column":10},"end":{"line":100,"column":39}},"42":{"start":{"line":101,"column":10},"end":{"line":101,"column":56}},"43":{"start":{"line":103,"column":10},"end":{"line":105,"column":11}},"44":{"start":{"line":104,"column":12},"end":{"line":104,"column":18}},"45":{"start":{"line":107,"column":10},"end":{"line":113,"column":12}},"46":{"start":{"line":120,"column":0},"end":{"line":120,"column":24}},"47":{"start":{"line":121,"column":0},"end":{"line":121,"column":24}},"48":{"start":{"line":122,"column":0},"end":{"line":122,"column":21}}},"branchMap":{"1":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"2":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":6}},{"start":{"line":69,"column":6},"end":{"line":69,"column":6}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":6},"end":{"line":72,"column":6}},{"start":{"line":72,"column":6},"end":{"line":72,"column":6}}]},"4":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":6}},{"start":{"line":75,"column":6},"end":{"line":75,"column":6}}]},"5":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":10},"end":{"line":81,"column":10}},{"start":{"line":81,"column":10},"end":{"line":81,"column":10}}]},"6":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":10},"end":{"line":85,"column":10}},{"start":{"line":85,"column":10},"end":{"line":85,"column":10}}]},"7":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":12},"end":{"line":86,"column":66}},{"start":{"line":87,"column":15},"end":{"line":87,"column":51}}]},"8":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":10},"end":{"line":92,"column":10}},{"start":{"line":92,"column":10},"end":{"line":92,"column":10}}]},"9":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":10},"end":{"line":96,"column":10}},{"start":{"line":96,"column":10},"end":{"line":96,"column":10}}]},"10":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":10},"end":{"line":103,"column":10}},{"start":{"line":103,"column":10},"end":{"line":103,"column":10}}]},"11":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":14},"end":{"line":103,"column":55}},{"start":{"line":103,"column":59},"end":{"line":103,"column":99}},{"start":{"line":103,"column":103},"end":{"line":103,"column":144}}]}},"code":["\"use strict\"","","const isKeyframeSelector = require(\"../../utils/isKeyframeSelector\")","const isStandardSyntaxRule = require(\"../../utils/isStandardSyntaxRule\")","const isStandardSyntaxSelector = require(\"../../utils/isStandardSyntaxSelector\")","const isStandardSyntaxTypeSelector = require(\"../../utils/isStandardSyntaxTypeSelector\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const parseSelector = require(\"../../utils/parseSelector\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const htmlTags = require(\"html-tags\")","const _ = require(\"lodash\")","const svgTags = require(\"svg-tags\")","","const ruleName = \"selector-type-no-unknown\"","","const messages = ruleMessages(ruleName, {","  rejected: selector => `Unexpected unknown type selector \"${selector}\"`,","})","","// htmlTags includes only \"standard\" tags. So we augment it with older tags etc.","const nonStandardHtmlTags = new Set([","  \"acronym\",","  \"applet\",","  \"basefont\",","  \"big\",","  \"blink\",","  \"center\",","  \"content\",","  \"dir\",","  \"font\",","  \"frame\",","  \"frameset\",","  \"hgroup\",","  \"isindex\",","  \"keygen\",","  \"listing\",","  \"marquee\",","  \"noembed\",","  \"plaintext\",","  \"spacer\",","  \"strike\",","  \"tt\",","  \"xmp\",","])","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignore: [","          \"default-namespace\",","        ],","        ignoreNamespaces: [_.isString],","        ignoreTypes: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkRules(rule => {","      const selector = rule.selector,","        selectors = rule.selectors","","      if (!isStandardSyntaxRule(rule)) {","        return","      }","      if (!isStandardSyntaxSelector(selector)) {","        return","      }","      if (selectors.some(s => isKeyframeSelector(s))) {","        return","      }","","      parseSelector(selector, result, rule, selectorTree => {","        selectorTree.walkTags(tagNode => {","          if (!isStandardSyntaxTypeSelector(tagNode)) {","            return","          }","","          if (","            optionsMatches(options, \"ignore\", \"default-namespace\")","            && !tagNode.hasOwnProperty(\"namespace\")","          ) {","            return","          }","","          if (optionsMatches(options, \"ignoreNamespaces\", tagNode.namespace)) {","            return","          }","","          if (optionsMatches(options, \"ignoreTypes\", tagNode.value)) {","            return","          }","","          const tagName = tagNode.value","          const tagNameLowerCase = tagName.toLowerCase()","","          if (htmlTags.indexOf(tagNameLowerCase) !== -1 || svgTags.indexOf(tagNameLowerCase) !== -1 || nonStandardHtmlTags.has(tagNameLowerCase)) {","            return","          }","","          report({","            message: messages.rejected(tagName),","            node: rule,","            index: tagNode.sourceIndex,","            ruleName,","            result,","          })","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"16":1,"18":1,"19":0,"23":1,"48":1,"49":0,"50":0,"61":0,"62":0,"65":0,"66":0,"69":0,"70":0,"72":0,"73":0,"75":0,"76":0,"79":0,"80":0,"81":0,"82":0,"85":0,"89":0,"92":0,"93":0,"96":0,"97":0,"100":0,"101":0,"103":0,"104":0,"107":0,"120":1,"121":1,"122":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/shorthand-property-no-redundant-values/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":1,"37":0,"38":1,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":1,"68":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0],"12":[0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"isIgnoredCharacters","line":45,"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":36}}},"2":{"name":"canCondense","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":33}}},"3":{"name":"canCondenseToOneValue","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":57}}},"4":{"name":"canCondenseToTwoValues","line":89,"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":58}}},"5":{"name":"canCondenseToThreeValues","line":93,"loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":60}}},"6":{"name":"(anonymous_6)","line":97,"loc":{"start":{"line":97,"column":13},"end":{"line":97,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":86}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":80}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":57}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":38},"end":{"line":15,"column":106}},"12":{"start":{"line":18,"column":0},"end":{"line":18,"column":67}},"13":{"start":{"line":20,"column":0},"end":{"line":31,"column":1}},"14":{"start":{"line":33,"column":0},"end":{"line":43,"column":2}},"15":{"start":{"line":45,"column":0},"end":{"line":47,"column":1}},"16":{"start":{"line":46,"column":2},"end":{"line":46,"column":67}},"17":{"start":{"line":46,"column":40},"end":{"line":46,"column":66}},"18":{"start":{"line":49,"column":0},"end":{"line":79,"column":1}},"19":{"start":{"line":50,"column":2},"end":{"line":50,"column":89}},"20":{"start":{"line":51,"column":2},"end":{"line":51,"column":87}},"21":{"start":{"line":53,"column":2},"end":{"line":53,"column":36}},"22":{"start":{"line":54,"column":2},"end":{"line":54,"column":40}},"23":{"start":{"line":55,"column":2},"end":{"line":55,"column":52}},"24":{"start":{"line":56,"column":2},"end":{"line":56,"column":46}},"25":{"start":{"line":58,"column":2},"end":{"line":78,"column":3}},"26":{"start":{"line":59,"column":4},"end":{"line":59,"column":16}},"27":{"start":{"line":60,"column":9},"end":{"line":78,"column":3}},"28":{"start":{"line":61,"column":4},"end":{"line":64,"column":5}},"29":{"start":{"line":65,"column":9},"end":{"line":78,"column":3}},"30":{"start":{"line":66,"column":4},"end":{"line":70,"column":5}},"31":{"start":{"line":72,"column":4},"end":{"line":77,"column":5}},"32":{"start":{"line":81,"column":0},"end":{"line":87,"column":1}},"33":{"start":{"line":82,"column":2},"end":{"line":84,"column":3}},"34":{"start":{"line":83,"column":4},"end":{"line":83,"column":16}},"35":{"start":{"line":86,"column":2},"end":{"line":86,"column":73}},"36":{"start":{"line":89,"column":0},"end":{"line":91,"column":1}},"37":{"start":{"line":90,"column":2},"end":{"line":90,"column":85}},"38":{"start":{"line":93,"column":0},"end":{"line":95,"column":1}},"39":{"start":{"line":94,"column":2},"end":{"line":94,"column":23}},"40":{"start":{"line":97,"column":0},"end":{"line":151,"column":1}},"41":{"start":{"line":98,"column":2},"end":{"line":150,"column":3}},"42":{"start":{"line":99,"column":4},"end":{"line":99,"column":70}},"43":{"start":{"line":100,"column":4},"end":{"line":102,"column":5}},"44":{"start":{"line":101,"column":6},"end":{"line":101,"column":12}},"45":{"start":{"line":104,"column":4},"end":{"line":149,"column":6}},"46":{"start":{"line":105,"column":6},"end":{"line":107,"column":7}},"47":{"start":{"line":106,"column":8},"end":{"line":106,"column":14}},"48":{"start":{"line":109,"column":6},"end":{"line":110,"column":26}},"49":{"start":{"line":112,"column":6},"end":{"line":112,"column":74}},"50":{"start":{"line":115,"column":6},"end":{"line":117,"column":7}},"51":{"start":{"line":116,"column":8},"end":{"line":116,"column":14}},"52":{"start":{"line":119,"column":6},"end":{"line":119,"column":34}},"53":{"start":{"line":121,"column":6},"end":{"line":127,"column":8}},"54":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"55":{"start":{"line":123,"column":10},"end":{"line":123,"column":16}},"56":{"start":{"line":126,"column":8},"end":{"line":126,"column":64}},"57":{"start":{"line":129,"column":6},"end":{"line":131,"column":7}},"58":{"start":{"line":130,"column":8},"end":{"line":130,"column":14}},"59":{"start":{"line":133,"column":6},"end":{"line":133,"column":74}},"60":{"start":{"line":134,"column":6},"end":{"line":136,"column":18}},"61":{"start":{"line":135,"column":8},"end":{"line":135,"column":20}},"62":{"start":{"line":137,"column":6},"end":{"line":137,"column":58}},"63":{"start":{"line":139,"column":6},"end":{"line":141,"column":7}},"64":{"start":{"line":140,"column":8},"end":{"line":140,"column":14}},"65":{"start":{"line":143,"column":6},"end":{"line":148,"column":8}},"66":{"start":{"line":153,"column":0},"end":{"line":153,"column":24}},"67":{"start":{"line":154,"column":0},"end":{"line":154,"column":24}},"68":{"start":{"line":155,"column":0},"end":{"line":155,"column":21}}},"branchMap":{"1":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":70},"end":{"line":50,"column":82}},{"start":{"line":50,"column":85},"end":{"line":50,"column":89}}]},"2":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":17},"end":{"line":50,"column":37}},{"start":{"line":50,"column":41},"end":{"line":50,"column":67}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":51,"column":68},"end":{"line":51,"column":80}},{"start":{"line":51,"column":83},"end":{"line":51,"column":87}}]},"4":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":15},"end":{"line":51,"column":35}},{"start":{"line":51,"column":39},"end":{"line":51,"column":65}}]},"5":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":22},"end":{"line":55,"column":28}},{"start":{"line":55,"column":32},"end":{"line":55,"column":52}}]},"6":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":20},"end":{"line":56,"column":24}},{"start":{"line":56,"column":28},"end":{"line":56,"column":46}}]},"7":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":2},"end":{"line":58,"column":2}},{"start":{"line":58,"column":2},"end":{"line":58,"column":2}}]},"8":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":9},"end":{"line":60,"column":9}},{"start":{"line":60,"column":9},"end":{"line":60,"column":9}}]},"9":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":9},"end":{"line":65,"column":9}},{"start":{"line":65,"column":9},"end":{"line":65,"column":9}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"11":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":9},"end":{"line":86,"column":23}},{"start":{"line":86,"column":28},"end":{"line":86,"column":43}},{"start":{"line":86,"column":47},"end":{"line":86,"column":52}},{"start":{"line":86,"column":57},"end":{"line":86,"column":64}},{"start":{"line":86,"column":68},"end":{"line":86,"column":73}}]},"12":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":9},"end":{"line":90,"column":23}},{"start":{"line":90,"column":27},"end":{"line":90,"column":41}},{"start":{"line":90,"column":45},"end":{"line":90,"column":59}},{"start":{"line":90,"column":63},"end":{"line":90,"column":68}},{"start":{"line":90,"column":72},"end":{"line":90,"column":85}}]},"13":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"14":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":6}},{"start":{"line":105,"column":6},"end":{"line":105,"column":6}}]},"15":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":10},"end":{"line":105,"column":44}},{"start":{"line":105,"column":48},"end":{"line":105,"column":84}}]},"16":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":6}},{"start":{"line":115,"column":6},"end":{"line":115,"column":6}}]},"17":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":10},"end":{"line":115,"column":36}},{"start":{"line":115,"column":40},"end":{"line":115,"column":84}},{"start":{"line":115,"column":88},"end":{"line":115,"column":134}}]},"18":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":122,"column":8}},{"start":{"line":122,"column":8},"end":{"line":122,"column":8}}]},"19":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":6},"end":{"line":129,"column":6}},{"start":{"line":129,"column":6},"end":{"line":129,"column":6}}]},"20":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":10},"end":{"line":129,"column":39}},{"start":{"line":129,"column":43},"end":{"line":129,"column":71}}]},"21":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":6},"end":{"line":139,"column":6}},{"start":{"line":139,"column":6},"end":{"line":139,"column":6}}]}},"code":["\"use strict\"","","const isStandardSyntaxDeclaration = require(\"../../utils/isStandardSyntaxDeclaration\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const shorthandData = require(\"../../reference/shorthandData\")","const valueParser = require(\"postcss-value-parser\")","const postcss = require(\"postcss\")","","const ruleName = \"shorthand-property-no-redundant-values\"","","const messages = ruleMessages(ruleName, {","  rejected: (unexpected, expected) => `Unexpected longhand value '${unexpected}' instead of '${expected}'`,","})","","const shorthandableProperties = new Set(Object.keys(shorthandData))","","const ignoredCharacters = [","  \"+\",","  \"-\",","  \"*\",","  \"/\",","  \"(\",","  \")\",","  \"$\",","  \"@\",","  \"--\",","  \"var(\",","]","","const ignoredShorthandProperties = new Set([","  \"background\",","  \"font\",","  \"border\",","  \"border-top\",","  \"border-bottom\",","  \"border-left\",","  \"border-right\",","  \"list-style\",","  \"transition\",","])","","function isIgnoredCharacters(value) {","  return ignoredCharacters.some(char => value.indexOf(char) !== -1)","}","","function canCondense(top, right) {","  const bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null","  const left = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null","","  const lowerTop = top.toLowerCase()","  const lowerRight = right.toLowerCase()","  const lowerBottom = bottom && bottom.toLowerCase()","  const lowerLeft = left && left.toLowerCase()","","  if (canCondenseToOneValue(lowerTop, lowerRight, lowerBottom, lowerLeft)) {","    return [top]","  } else if (canCondenseToTwoValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {","    return [","      top,","      right,","    ]","  } else if (canCondenseToThreeValues(lowerTop, lowerRight, lowerBottom, lowerLeft)) {","    return [","      top,","      right,","      bottom,","    ]","  } else {","    return [","      top,","      right,","      bottom,","      left,","    ]","  }","}","","function canCondenseToOneValue(top, right, bottom, left) {","  if (top !== right) {","    return false","  }","","  return top === bottom && (bottom === left || !left) || !bottom && !left","}","","function canCondenseToTwoValues(top, right, bottom, left) {","  return top === bottom && right === left || top === bottom && !left && top !== right","}","","function canCondenseToThreeValues(top, right, bottom, left) {","  return right === left","}","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {","        return","      }","","      const prop = decl.prop,","        value = decl.value","","      const normalizedProp = postcss.vendor.unprefixed(prop.toLowerCase())","","      // Ignore not shorthandable properties, and math operations","      if (isIgnoredCharacters(value) || !shorthandableProperties.has(normalizedProp) || ignoredShorthandProperties.has(normalizedProp)) {","        return","      }","","      const valuesToShorthand = []","","      valueParser(value).walk(valueNode => {","        if (valueNode.type !== \"word\") {","          return","        }","","        valuesToShorthand.push(valueParser.stringify(valueNode))","      })","","      if (valuesToShorthand.length <= 1 || valuesToShorthand.length > 4) {","        return","      }","","      const shortestForm = canCondense.apply(undefined, valuesToShorthand)","      const shortestFormString = shortestForm.filter(value => {","        return value","      }).join(\" \")","      const valuesFormString = valuesToShorthand.join(\" \")","","      if (shortestFormString.toLowerCase() === valuesFormString.toLowerCase()) {","        return","      }","","      report({","        message: messages.rejected(value, shortestFormString),","        node: decl,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"20":1,"33":1,"45":1,"46":0,"49":1,"50":0,"51":0,"53":0,"54":0,"55":0,"56":0,"58":0,"59":0,"60":0,"61":0,"65":0,"66":0,"72":0,"81":1,"82":0,"83":0,"86":0,"89":1,"90":0,"93":1,"94":0,"97":1,"98":0,"99":0,"100":0,"101":0,"104":0,"105":0,"106":0,"109":0,"112":0,"115":0,"116":0,"119":0,"121":0,"122":0,"123":0,"126":0,"129":0,"130":0,"133":0,"134":0,"135":0,"137":0,"139":0,"140":0,"143":0,"153":1,"154":1,"155":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/string-no-newline/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/string-no-newline/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":36}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":14,"column":0},"end":{"line":42,"column":1}},"8":{"start":{"line":15,"column":2},"end":{"line":41,"column":3}},"9":{"start":{"line":16,"column":4},"end":{"line":16,"column":70}},"10":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"11":{"start":{"line":18,"column":6},"end":{"line":18,"column":12}},"12":{"start":{"line":21,"column":4},"end":{"line":21,"column":37}},"13":{"start":{"line":22,"column":4},"end":{"line":40,"column":6}},"14":{"start":{"line":27,"column":6},"end":{"line":27,"column":56}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":34}},"16":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"17":{"start":{"line":30,"column":8},"end":{"line":30,"column":14}},"18":{"start":{"line":32,"column":6},"end":{"line":32,"column":41}},"19":{"start":{"line":32,"column":31},"end":{"line":32,"column":41}},"20":{"start":{"line":33,"column":6},"end":{"line":39,"column":8}},"21":{"start":{"line":44,"column":0},"end":{"line":44,"column":24}},"22":{"start":{"line":45,"column":0},"end":{"line":45,"column":24}},"23":{"start":{"line":46,"column":0},"end":{"line":46,"column":21}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"string-no-newline\"","","const messages = ruleMessages(ruleName, {","  rejected: \"Unexpected newline in string\",","})","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    const cssString = root.toString()","    styleSearch({","      source: cssString,","      target: \"\\n\",","      strings: \"only\",","    }, match => {","      const charBefore = cssString[match.startIndex - 1]","      let index = match.startIndex","      if (charBefore === \"\\\\\") {","        return","      }","      if (charBefore === \"\\r\") index -= 1","      report({","        message: messages.rejected,","        node: root,","        index,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"14":1,"15":0,"16":0,"17":0,"18":0,"21":0,"22":0,"27":0,"28":0,"29":0,"30":0,"32":0,"33":0,"44":1,"45":1,"46":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/string-quotes/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/string-quotes/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":32}},"6":{"start":{"line":10,"column":0},"end":{"line":12,"column":2}},"7":{"start":{"line":11,"column":17},"end":{"line":11,"column":39}},"8":{"start":{"line":14,"column":0},"end":{"line":40,"column":1}},"9":{"start":{"line":15,"column":2},"end":{"line":15,"column":62}},"10":{"start":{"line":17,"column":2},"end":{"line":39,"column":3}},"11":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"12":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"13":{"start":{"line":26,"column":6},"end":{"line":26,"column":12}},"14":{"start":{"line":29,"column":4},"end":{"line":29,"column":37}},"15":{"start":{"line":30,"column":4},"end":{"line":38,"column":6}},"16":{"start":{"line":31,"column":6},"end":{"line":37,"column":8}},"17":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"18":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"19":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":15,"type":"cond-expr","locations":[{"start":{"line":15,"column":52},"end":{"line":15,"column":56}},{"start":{"line":15,"column":59},"end":{"line":15,"column":62}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"string-quotes\"","","const messages = ruleMessages(ruleName, {","  expected: q => `Expected ${q} quotes`,","})","","const rule = function (expectation) {","  const erroneousQuote = expectation === \"single\" ? \"\\\"\" : \"'\"","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"single\",","        \"double\",","      ],","    })","    if (!validOptions) {","      return","    }","","    const cssString = root.toString()","    styleSearch({ source: cssString, target: erroneousQuote }, match => {","      report({","        message: messages.expected(expectation),","        node: root,","        index: match.startIndex,","        result,","        ruleName,","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"14":1,"15":0,"17":0,"18":0,"25":0,"26":0,"29":0,"30":0,"31":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/stylelint-disable-reason/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/stylelint-disable-reason/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":1,"40":1,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":9},"end":{"line":18,"column":33}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":22},"end":{"line":37,"column":41}}},"4":{"name":"isDisableCommand","line":85,"loc":{"start":{"line":85,"column":4},"end":{"line":85,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":0},"end":{"line":12,"column":2}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":51}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":60}},"8":{"start":{"line":17,"column":0},"end":{"line":89,"column":1}},"9":{"start":{"line":18,"column":2},"end":{"line":88,"column":3}},"10":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"11":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"12":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"13":{"start":{"line":30,"column":4},"end":{"line":35,"column":6}},"14":{"start":{"line":37,"column":4},"end":{"line":83,"column":6}},"15":{"start":{"line":38,"column":6},"end":{"line":40,"column":7}},"16":{"start":{"line":39,"column":8},"end":{"line":39,"column":14}},"17":{"start":{"line":42,"column":6},"end":{"line":82,"column":7}},"18":{"start":{"line":43,"column":8},"end":{"line":43,"column":35}},"19":{"start":{"line":44,"column":8},"end":{"line":44,"column":101}},"20":{"start":{"line":46,"column":8},"end":{"line":46,"column":52}},"21":{"start":{"line":48,"column":8},"end":{"line":52,"column":9}},"22":{"start":{"line":49,"column":10},"end":{"line":49,"column":42}},"23":{"start":{"line":51,"column":10},"end":{"line":51,"column":132}},"24":{"start":{"line":54,"column":8},"end":{"line":65,"column":9}},"25":{"start":{"line":55,"column":10},"end":{"line":55,"column":64}},"26":{"start":{"line":56,"column":10},"end":{"line":56,"column":49}},"27":{"start":{"line":58,"column":10},"end":{"line":63,"column":12}},"28":{"start":{"line":64,"column":10},"end":{"line":64,"column":58}},"29":{"start":{"line":66,"column":13},"end":{"line":82,"column":7}},"30":{"start":{"line":67,"column":8},"end":{"line":67,"column":35}},"31":{"start":{"line":68,"column":8},"end":{"line":68,"column":101}},"32":{"start":{"line":70,"column":8},"end":{"line":81,"column":9}},"33":{"start":{"line":71,"column":10},"end":{"line":71,"column":64}},"34":{"start":{"line":72,"column":10},"end":{"line":72,"column":49}},"35":{"start":{"line":74,"column":10},"end":{"line":79,"column":12}},"36":{"start":{"line":80,"column":10},"end":{"line":80,"column":58}},"37":{"start":{"line":85,"column":4},"end":{"line":87,"column":5}},"38":{"start":{"line":86,"column":6},"end":{"line":86,"column":56}},"39":{"start":{"line":91,"column":0},"end":{"line":91,"column":24}},"40":{"start":{"line":92,"column":0},"end":{"line":92,"column":24}},"41":{"start":{"line":93,"column":0},"end":{"line":93,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"4":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":38},"end":{"line":44,"column":42}},{"start":{"line":44,"column":46},"end":{"line":44,"column":69}},{"start":{"line":44,"column":73},"end":{"line":44,"column":101}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":8}},{"start":{"line":48,"column":8},"end":{"line":48,"column":8}}]},"6":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":12},"end":{"line":48,"column":67}},{"start":{"line":48,"column":71},"end":{"line":48,"column":93}},{"start":{"line":48,"column":97},"end":{"line":48,"column":101}}]},"7":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":45},"end":{"line":51,"column":57}},{"start":{"line":51,"column":61},"end":{"line":51,"column":92}},{"start":{"line":51,"column":96},"end":{"line":51,"column":132}}]},"8":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"9":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":34}},{"start":{"line":54,"column":38},"end":{"line":54,"column":71}}]},"10":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":13},"end":{"line":66,"column":13}},{"start":{"line":66,"column":13},"end":{"line":66,"column":13}}]},"11":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":38},"end":{"line":68,"column":42}},{"start":{"line":68,"column":46},"end":{"line":68,"column":69}},{"start":{"line":68,"column":73},"end":{"line":68,"column":101}}]},"12":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]}},"code":["\"use strict\"","","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","","const ruleName = \"stylelint-disable-reason\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: \"Expected comment reason before `stylelint-disable` comment\",","  expectedAfter: \"Expected comment reason after `stylelint-disable` comment\",","})","","const stylelintDisableCommand = \"stylelint-disable\"","const stylelintDisableLineCommand = \"stylelint-disable-line\"","","const rule = function (expectation) {","  return function (root, result) {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always-before\",","        \"always-after\",","      ],","    })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    root.walkComments(function (comment) {","      if (comment.text.indexOf(stylelintDisableCommand) !== 0) {","        return","      }","","      if (expectation === \"always-before\") {","        const prev = comment.prev()","        const prevIsCommentAndValid = prev && prev.type === \"comment\" && !isDisableCommand(prev.text)","","        let prevDisableLineIsCommentAndValid = false","","        if (comment.text.indexOf(stylelintDisableLineCommand) === 0 && !prevIsCommentAndValid && prev) {","          const friendlyPrev = prev.prev()","","          prevDisableLineIsCommentAndValid = friendlyPrev && friendlyPrev.type === \"comment\" && !isDisableCommand(friendlyPrev.text)","        }","","        if (!prevIsCommentAndValid && !prevDisableLineIsCommentAndValid) {","          const disabledRanges = result.stylelint.disabledRanges","          result.stylelint.disabledRanges = false","","          report({","            message: messages.expectedBefore,","            node: comment,","            result,","            ruleName,","          })","          result.stylelint.disabledRanges = disabledRanges","        }","      } else if (expectation === \"always-after\") {","        const next = comment.next()","        const nextIsCommentAndValid = next && next.type === \"comment\" && !isDisableCommand(next.text)","","        if (!nextIsCommentAndValid) {","          const disabledRanges = result.stylelint.disabledRanges","          result.stylelint.disabledRanges = false","","          report({","            message: messages.expectedAfter,","            node: comment,","            result,","            ruleName,","          })","          result.stylelint.disabledRanges = disabledRanges","        }","      }","    })","","    function isDisableCommand(text) {","      return text.indexOf(stylelintDisableCommand) === 0","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"14":1,"15":1,"17":1,"18":0,"19":0,"26":0,"27":0,"30":0,"37":0,"38":0,"39":0,"42":0,"43":0,"44":0,"46":0,"48":0,"49":0,"51":0,"54":0,"55":0,"56":0,"58":0,"64":0,"66":0,"67":0,"68":0,"70":0,"71":0,"72":0,"74":0,"80":0,"85":1,"86":0,"91":1,"92":1,"93":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/time-min-milliseconds/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/time-min-milliseconds/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":1,"41":1,"42":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":13},"end":{"line":18,"column":32}}},"2":{"name":"isAcceptableTime","line":49,"loc":{"start":{"line":49,"column":4},"end":{"line":49,"column":36}}},"3":{"name":"complain","line":69,"loc":{"start":{"line":69,"column":4},"end":{"line":69,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":34}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":51}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":40}},"10":{"start":{"line":14,"column":0},"end":{"line":16,"column":2}},"11":{"start":{"line":15,"column":20},"end":{"line":15,"column":64}},"12":{"start":{"line":18,"column":0},"end":{"line":81,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":80,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":23,"column":6}},"15":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"16":{"start":{"line":25,"column":6},"end":{"line":25,"column":12}},"17":{"start":{"line":28,"column":4},"end":{"line":47,"column":6}},"18":{"start":{"line":29,"column":6},"end":{"line":29,"column":77}},"19":{"start":{"line":31,"column":6},"end":{"line":36,"column":7}},"20":{"start":{"line":35,"column":8},"end":{"line":35,"column":22}},"21":{"start":{"line":38,"column":6},"end":{"line":46,"column":7}},"22":{"start":{"line":39,"column":8},"end":{"line":39,"column":56}},"23":{"start":{"line":41,"column":8},"end":{"line":45,"column":9}},"24":{"start":{"line":42,"column":10},"end":{"line":44,"column":11}},"25":{"start":{"line":43,"column":12},"end":{"line":43,"column":53}},"26":{"start":{"line":49,"column":4},"end":{"line":67,"column":5}},"27":{"start":{"line":50,"column":6},"end":{"line":50,"column":47}},"28":{"start":{"line":52,"column":6},"end":{"line":52,"column":34}},"29":{"start":{"line":52,"column":23},"end":{"line":52,"column":34}},"30":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"31":{"start":{"line":55,"column":8},"end":{"line":55,"column":19}},"32":{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},"33":{"start":{"line":59,"column":8},"end":{"line":59,"column":20}},"34":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"35":{"start":{"line":63,"column":8},"end":{"line":63,"column":20}},"36":{"start":{"line":66,"column":6},"end":{"line":66,"column":17}},"37":{"start":{"line":69,"column":4},"end":{"line":79,"column":5}},"38":{"start":{"line":70,"column":6},"end":{"line":70,"column":26}},"39":{"start":{"line":72,"column":6},"end":{"line":78,"column":8}},"40":{"start":{"line":83,"column":0},"end":{"line":83,"column":24}},"41":{"start":{"line":84,"column":0},"end":{"line":84,"column":24}},"42":{"start":{"line":85,"column":0},"end":{"line":85,"column":21}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":60}},{"start":{"line":33,"column":11},"end":{"line":33,"column":40}}]},"4":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"5":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":10},"end":{"line":42,"column":10}},{"start":{"line":42,"column":10},"end":{"line":42,"column":10}}]},"6":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"7":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"8":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]},"9":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":10},"end":{"line":58,"column":48}},{"start":{"line":58,"column":52},"end":{"line":58,"column":79}}]},"10":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"11":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":10},"end":{"line":62,"column":47}},{"start":{"line":62,"column":51},"end":{"line":62,"column":85}}]},"12":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":15},"end":{"line":70,"column":21}},{"start":{"line":70,"column":25},"end":{"line":70,"column":26}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","const postcss = require(\"postcss\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"time-min-milliseconds\"","","const messages = ruleMessages(ruleName, {","  expected: time => `Expected a minimum of ${time} milliseconds`,","})","","const rule = function (minimum) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: minimum,","      possible: _.isNumber,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const propertyName = postcss.vendor.unprefixed(decl.prop.toLowerCase())","","      if (","        keywordSets.longhandTimeProperties.has(propertyName)","        && !isAcceptableTime(decl.value)","      ) {","        complain(decl)","      }","","      if (keywordSets.shorthandTimeProperties.has(propertyName)) {","        const valueList = postcss.list.space(decl.value)","","        for (const value of valueList) {","          if (!isAcceptableTime(value)) {","            complain(decl, decl.value.indexOf(value))","          }","        }","      }","    })","","    function isAcceptableTime(time) {","      const parsedTime = valueParser.unit(time)","","      if (!parsedTime) return true","","      if (parsedTime.number <= 0) {","        return true","      }","","      if (parsedTime.unit.toLowerCase() === \"ms\" && parsedTime.number < minimum) {","        return false","      }","","      if (parsedTime.unit.toLowerCase() === \"s\" && parsedTime.number * 1000 < minimum) {","        return false","      }","","      return true","    }","","    function complain(decl, offset) {","      offset = offset || 0","","      report({","        result,","        ruleName,","        message: messages.expected(minimum),","        index: declarationValueIndex(decl) + offset,","        node: decl,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"18":1,"19":0,"20":0,"24":0,"25":0,"28":0,"29":0,"31":0,"35":0,"38":0,"39":0,"41":0,"42":0,"43":0,"49":1,"50":0,"52":0,"54":0,"55":0,"58":0,"59":0,"62":0,"63":0,"66":0,"69":1,"70":0,"72":0,"83":1,"84":1,"85":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/time-no-imperceptible/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/time-no-imperceptible/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":1,"41":1,"42":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":13},"end":{"line":19,"column":31}}},"2":{"name":"isImperceptibleTime","line":50,"loc":{"start":{"line":50,"column":4},"end":{"line":50,"column":39}}},"3":{"name":"complain","line":63,"loc":{"start":{"line":63,"column":4},"end":{"line":63,"column":37}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":74}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":20},"end":{"line":14,"column":81}},"11":{"start":{"line":17,"column":0},"end":{"line":17,"column":32}},"12":{"start":{"line":19,"column":0},"end":{"line":75,"column":1}},"13":{"start":{"line":20,"column":2},"end":{"line":74,"column":3}},"14":{"start":{"line":21,"column":4},"end":{"line":21,"column":70}},"15":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"16":{"start":{"line":23,"column":6},"end":{"line":23,"column":12}},"17":{"start":{"line":26,"column":4},"end":{"line":31,"column":6}},"18":{"start":{"line":33,"column":4},"end":{"line":48,"column":6}},"19":{"start":{"line":34,"column":6},"end":{"line":38,"column":7}},"20":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"21":{"start":{"line":36,"column":10},"end":{"line":36,"column":55}},"22":{"start":{"line":40,"column":6},"end":{"line":47,"column":7}},"23":{"start":{"line":41,"column":8},"end":{"line":41,"column":56}},"24":{"start":{"line":42,"column":8},"end":{"line":46,"column":9}},"25":{"start":{"line":43,"column":10},"end":{"line":45,"column":11}},"26":{"start":{"line":44,"column":12},"end":{"line":44,"column":79}},"27":{"start":{"line":50,"column":4},"end":{"line":61,"column":5}},"28":{"start":{"line":51,"column":6},"end":{"line":51,"column":47}},"29":{"start":{"line":52,"column":6},"end":{"line":52,"column":35}},"30":{"start":{"line":52,"column":23},"end":{"line":52,"column":35}},"31":{"start":{"line":53,"column":6},"end":{"line":53,"column":54}},"32":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"33":{"start":{"line":55,"column":8},"end":{"line":55,"column":19}},"34":{"start":{"line":57,"column":6},"end":{"line":59,"column":7}},"35":{"start":{"line":58,"column":8},"end":{"line":58,"column":19}},"36":{"start":{"line":60,"column":6},"end":{"line":60,"column":18}},"37":{"start":{"line":63,"column":4},"end":{"line":73,"column":5}},"38":{"start":{"line":64,"column":6},"end":{"line":64,"column":90}},"39":{"start":{"line":66,"column":6},"end":{"line":72,"column":8}},"40":{"start":{"line":77,"column":0},"end":{"line":77,"column":24}},"41":{"start":{"line":78,"column":0},"end":{"line":78,"column":24}},"42":{"start":{"line":79,"column":0},"end":{"line":79,"column":21}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"5":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":10},"end":{"line":43,"column":10}},{"start":{"line":43,"column":10},"end":{"line":43,"column":10}}]},"6":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"7":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"8":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":10},"end":{"line":54,"column":48}},{"start":{"line":54,"column":52},"end":{"line":54,"column":88}}]},"9":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"10":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":10},"end":{"line":57,"column":47}},{"start":{"line":57,"column":51},"end":{"line":57,"column":94}}]},"11":{"line":64,"type":"cond-expr","locations":[{"start":{"line":64,"column":74},"end":{"line":64,"column":86}},{"start":{"line":64,"column":89},"end":{"line":64,"column":90}}]},"12":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":21},"end":{"line":64,"column":41}},{"start":{"line":64,"column":45},"end":{"line":64,"column":71}}]}},"code":["\"use strict\"","","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const keywordSets = require(\"../../reference/keywordSets\")","const postcss = require(\"postcss\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"time-no-imperceptible\"","","const messages = ruleMessages(ruleName, {","  rejected: time => `Unexpected time value \"${time}\" less than or equal to 100ms`,","})","","const MINIMUM_MILLISECONDS = 100","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    result.warn((","      `'${ruleName}' has been deprecated and in 8.0 will be removed. Instead use 'time-min-milliseconds' with '100' as its primary option.`","    ), {","      stylelintType: \"deprecation\",","      stylelintReference: `https://stylelint.io/user-guide/rules/${ruleName}/`,","    })","","    root.walkDecls(decl => {","      if (keywordSets.longhandTimeProperties.has(postcss.vendor.unprefixed(decl.prop.toLowerCase()))) {","        if (isImperceptibleTime(decl.value)) {","          complain(messages.rejected(decl.value), decl)","        }","      }","","      if (keywordSets.shorthandTimeProperties.has(postcss.vendor.unprefixed(decl.prop.toLowerCase()))) {","        const valueList = postcss.list.space(decl.value)","        for (const value of valueList) {","          if (isImperceptibleTime(value)) {","            complain(messages.rejected(value), decl, decl.value.indexOf(value))","          }","        }","      }","    })","","    function isImperceptibleTime(time) {","      const parsedTime = valueParser.unit(time)","      if (!parsedTime) return false","      const absoluteTime = Math.abs(parsedTime.number)","      if (parsedTime.unit.toLowerCase() === \"ms\" && absoluteTime <= MINIMUM_MILLISECONDS) {","        return true","      }","      if (parsedTime.unit.toLowerCase() === \"s\" && absoluteTime * 1000 <= MINIMUM_MILLISECONDS) {","        return true","      }","      return false","    }","","    function complain(message, decl) {","      const offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0","","      report({","        result,","        ruleName,","        message,","        index: declarationValueIndex(decl) + offset,","        node: decl,","      })","    }","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"19":1,"20":0,"21":0,"22":0,"23":0,"26":0,"33":0,"34":0,"35":0,"36":0,"40":0,"41":0,"42":0,"43":0,"44":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"57":0,"58":0,"60":0,"63":1,"64":0,"66":0,"77":1,"78":1,"79":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/unit-blacklist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/unit-blacklist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":48}}},"2":{"name":"check","line":37,"loc":{"start":{"line":37,"column":4},"end":{"line":37,"column":42}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":30},"end":{"line":38,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":72}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":100}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":33}},"12":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"13":{"start":{"line":17,"column":20},"end":{"line":17,"column":47}},"14":{"start":{"line":20,"column":0},"end":{"line":67,"column":1}},"15":{"start":{"line":21,"column":2},"end":{"line":21,"column":45}},"16":{"start":{"line":22,"column":2},"end":{"line":66,"column":3}},"17":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"18":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"19":{"start":{"line":34,"column":6},"end":{"line":34,"column":12}},"20":{"start":{"line":37,"column":4},"end":{"line":62,"column":5}},"21":{"start":{"line":38,"column":6},"end":{"line":61,"column":8}},"22":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"23":{"start":{"line":41,"column":10},"end":{"line":41,"column":22}},"24":{"start":{"line":44,"column":8},"end":{"line":44,"column":52}},"25":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"26":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"27":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"28":{"start":{"line":51,"column":10},"end":{"line":51,"column":16}},"29":{"start":{"line":54,"column":8},"end":{"line":60,"column":10}},"30":{"start":{"line":64,"column":4},"end":{"line":64,"column":90}},"31":{"start":{"line":64,"column":43},"end":{"line":64,"column":89}},"32":{"start":{"line":65,"column":4},"end":{"line":65,"column":74}},"33":{"start":{"line":65,"column":27},"end":{"line":65,"column":73}},"34":{"start":{"line":69,"column":0},"end":{"line":69,"column":30}},"35":{"start":{"line":71,"column":0},"end":{"line":71,"column":24}},"36":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}},"37":{"start":{"line":73,"column":0},"end":{"line":73,"column":21}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"3":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":41}},{"start":{"line":40,"column":45},"end":{"line":40,"column":84}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"5":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":17}},{"start":{"line":46,"column":21},"end":{"line":46,"column":25}},{"start":{"line":46,"column":29},"end":{"line":46,"column":73}}]},"6":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"7":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":19}},{"start":{"line":50,"column":23},"end":{"line":50,"column":94}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const getUnitFromValueNode = require(\"../../utils/getUnitFromValueNode\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const validateObjectWithStringArrayProps = require(\"../../utils/validateObjectWithStringArrayProps\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"unit-blacklist\"","","const messages = ruleMessages(ruleName, {","  rejected: unit => `Unexpected unit \"${unit}\"`,","})","","const rule = function (blacklistInput, options) {","  const blacklist = [].concat(blacklistInput)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: blacklist,","      possible: [_.isString],","    }, {","      optional: true,","      actual: options,","      possible: {","        ignoreProperties: validateObjectWithStringArrayProps,","      },","    })","    if (!validOptions) {","      return","    }","","    function check(node, value, getIndex) {","      valueParser(value).walk(function (valueNode) {","        // Ignore wrong units within `url` function","        if (valueNode.type === \"function\" && valueNode.value.toLowerCase() === \"url\") {","          return false","        }","","        const unit = getUnitFromValueNode(valueNode)","","        if (!unit || unit && blacklist.indexOf(unit.toLowerCase()) === -1) {","          return","        }","","        if (options && optionsMatches(options.ignoreProperties, unit.toLowerCase(), node.prop)) {","          return","        }","","        report({","          index: getIndex(node) + valueNode.sourceIndex,","          message: messages.rejected(unit),","          node,","          result,","          ruleName,","        })","      })","    }","","    root.walkAtRules(/^media$/i, atRule => check(atRule, atRule.params, atRuleParamIndex))","    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex))","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"20":1,"21":0,"22":0,"23":0,"33":0,"34":0,"37":1,"38":0,"40":0,"41":0,"44":0,"46":0,"47":0,"50":0,"51":0,"54":0,"64":0,"65":0,"69":1,"71":1,"72":1,"73":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/validateObjectWithStringArrayProps.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/validateObjectWithStringArrayProps.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":17},"end":{"line":16,"column":59}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"2":{"start":{"line":16,"column":0},"end":{"line":29,"column":1}},"3":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"4":{"start":{"line":18,"column":4},"end":{"line":18,"column":16}},"5":{"start":{"line":21,"column":2},"end":{"line":28,"column":4}},"6":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"7":{"start":{"line":23,"column":6},"end":{"line":23,"column":18}},"8":{"start":{"line":27,"column":4},"end":{"line":27,"column":53}},"9":{"start":{"line":27,"column":36},"end":{"line":27,"column":52}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]}},"code":["/* @flow */","\"use strict\"","","const _ = require(\"lodash\")","","/**"," * Check whether the variable is an object and all it's properties are arrays of string values:"," *"," * ignoreProperties = {"," *   value1: [\"item11\", \"item12\", \"item13\"],"," *   value2: [\"item21\", \"item22\", \"item23\"],"," *   value3: [\"item31\", \"item32\", \"item33\"],"," * }"," */","","module.exports = function (value/*: Object*/)/*: boolean*/ {","  if (!_.isPlainObject(value)) {","    return false","  }","","  return Object.keys(value).every(key => {","    if (!_.isArray(value[key])) {","      return false","    }","","    // Make sure the array items are strings","    return value[key].every(item => _.isString(item))","  })","}",""],"l":{"4":1,"16":1,"17":0,"18":0,"21":0,"22":0,"23":0,"27":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/unit-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/unit-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}},"2":{"name":"check","line":30,"loc":{"start":{"line":30,"column":4},"end":{"line":30,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":72}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":76}},"11":{"start":{"line":17,"column":0},"end":{"line":62,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":61,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":6}},"14":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"15":{"start":{"line":27,"column":6},"end":{"line":27,"column":12}},"16":{"start":{"line":30,"column":4},"end":{"line":57,"column":5}},"17":{"start":{"line":31,"column":6},"end":{"line":56,"column":8}},"18":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"19":{"start":{"line":34,"column":10},"end":{"line":34,"column":22}},"20":{"start":{"line":37,"column":8},"end":{"line":37,"column":52}},"21":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"22":{"start":{"line":40,"column":10},"end":{"line":40,"column":16}},"23":{"start":{"line":43,"column":8},"end":{"line":43,"column":94}},"24":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"25":{"start":{"line":46,"column":10},"end":{"line":46,"column":16}},"26":{"start":{"line":49,"column":8},"end":{"line":55,"column":10}},"27":{"start":{"line":59,"column":4},"end":{"line":59,"column":90}},"28":{"start":{"line":59,"column":43},"end":{"line":59,"column":89}},"29":{"start":{"line":60,"column":4},"end":{"line":60,"column":74}},"30":{"start":{"line":60,"column":27},"end":{"line":60,"column":73}},"31":{"start":{"line":64,"column":0},"end":{"line":64,"column":24}},"32":{"start":{"line":65,"column":0},"end":{"line":65,"column":24}},"33":{"start":{"line":66,"column":0},"end":{"line":66,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"3":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":41}},{"start":{"line":33,"column":45},"end":{"line":33,"column":84}}]},"4":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":8}},{"start":{"line":39,"column":8},"end":{"line":39,"column":8}}]},"5":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":55},"end":{"line":43,"column":73}},{"start":{"line":43,"column":76},"end":{"line":43,"column":94}}]},"6":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const getUnitFromValueNode = require(\"../../utils/getUnitFromValueNode\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"unit-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","const rule = function (expectation) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    })","    if (!validOptions) {","      return","    }","","    function check(node, value, getIndex) {","      valueParser(value).walk(valueNode => {","        // Ignore wrong units within `url` function","        if (valueNode.type === \"function\" && valueNode.value.toLowerCase() === \"url\") {","          return false","        }","","        const unit = getUnitFromValueNode(valueNode)","","        if (!unit) {","          return","        }","","        const expectedUnit = expectation === \"lower\" ? unit.toLowerCase() : unit.toUpperCase()","","        if (unit === expectedUnit) {","          return","        }","","        report({","          index: getIndex(node) + valueNode.sourceIndex,","          message: messages.expected(unit, expectedUnit),","          node,","          result,","          ruleName,","        })","      })","    }","","    root.walkAtRules(/^media$/i, atRule => check(atRule, atRule.params, atRuleParamIndex))","    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex))","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"18":0,"19":0,"26":0,"27":0,"30":1,"31":0,"33":0,"34":0,"37":0,"39":0,"40":0,"43":0,"45":0,"46":0,"49":0,"59":0,"60":0,"64":1,"65":1,"66":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/unit-no-unknown/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/unit-no-unknown/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":1,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":40}}},"2":{"name":"check","line":34,"loc":{"start":{"line":34,"column":4},"end":{"line":34,"column":42}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":30},"end":{"line":35,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":72}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":58}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":34}},"12":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"13":{"start":{"line":17,"column":20},"end":{"line":17,"column":55}},"14":{"start":{"line":20,"column":0},"end":{"line":67,"column":1}},"15":{"start":{"line":21,"column":2},"end":{"line":66,"column":3}},"16":{"start":{"line":22,"column":4},"end":{"line":28,"column":6}},"17":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"18":{"start":{"line":31,"column":6},"end":{"line":31,"column":12}},"19":{"start":{"line":34,"column":4},"end":{"line":62,"column":5}},"20":{"start":{"line":35,"column":6},"end":{"line":61,"column":8}},"21":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"22":{"start":{"line":38,"column":10},"end":{"line":38,"column":22}},"23":{"start":{"line":41,"column":8},"end":{"line":41,"column":52}},"24":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"25":{"start":{"line":43,"column":10},"end":{"line":43,"column":16}},"26":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"27":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"28":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"29":{"start":{"line":51,"column":10},"end":{"line":51,"column":16}},"30":{"start":{"line":54,"column":8},"end":{"line":60,"column":10}},"31":{"start":{"line":64,"column":4},"end":{"line":64,"column":90}},"32":{"start":{"line":64,"column":43},"end":{"line":64,"column":89}},"33":{"start":{"line":65,"column":4},"end":{"line":65,"column":74}},"34":{"start":{"line":65,"column":27},"end":{"line":65,"column":73}},"35":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"36":{"start":{"line":70,"column":0},"end":{"line":70,"column":24}},"37":{"start":{"line":71,"column":0},"end":{"line":71,"column":21}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"3":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":41}},{"start":{"line":37,"column":45},"end":{"line":37,"column":84}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"6":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const getUnitFromValueNode = require(\"../../utils/getUnitFromValueNode\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const keywordSets = require(\"../../reference/keywordSets\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"unit-no-unknown\"","","const messages = ruleMessages(ruleName, {","  rejected: unit => `Unexpected unknown unit \"${unit}\"`,","})","","const rule = function (actual, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual }, {","      actual: options,","      possible: {","        ignoreUnits: [_.isString],","      },","      optional: true,","    })","","    if (!validOptions) {","      return","    }","","    function check(node, value, getIndex) {","      valueParser(value).walk(function (valueNode) {","        // Ignore wrong units within `url` function","        if (valueNode.type === \"function\" && valueNode.value.toLowerCase() === \"url\") {","          return false","        }","","        const unit = getUnitFromValueNode(valueNode)","        if (!unit) {","          return","        }","","        if (optionsMatches(options, \"ignoreUnits\", unit)) {","          return","        }","","        if (keywordSets.units.has(unit.toLowerCase())) {","          return","        }","","        report({","          index: getIndex(node) + valueNode.sourceIndex,","          message: messages.rejected(unit),","          node,","          result,","          ruleName,","        })","      })","    }","","    root.walkAtRules(/^media$/i, atRule => check(atRule, atRule.params, atRuleParamIndex))","    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex))","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"20":1,"21":0,"22":0,"30":0,"31":0,"34":1,"35":0,"37":0,"38":0,"41":0,"42":0,"43":0,"46":0,"47":0,"50":0,"51":0,"54":0,"64":0,"65":0,"69":1,"70":1,"71":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/unit-whitelist/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/unit-whitelist/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":1,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":13},"end":{"line":20,"column":48}}},"2":{"name":"check","line":37,"loc":{"start":{"line":37,"column":4},"end":{"line":37,"column":42}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":30},"end":{"line":38,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":72}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":62}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":100}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":33}},"12":{"start":{"line":16,"column":0},"end":{"line":18,"column":2}},"13":{"start":{"line":17,"column":20},"end":{"line":17,"column":47}},"14":{"start":{"line":20,"column":0},"end":{"line":67,"column":1}},"15":{"start":{"line":21,"column":2},"end":{"line":21,"column":45}},"16":{"start":{"line":22,"column":2},"end":{"line":66,"column":3}},"17":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"18":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"19":{"start":{"line":34,"column":6},"end":{"line":34,"column":12}},"20":{"start":{"line":37,"column":4},"end":{"line":62,"column":5}},"21":{"start":{"line":38,"column":6},"end":{"line":61,"column":8}},"22":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"23":{"start":{"line":41,"column":10},"end":{"line":41,"column":22}},"24":{"start":{"line":44,"column":8},"end":{"line":44,"column":52}},"25":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"26":{"start":{"line":47,"column":10},"end":{"line":47,"column":16}},"27":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"28":{"start":{"line":51,"column":10},"end":{"line":51,"column":16}},"29":{"start":{"line":54,"column":8},"end":{"line":60,"column":10}},"30":{"start":{"line":64,"column":4},"end":{"line":64,"column":90}},"31":{"start":{"line":64,"column":43},"end":{"line":64,"column":89}},"32":{"start":{"line":65,"column":4},"end":{"line":65,"column":74}},"33":{"start":{"line":65,"column":27},"end":{"line":65,"column":73}},"34":{"start":{"line":69,"column":0},"end":{"line":69,"column":30}},"35":{"start":{"line":71,"column":0},"end":{"line":71,"column":24}},"36":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}},"37":{"start":{"line":73,"column":0},"end":{"line":73,"column":21}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"3":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":12},"end":{"line":40,"column":41}},{"start":{"line":40,"column":45},"end":{"line":40,"column":84}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"5":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":17}},{"start":{"line":46,"column":21},"end":{"line":46,"column":25}},{"start":{"line":46,"column":29},"end":{"line":46,"column":73}}]},"6":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"7":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":19}},{"start":{"line":50,"column":23},"end":{"line":50,"column":97}}]}},"code":["\"use strict\"","","const atRuleParamIndex = require(\"../../utils/atRuleParamIndex\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const getUnitFromValueNode = require(\"../../utils/getUnitFromValueNode\")","const optionsMatches = require(\"../../utils/optionsMatches\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const validateObjectWithStringArrayProps = require(\"../../utils/validateObjectWithStringArrayProps\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"unit-whitelist\"","","const messages = ruleMessages(ruleName, {","  rejected: unit => `Unexpected unit \"${unit}\"`,","})","","const rule = function (whitelistInput, options) {","  const whitelist = [].concat(whitelistInput)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: whitelist,","      possible: [_.isString],","    }, {","      optional: true,","      actual: options,","      possible: {","        ignoreProperties: validateObjectWithStringArrayProps,","      },","    })","    if (!validOptions) {","      return","    }","","    function check(node, value, getIndex) {","      valueParser(value).walk(function (valueNode) {","        // Ignore wrong units within `url` function","        if (valueNode.type === \"function\" && valueNode.value.toLowerCase() === \"url\") {","          return false","        }","","        const unit = getUnitFromValueNode(valueNode)","","        if (!unit || unit && whitelist.indexOf(unit.toLowerCase()) !== -1) {","          return","        }","","        if (options && optionsMatches(options[\"ignoreProperties\"], unit.toLowerCase(), node.prop)) {","          return","        }","","        report({","          index: getIndex(node) + valueNode.sourceIndex,","          message: messages.rejected(unit),","          node,","          result,","          ruleName,","        })","      })","    }","","    root.walkAtRules(/^media$/i, atRule => check(atRule, atRule.params, atRuleParamIndex))","    root.walkDecls(decl => check(decl, decl.value, declarationValueIndex))","  }","}","","rule.primaryOptionArray = true","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"14":1,"16":1,"17":0,"20":1,"21":0,"22":0,"23":0,"33":0,"34":0,"37":1,"38":0,"40":0,"41":0,"44":0,"46":0,"47":0,"50":0,"51":0,"54":0,"64":0,"65":0,"69":1,"71":1,"72":1,"73":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-keyword-case/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-keyword-case/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":1,"17":1,"18":1,"19":11,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":1,"73":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0,0],"5":[0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0],"28":[0,0],"29":[0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":36,"loc":{"start":{"line":36,"column":13},"end":{"line":36,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":58}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":72}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":100}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":92}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":74}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":74}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":44}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":56}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":27}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":51}},"13":{"start":{"line":16,"column":0},"end":{"line":16,"column":37}},"14":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"15":{"start":{"line":19,"column":34},"end":{"line":19,"column":76}},"16":{"start":{"line":23,"column":0},"end":{"line":29,"column":2}},"17":{"start":{"line":31,"column":0},"end":{"line":31,"column":49}},"18":{"start":{"line":32,"column":0},"end":{"line":34,"column":2}},"19":{"start":{"line":33,"column":2},"end":{"line":33,"column":63}},"20":{"start":{"line":36,"column":0},"end":{"line":144,"column":1}},"21":{"start":{"line":37,"column":2},"end":{"line":143,"column":3}},"22":{"start":{"line":38,"column":4},"end":{"line":50,"column":6}},"23":{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},"24":{"start":{"line":52,"column":6},"end":{"line":52,"column":12}},"25":{"start":{"line":55,"column":4},"end":{"line":142,"column":6}},"26":{"start":{"line":56,"column":6},"end":{"line":57,"column":26}},"27":{"start":{"line":59,"column":6},"end":{"line":141,"column":8}},"28":{"start":{"line":60,"column":8},"end":{"line":60,"column":55}},"29":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"30":{"start":{"line":64,"column":10},"end":{"line":64,"column":16}},"31":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"32":{"start":{"line":69,"column":10},"end":{"line":69,"column":22}},"33":{"start":{"line":72,"column":8},"end":{"line":72,"column":34}},"34":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"35":{"start":{"line":76,"column":10},"end":{"line":76,"column":16}},"36":{"start":{"line":79,"column":8},"end":{"line":81,"column":9}},"37":{"start":{"line":80,"column":10},"end":{"line":80,"column":16}},"38":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"39":{"start":{"line":83,"column":10},"end":{"line":83,"column":16}},"40":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"41":{"start":{"line":86,"column":10},"end":{"line":86,"column":16}},"42":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"43":{"start":{"line":89,"column":10},"end":{"line":89,"column":16}},"44":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"45":{"start":{"line":92,"column":10},"end":{"line":92,"column":16}},"46":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"47":{"start":{"line":95,"column":10},"end":{"line":95,"column":16}},"48":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"49":{"start":{"line":98,"column":10},"end":{"line":98,"column":16}},"50":{"start":{"line":100,"column":8},"end":{"line":102,"column":9}},"51":{"start":{"line":101,"column":10},"end":{"line":101,"column":16}},"52":{"start":{"line":103,"column":8},"end":{"line":105,"column":9}},"53":{"start":{"line":104,"column":10},"end":{"line":104,"column":16}},"54":{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},"55":{"start":{"line":107,"column":10},"end":{"line":107,"column":16}},"56":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"57":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"58":{"start":{"line":113,"column":8},"end":{"line":113,"column":70}},"59":{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},"60":{"start":{"line":116,"column":10},"end":{"line":116,"column":16}},"61":{"start":{"line":119,"column":8},"end":{"line":119,"column":60}},"62":{"start":{"line":120,"column":8},"end":{"line":120,"column":34}},"63":{"start":{"line":122,"column":8},"end":{"line":128,"column":9}},"64":{"start":{"line":123,"column":10},"end":{"line":123,"column":81}},"65":{"start":{"line":124,"column":15},"end":{"line":128,"column":9}},"66":{"start":{"line":125,"column":10},"end":{"line":125,"column":49}},"67":{"start":{"line":127,"column":10},"end":{"line":127,"column":49}},"68":{"start":{"line":130,"column":8},"end":{"line":132,"column":9}},"69":{"start":{"line":131,"column":10},"end":{"line":131,"column":16}},"70":{"start":{"line":134,"column":8},"end":{"line":140,"column":10}},"71":{"start":{"line":146,"column":0},"end":{"line":146,"column":24}},"72":{"start":{"line":147,"column":0},"end":{"line":147,"column":24}},"73":{"start":{"line":148,"column":0},"end":{"line":148,"column":21}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"2":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"3":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"4":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":36}},{"start":{"line":68,"column":41},"end":{"line":68,"column":65}},{"start":{"line":68,"column":69},"end":{"line":68,"column":93}},{"start":{"line":68,"column":97},"end":{"line":68,"column":125}},{"start":{"line":68,"column":129},"end":{"line":68,"column":158}},{"start":{"line":68,"column":162},"end":{"line":68,"column":187}}]},"5":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":75,"column":8}},{"start":{"line":75,"column":8},"end":{"line":75,"column":8}}]},"6":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":12},"end":{"line":75,"column":32}},{"start":{"line":75,"column":36},"end":{"line":75,"column":70}},{"start":{"line":75,"column":74},"end":{"line":75,"column":99}},{"start":{"line":75,"column":103},"end":{"line":75,"column":133}},{"start":{"line":75,"column":137},"end":{"line":75,"column":163}}]},"7":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]},"8":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":32}},{"start":{"line":79,"column":36},"end":{"line":79,"column":95}},{"start":{"line":79,"column":99},"end":{"line":79,"column":153}}]},"9":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"10":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":12},"end":{"line":82,"column":37}},{"start":{"line":82,"column":41},"end":{"line":82,"column":95}}]},"11":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":8}},{"start":{"line":85,"column":8},"end":{"line":85,"column":8}}]},"12":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":12},"end":{"line":85,"column":27}},{"start":{"line":85,"column":31},"end":{"line":85,"column":85}},{"start":{"line":85,"column":89},"end":{"line":85,"column":140}}]},"13":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":8}},{"start":{"line":88,"column":8},"end":{"line":88,"column":8}}]},"14":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":12},"end":{"line":88,"column":34}},{"start":{"line":88,"column":38},"end":{"line":88,"column":89}}]},"15":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":91,"column":8}},{"start":{"line":91,"column":8},"end":{"line":91,"column":8}}]},"16":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":12},"end":{"line":91,"column":40}},{"start":{"line":91,"column":44},"end":{"line":91,"column":94}}]},"17":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"18":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":36}},{"start":{"line":94,"column":40},"end":{"line":94,"column":86}}]},"19":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":8}},{"start":{"line":97,"column":8},"end":{"line":97,"column":8}}]},"20":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":12},"end":{"line":97,"column":31}},{"start":{"line":97,"column":35},"end":{"line":97,"column":83}}]},"21":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":8},"end":{"line":100,"column":8}},{"start":{"line":100,"column":8},"end":{"line":100,"column":8}}]},"22":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":12},"end":{"line":100,"column":34}},{"start":{"line":100,"column":38},"end":{"line":100,"column":89}}]},"23":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":8},"end":{"line":103,"column":8}},{"start":{"line":103,"column":8},"end":{"line":103,"column":8}}]},"24":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":12},"end":{"line":103,"column":32}},{"start":{"line":103,"column":36},"end":{"line":103,"column":85}}]},"25":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":8}},{"start":{"line":106,"column":8},"end":{"line":106,"column":8}}]},"26":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":12},"end":{"line":106,"column":33}},{"start":{"line":106,"column":37},"end":{"line":106,"column":96}},{"start":{"line":106,"column":100},"end":{"line":106,"column":154}}]},"27":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":8}},{"start":{"line":109,"column":8},"end":{"line":109,"column":8}}]},"28":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":12},"end":{"line":109,"column":38}},{"start":{"line":109,"column":42},"end":{"line":109,"column":96}}]},"29":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":31},"end":{"line":113,"column":38}},{"start":{"line":113,"column":42},"end":{"line":113,"column":64}},{"start":{"line":113,"column":68},"end":{"line":113,"column":70}}]},"30":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"31":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":37}},{"start":{"line":115,"column":41},"end":{"line":115,"column":87}}]},"32":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":122,"column":8}},{"start":{"line":122,"column":8},"end":{"line":122,"column":8}}]},"33":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":35}},{"start":{"line":122,"column":39},"end":{"line":122,"column":92}}]},"34":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":15},"end":{"line":124,"column":15}},{"start":{"line":124,"column":15},"end":{"line":124,"column":15}}]},"35":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":8}},{"start":{"line":130,"column":8},"end":{"line":130,"column":8}}]}},"code":["\"use strict\"","","const keywordSets = require(\"../../reference/keywordSets\")","const declarationValueIndex = require(\"../../utils/declarationValueIndex\")","const getUnitFromValueNode = require(\"../../utils/getUnitFromValueNode\")","const isCounterIncrementCustomIdentValue = require(\"../../utils/isCounterIncrementCustomIdentValue\")","const isCounterResetCustomIdentValue = require(\"../../utils/isCounterResetCustomIdentValue\")","const isStandardSyntaxValue = require(\"../../utils/isStandardSyntaxValue\")","const matchesStringOrRegExp = require(\"../../utils/matchesStringOrRegExp\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const _ = require(\"lodash\")","const valueParser = require(\"postcss-value-parser\")","","const ruleName = \"value-keyword-case\"","","const messages = ruleMessages(ruleName, {","  expected: (actual, expected) => `Expected \"${actual}\" to be \"${expected}\"`,","})","","// Operators are interpreted as \"words\" by the value parser, so we want to make sure to ignore them.","const ignoredCharacters = new Set([","  \"+\",","  \"-\",","  \"/\",","  \"*\",","  \"%\",","])","","const mapLowercaseKeywordsToCamelCase = new Map()","keywordSets.camelCaseKeywords.forEach(func => {","  mapLowercaseKeywordsToCamelCase.set(func.toLowerCase(), func)","})","","const rule = function (expectation, options) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"lower\",","        \"upper\",","      ],","    }, {","      actual: options,","      possible: {","        ignoreKeywords: [_.isString],","      },","      optional: true,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const prop = decl.prop,","        value = decl.value","","      valueParser(value).walk(node => {","        const valueLowerCase = node.value.toLowerCase()","","        // Ignore system colors","        if (keywordSets.systemColors.has(valueLowerCase)) {","          return","        }","","        // Ignore keywords within `url` and `var` function","        if (node.type === \"function\" && (valueLowerCase === \"url\" || valueLowerCase === \"var\" || valueLowerCase === \"counter\" || valueLowerCase === \"counters\" || valueLowerCase === \"attr\")) {","          return false","        }","","        const keyword = node.value","","        // Ignore css variables, and hex values, and math operators, and sass interpolation","        if (node.type !== \"word\" || !isStandardSyntaxValue(node.value) || value.indexOf(\"#\") !== -1 || ignoredCharacters.has(keyword) || getUnitFromValueNode(node)) {","          return","        }","","        if (prop === \"animation\" && !keywordSets.animationShorthandKeywords.has(valueLowerCase) && !keywordSets.animationNameKeywords.has(valueLowerCase)) {","          return","        }","        if (prop === \"animation-name\" && !keywordSets.animationNameKeywords.has(valueLowerCase)) {","          return","        }","        if (prop === \"font\" && !keywordSets.fontShorthandKeywords.has(valueLowerCase) && !keywordSets.fontFamilyKeywords.has(valueLowerCase)) {","          return","        }","        if (prop === \"font-family\" && !keywordSets.fontFamilyKeywords.has(valueLowerCase)) {","          return","        }","        if (prop === \"counter-increment\" && isCounterIncrementCustomIdentValue(valueLowerCase)) {","          return","        }","        if (prop === \"counter-reset\" && isCounterResetCustomIdentValue(valueLowerCase)) {","          return","        }","        if (prop === \"grid-row\" && !keywordSets.gridRowKeywords.has(valueLowerCase)) {","          return","        }","        if (prop === \"grid-column\" && !keywordSets.gridColumnKeywords.has(valueLowerCase)) {","          return","        }","        if (prop === \"grid-area\" && !keywordSets.gridAreaKeywords.has(valueLowerCase)) {","          return","        }","        if (prop === \"list-style\" && !keywordSets.listStyleShorthandKeywords.has(valueLowerCase) && !keywordSets.listStyleTypeKeywords.has(valueLowerCase)) {","          return","        }","        if (prop === \"list-style-type\" && !keywordSets.listStyleTypeKeywords.has(valueLowerCase)) {","          return","        }","","        const ignoreKeywords = options && options.ignoreKeywords || []","","        if (ignoreKeywords.length > 0 && matchesStringOrRegExp(keyword, ignoreKeywords)) {","          return","        }","","        const keywordLowerCase = keyword.toLocaleLowerCase()","        let expectedKeyword = null","","        if (expectation === \"lower\" && mapLowercaseKeywordsToCamelCase.has(keywordLowerCase)) {","          expectedKeyword = mapLowercaseKeywordsToCamelCase.get(keywordLowerCase)","        } else if (expectation === \"lower\") {","          expectedKeyword = keyword.toLowerCase()","        } else {","          expectedKeyword = keyword.toUpperCase()","        }","","        if (keyword === expectedKeyword) {","          return","        }","","        report({","          message: messages.expected(keyword, expectedKeyword),","          node: decl,","          index: declarationValueIndex(decl) + node.sourceIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"16":1,"18":1,"19":0,"23":1,"31":1,"32":1,"33":11,"36":1,"37":0,"38":0,"51":0,"52":0,"55":0,"56":0,"59":0,"60":0,"63":0,"64":0,"68":0,"69":0,"72":0,"75":0,"76":0,"79":0,"80":0,"82":0,"83":0,"85":0,"86":0,"88":0,"89":0,"91":0,"92":0,"94":0,"95":0,"97":0,"98":0,"100":0,"101":0,"103":0,"104":0,"106":0,"107":0,"109":0,"110":0,"113":0,"115":0,"116":0,"119":0,"120":0,"122":0,"123":0,"124":0,"125":0,"127":0,"130":0,"131":0,"134":0,"146":1,"147":1,"148":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCounterIncrementCustomIdentValue.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCounterIncrementCustomIdentValue.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":59}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":55}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"3":{"start":{"line":11,"column":0},"end":{"line":19,"column":1}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":44}},"5":{"start":{"line":14,"column":2},"end":{"line":16,"column":3}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":16}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":13}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":6},"end":{"line":14,"column":62}},{"start":{"line":14,"column":66},"end":{"line":14,"column":102}}]}},"code":["/* @flow */","\"use strict\"","","const keywordSets = require(\"../reference/keywordSets\")","const _ = require(\"lodash\")","","/**"," * Check value is a custom ident"," */","","module.exports = function (value/*: string*/)/*: boolean*/ {","  const valueLowerCase = value.toLowerCase()","","  if (keywordSets.counterIncrementKeywords.has(valueLowerCase) || _.isFinite(parseInt(valueLowerCase))) {","    return false","  }","","  return true","}",""],"l":{"4":1,"5":1,"11":1,"12":0,"14":0,"15":0,"18":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCounterResetCustomIdentValue.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/isCounterResetCustomIdentValue.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":59}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":55}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"3":{"start":{"line":11,"column":0},"end":{"line":19,"column":1}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":44}},"5":{"start":{"line":14,"column":2},"end":{"line":16,"column":3}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":16}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":13}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":6},"end":{"line":14,"column":58}},{"start":{"line":14,"column":62},"end":{"line":14,"column":98}}]}},"code":["/* @flow */","\"use strict\"","","const keywordSets = require(\"../reference/keywordSets\")","const _ = require(\"lodash\")","","/**"," * Check value is a custom ident"," */","","module.exports = function (value/*: string*/)/*: boolean*/ {","  const valueLowerCase = value.toLowerCase()","","  if (keywordSets.counterResetKeywords.has(valueLowerCase) || _.isFinite(parseInt(valueLowerCase))) {","    return false","  }","","  return true","}",""],"l":{"4":1,"5":1,"11":1,"12":0,"14":0,"15":0,"18":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-comma-newline-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-comma-newline-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":85}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"6":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":53}},"8":{"start":{"line":12,"column":32},"end":{"line":12,"column":83}},"9":{"start":{"line":13,"column":32},"end":{"line":13,"column":88}},"10":{"start":{"line":16,"column":0},"end":{"line":38,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":69}},"12":{"start":{"line":18,"column":2},"end":{"line":37,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":26,"column":6}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":31,"column":4},"end":{"line":36,"column":6}},"17":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":24}},"19":{"start":{"line":42,"column":0},"end":{"line":42,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const valueListCommaWhitespaceChecker = require(\"../valueListCommaWhitespaceChecker\")","","const ruleName = \"value-list-comma-newline-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected newline after \\\",\\\"\",","  expectedAfterMultiLine: () => \"Expected newline after \\\",\\\" in a multi-line list\",","  rejectedAfterMultiLine: () => \"Unexpected whitespace after \\\",\\\" in a multi-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    valueListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.afterOneOnly,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"16":1,"17":0,"18":0,"19":0,"27":0,"28":0,"31":0,"40":1,"41":1,"42":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/valueListCommaWhitespaceChecker.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/valueListCommaWhitespaceChecker.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":33}}},"2":{"name":"checkComma","line":22,"loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":83}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":77}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":8,"column":0},"end":{"line":37,"column":1}},"6":{"start":{"line":9,"column":2},"end":{"line":20,"column":4}},"7":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"8":{"start":{"line":11,"column":6},"end":{"line":11,"column":12}},"9":{"start":{"line":13,"column":4},"end":{"line":19,"column":6}},"10":{"start":{"line":18,"column":6},"end":{"line":18,"column":57}},"11":{"start":{"line":22,"column":2},"end":{"line":36,"column":3}},"12":{"start":{"line":23,"column":4},"end":{"line":35,"column":6}},"13":{"start":{"line":27,"column":8},"end":{"line":33,"column":10}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":4}},{"start":{"line":10,"column":4},"end":{"line":10,"column":4}}]},"2":{"line":10,"type":"binary-expr","locations":[{"start":{"line":10,"column":8},"end":{"line":10,"column":42}},{"start":{"line":10,"column":46},"end":{"line":10,"column":82}}]}},"code":["\"use strict\"","","const isStandardSyntaxDeclaration = require(\"../utils/isStandardSyntaxDeclaration\")","const isStandardSyntaxProperty = require(\"../utils/isStandardSyntaxProperty\")","const report = require(\"../utils/report\")","const styleSearch = require(\"style-search\")","","module.exports = function (opts) {","  opts.root.walkDecls(decl => {","    if (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop)) {","      return","    }","    styleSearch({","      source: decl.toString(),","      target: \",\",","      functionArguments: \"skip\",","    }, match => {","      checkComma(decl.toString(), match.startIndex, decl)","    })","  })","","  function checkComma(source, index, node) {","    opts.locationChecker({","      source,","      index,","      err: m => {","        report({","          message: m,","          node,","          index,","          result: opts.result,","          ruleName: opts.checkedRuleName,","        })","      },","    })","  }","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":0,"10":0,"11":0,"13":0,"18":0,"22":1,"23":0,"27":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-comma-newline-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-comma-newline-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":13},"end":{"line":16,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":85}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"6":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":55}},"8":{"start":{"line":12,"column":33},"end":{"line":12,"column":85}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":90}},"10":{"start":{"line":16,"column":0},"end":{"line":38,"column":1}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":69}},"12":{"start":{"line":18,"column":2},"end":{"line":37,"column":3}},"13":{"start":{"line":19,"column":4},"end":{"line":26,"column":6}},"14":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"16":{"start":{"line":31,"column":4},"end":{"line":36,"column":6}},"17":{"start":{"line":40,"column":0},"end":{"line":40,"column":24}},"18":{"start":{"line":41,"column":0},"end":{"line":41,"column":24}},"19":{"start":{"line":42,"column":0},"end":{"line":42,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const valueListCommaWhitespaceChecker = require(\"../valueListCommaWhitespaceChecker\")","","const ruleName = \"value-list-comma-newline-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected newline before \\\",\\\"\",","  expectedBeforeMultiLine: () => \"Expected newline before \\\",\\\" in a multi-line list\",","  rejectedBeforeMultiLine: () => \"Unexpected whitespace before \\\",\\\" in a multi-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"newline\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"always-multi-line\",","        \"never-multi-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    valueListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.beforeAllowingIndentation,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"16":1,"17":0,"18":0,"19":0,"27":0,"28":0,"31":0,"40":1,"41":1,"42":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-comma-space-after/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-comma-space-after/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":85}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":47}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":11,"column":23},"end":{"line":11,"column":58}},"8":{"start":{"line":12,"column":23},"end":{"line":12,"column":58}},"9":{"start":{"line":13,"column":33},"end":{"line":13,"column":90}},"10":{"start":{"line":14,"column":33},"end":{"line":14,"column":90}},"11":{"start":{"line":17,"column":0},"end":{"line":40,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":33,"column":4},"end":{"line":38,"column":6}},"18":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const valueListCommaWhitespaceChecker = require(\"../valueListCommaWhitespaceChecker\")","","const ruleName = \"value-list-comma-space-after\"","","const messages = ruleMessages(ruleName, {","  expectedAfter: () => \"Expected single space after \\\",\\\"\",","  rejectedAfter: () => \"Unexpected whitespace after \\\",\\\"\",","  expectedAfterSingleLine: () => \"Expected single space after \\\",\\\" in a single-line list\",","  rejectedAfterSingleLine: () => \"Unexpected whitespace after \\\",\\\" in a single-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    valueListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.after,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"29":0,"30":0,"33":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-comma-space-before/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-comma-space-before/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":85}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"6":{"start":{"line":10,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":11,"column":24},"end":{"line":11,"column":60}},"8":{"start":{"line":12,"column":24},"end":{"line":12,"column":60}},"9":{"start":{"line":13,"column":34},"end":{"line":13,"column":92}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":92}},"11":{"start":{"line":17,"column":0},"end":{"line":40,"column":1}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":20,"column":4},"end":{"line":28,"column":6}},"15":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":30,"column":12}},"17":{"start":{"line":33,"column":4},"end":{"line":38,"column":6}},"18":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}},"19":{"start":{"line":43,"column":0},"end":{"line":43,"column":24}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":21}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]}},"code":["\"use strict\"","","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const whitespaceChecker = require(\"../../utils/whitespaceChecker\")","const valueListCommaWhitespaceChecker = require(\"../valueListCommaWhitespaceChecker\")","","const ruleName = \"value-list-comma-space-before\"","","const messages = ruleMessages(ruleName, {","  expectedBefore: () => \"Expected single space before \\\",\\\"\",","  rejectedBefore: () => \"Unexpected whitespace before \\\",\\\"\",","  expectedBeforeSingleLine: () => \"Unexpected whitespace before \\\",\\\" in a single-line list\",","  rejectedBeforeSingleLine: () => \"Unexpected whitespace before \\\",\\\" in a single-line list\",","})","","const rule = function (expectation) {","  const checker = whitespaceChecker(\"space\", expectation, messages)","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: expectation,","      possible: [","        \"always\",","        \"never\",","        \"always-single-line\",","        \"never-single-line\",","      ],","    })","    if (!validOptions) {","      return","    }","","    valueListCommaWhitespaceChecker({","      root,","      result,","      locationChecker: checker.before,","      checkedRuleName: ruleName,","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"10":1,"11":0,"12":0,"13":0,"14":0,"17":1,"18":0,"19":0,"20":0,"29":0,"30":0,"33":0,"42":1,"43":1,"44":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-max-empty-lines/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-list-max-empty-lines/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":12,"column":19},"end":{"line":12,"column":63}},"9":{"start":{"line":15,"column":0},"end":{"line":51,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":37}},"11":{"start":{"line":18,"column":2},"end":{"line":50,"column":3}},"12":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"13":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"14":{"start":{"line":24,"column":6},"end":{"line":24,"column":12}},"15":{"start":{"line":27,"column":4},"end":{"line":49,"column":6}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":30}},"17":{"start":{"line":29,"column":6},"end":{"line":29,"column":66}},"18":{"start":{"line":30,"column":6},"end":{"line":30,"column":70}},"19":{"start":{"line":32,"column":6},"end":{"line":48,"column":8}},"20":{"start":{"line":33,"column":8},"end":{"line":47,"column":9}},"21":{"start":{"line":35,"column":10},"end":{"line":35,"column":38}},"22":{"start":{"line":36,"column":10},"end":{"line":38,"column":11}},"23":{"start":{"line":37,"column":12},"end":{"line":37,"column":22}},"24":{"start":{"line":40,"column":10},"end":{"line":46,"column":12}},"25":{"start":{"line":53,"column":0},"end":{"line":53,"column":24}},"26":{"start":{"line":54,"column":0},"end":{"line":54,"column":24}},"27":{"start":{"line":55,"column":0},"end":{"line":55,"column":21}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"3":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":88}},{"start":{"line":33,"column":92},"end":{"line":33,"column":174}}]},"4":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":10},"end":{"line":36,"column":10}},{"start":{"line":36,"column":10},"end":{"line":36,"column":10}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"value-list-max-empty-lines\"","","const messages = ruleMessages(ruleName, {","  expected: max => `Expected no more than ${max} empty line(s)`,","})","","const rule = function (max) {","  const maxAdjacentNewlines = max + 1","","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, {","      actual: max,","      possible: _.isNumber,","    })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      const value = decl.value","      const repeatLFNewLines = _.repeat(\"\\n\", maxAdjacentNewlines)","      const repeatCRLFNewLines = _.repeat(\"\\r\\n\", maxAdjacentNewlines)","","      styleSearch({ source: value, target: \"\\n\" }, match => {","        if (value.substr(match.startIndex + 1, maxAdjacentNewlines) === repeatLFNewLines || value.substr(match.startIndex + 1, maxAdjacentNewlines * 2) === repeatCRLFNewLines) {","          // Put index at `\\r` if it's CRLF, otherwise leave it at `\\n`","          let index = match.startIndex","          if (value[index - 1] === \"\\r\") {","            index -= 1","          }","","          report({","            message: messages.expected(max),","            node: decl,","            index,","            result,","            ruleName,","          })","        }","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"11":1,"12":0,"15":1,"16":0,"18":0,"19":0,"23":0,"24":0,"27":0,"28":0,"29":0,"30":0,"32":0,"33":0,"35":0,"36":0,"37":0,"40":0,"53":1,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-no-vendor-prefix/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/rules/value-no-vendor-prefix/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":13},"end":{"line":24,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":86}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}},"9":{"start":{"line":13,"column":0},"end":{"line":15,"column":2}},"10":{"start":{"line":14,"column":21},"end":{"line":14,"column":58}},"11":{"start":{"line":17,"column":0},"end":{"line":22,"column":1}},"12":{"start":{"line":24,"column":0},"end":{"line":57,"column":1}},"13":{"start":{"line":25,"column":2},"end":{"line":56,"column":3}},"14":{"start":{"line":26,"column":4},"end":{"line":26,"column":70}},"15":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"16":{"start":{"line":28,"column":6},"end":{"line":28,"column":12}},"17":{"start":{"line":31,"column":4},"end":{"line":55,"column":6}},"18":{"start":{"line":32,"column":6},"end":{"line":34,"column":7}},"19":{"start":{"line":33,"column":8},"end":{"line":33,"column":14}},"20":{"start":{"line":36,"column":6},"end":{"line":37,"column":26}},"21":{"start":{"line":41,"column":6},"end":{"line":54,"column":8}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":86}},"23":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"24":{"start":{"line":44,"column":10},"end":{"line":44,"column":16}},"25":{"start":{"line":47,"column":8},"end":{"line":53,"column":10}},"26":{"start":{"line":59,"column":0},"end":{"line":59,"column":24}},"27":{"start":{"line":60,"column":0},"end":{"line":60,"column":24}},"28":{"start":{"line":61,"column":0},"end":{"line":61,"column":21}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":10},"end":{"line":32,"column":44}},{"start":{"line":32,"column":48},"end":{"line":32,"column":84}},{"start":{"line":32,"column":88},"end":{"line":32,"column":109}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]},"5":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":32},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":55}}]}},"code":["\"use strict\"","","const isAutoprefixable = require(\"../../utils/isAutoprefixable\")","const isStandardSyntaxDeclaration = require(\"../../utils/isStandardSyntaxDeclaration\")","const isStandardSyntaxProperty = require(\"../../utils/isStandardSyntaxProperty\")","const report = require(\"../../utils/report\")","const ruleMessages = require(\"../../utils/ruleMessages\")","const validateOptions = require(\"../../utils/validateOptions\")","const styleSearch = require(\"style-search\")","","const ruleName = \"value-no-vendor-prefix\"","","const messages = ruleMessages(ruleName, {","  rejected: value => `Unexpected vendor-prefix \"${value}\"`,","})","","const valuePrefixes = [","  \"-webkit-\",","  \"-moz-\",","  \"-ms-\",","  \"-o-\",","]","","const rule = function (actual) {","  return (root, result) => {","    const validOptions = validateOptions(result, ruleName, { actual })","    if (!validOptions) {","      return","    }","","    root.walkDecls(decl => {","      if (!isStandardSyntaxDeclaration(decl) || !isStandardSyntaxProperty(decl.prop) || decl.value[0] !== \"-\") {","        return","      }","","      const prop = decl.prop,","        value = decl.value","","      // Search the full declaration in order to get an accurate index","","      styleSearch({ source: value.toLowerCase(), target: valuePrefixes }, match => {","        const fullIdentifier = /^(-[a-z-]+)\\b/i.exec(value.slice(match.startIndex))[1]","        if (!isAutoprefixable.propertyValue(prop, fullIdentifier)) {","          return","        }","","        report({","          message: messages.rejected(fullIdentifier),","          node: decl,","          index: prop.length + (decl.raws.between || \"\").length + match.startIndex,","          result,","          ruleName,","        })","      })","    })","  }","}","","rule.ruleName = ruleName","rule.messages = messages","module.exports = rule",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"14":0,"17":1,"24":1,"25":0,"26":0,"27":0,"28":0,"31":0,"32":0,"33":0,"36":0,"41":0,"42":0,"43":0,"44":0,"47":0,"59":1,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/createPlugin.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/createPlugin.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":3,"loc":{"start":{"line":3,"column":17},"end":{"line":3,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":8,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":7,"column":3}}},"branchMap":{},"code":["\"use strict\"","","module.exports = function (ruleName, rule) {","  return {","    ruleName,","    rule,","  }","}",""],"l":{"3":1,"4":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/testUtils/createRuleTester.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/testUtils/createRuleTester.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1,"94":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"checkCaseForOnly","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":46}}},"2":{"name":"(anonymous_2)","line":97,"loc":{"start":{"line":97,"column":17},"end":{"line":97,"column":42}}},"3":{"name":"(anonymous_3)","line":98,"loc":{"start":{"line":98,"column":9},"end":{"line":98,"column":33}}},"4":{"name":"processGroup","line":123,"loc":{"start":{"line":123,"column":0},"end":{"line":123,"column":51}}},"5":{"name":"createCaseDescription","line":135,"loc":{"start":{"line":135,"column":2},"end":{"line":135,"column":39}}},"6":{"name":"postcssProcess","line":144,"loc":{"start":{"line":144,"column":2},"end":{"line":144,"column":32}}},"7":{"name":"spaceJoin","line":257,"loc":{"start":{"line":257,"column":0},"end":{"line":257,"column":21}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":63}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":42}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":65}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":42}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"9":{"start":{"line":84,"column":0},"end":{"line":84,"column":12}},"10":{"start":{"line":86,"column":0},"end":{"line":95,"column":1}},"11":{"start":{"line":87,"column":2},"end":{"line":89,"column":3}},"12":{"start":{"line":88,"column":4},"end":{"line":88,"column":10}},"13":{"start":{"line":91,"column":2},"end":{"line":93,"column":3},"skip":true},"14":{"start":{"line":92,"column":4},"end":{"line":92,"column":63},"skip":true},"15":{"start":{"line":94,"column":2},"end":{"line":94,"column":47}},"16":{"start":{"line":97,"column":0},"end":{"line":121,"column":1}},"17":{"start":{"line":98,"column":2},"end":{"line":120,"column":3}},"18":{"start":{"line":99,"column":4},"end":{"line":99,"column":41}},"19":{"start":{"line":100,"column":4},"end":{"line":102,"column":5}},"20":{"start":{"line":101,"column":6},"end":{"line":101,"column":66}},"21":{"start":{"line":104,"column":4},"end":{"line":106,"column":5}},"22":{"start":{"line":105,"column":6},"end":{"line":105,"column":66}},"23":{"start":{"line":108,"column":4},"end":{"line":113,"column":5}},"24":{"start":{"line":109,"column":6},"end":{"line":112,"column":8}},"25":{"start":{"line":115,"column":4},"end":{"line":119,"column":5}},"26":{"start":{"line":116,"column":6},"end":{"line":118,"column":8}},"27":{"start":{"line":117,"column":8},"end":{"line":117,"column":49}},"28":{"start":{"line":123,"column":0},"end":{"line":255,"column":1}},"29":{"start":{"line":124,"column":2},"end":{"line":124,"column":34}},"30":{"start":{"line":126,"column":2},"end":{"line":126,"column":68}},"31":{"start":{"line":127,"column":2},"end":{"line":127,"column":43}},"32":{"start":{"line":128,"column":2},"end":{"line":128,"column":45}},"33":{"start":{"line":130,"column":2},"end":{"line":130,"column":84}},"34":{"start":{"line":131,"column":2},"end":{"line":133,"column":3}},"35":{"start":{"line":132,"column":4},"end":{"line":132,"column":66}},"36":{"start":{"line":135,"column":2},"end":{"line":140,"column":3}},"37":{"start":{"line":136,"column":4},"end":{"line":136,"column":40}},"38":{"start":{"line":137,"column":4},"end":{"line":137,"column":44}},"39":{"start":{"line":138,"column":4},"end":{"line":138,"column":47}},"40":{"start":{"line":139,"column":4},"end":{"line":139,"column":15}},"41":{"start":{"line":144,"column":2},"end":{"line":167,"column":3}},"42":{"start":{"line":145,"column":4},"end":{"line":145,"column":36}},"43":{"start":{"line":147,"column":4},"end":{"line":157,"column":5}},"44":{"start":{"line":149,"column":8},"end":{"line":149,"column":49}},"45":{"start":{"line":150,"column":8},"end":{"line":150,"column":13}},"46":{"start":{"line":152,"column":8},"end":{"line":152,"column":49}},"47":{"start":{"line":153,"column":8},"end":{"line":153,"column":13}},"48":{"start":{"line":155,"column":8},"end":{"line":155,"column":46}},"49":{"start":{"line":156,"column":8},"end":{"line":156,"column":13}},"50":{"start":{"line":159,"column":4},"end":{"line":159,"column":31}},"51":{"start":{"line":160,"column":4},"end":{"line":160,"column":39}},"52":{"start":{"line":162,"column":4},"end":{"line":164,"column":5}},"53":{"start":{"line":163,"column":6},"end":{"line":163,"column":71}},"54":{"start":{"line":163,"column":49},"end":{"line":163,"column":70}},"55":{"start":{"line":166,"column":4},"end":{"line":166,"column":109}},"56":{"start":{"line":171,"column":2},"end":{"line":171,"column":101}},"57":{"start":{"line":173,"column":2},"end":{"line":194,"column":3}},"58":{"start":{"line":174,"column":4},"end":{"line":193,"column":6}},"59":{"start":{"line":175,"column":6},"end":{"line":177,"column":7}},"60":{"start":{"line":176,"column":8},"end":{"line":176,"column":14}},"61":{"start":{"line":178,"column":6},"end":{"line":178,"column":92}},"62":{"start":{"line":179,"column":6},"end":{"line":186,"column":45}},"63":{"start":{"line":180,"column":8},"end":{"line":180,"column":49}},"64":{"start":{"line":181,"column":8},"end":{"line":185,"column":10}},"65":{"start":{"line":186,"column":22},"end":{"line":186,"column":44}},"66":{"start":{"line":188,"column":6},"end":{"line":192,"column":8}},"67":{"start":{"line":196,"column":2},"end":{"line":254,"column":3}},"68":{"start":{"line":197,"column":4},"end":{"line":253,"column":6}},"69":{"start":{"line":198,"column":6},"end":{"line":198,"column":70}},"70":{"start":{"line":199,"column":6},"end":{"line":199,"column":29}},"71":{"start":{"line":200,"column":6},"end":{"line":203,"column":7}},"72":{"start":{"line":201,"column":8},"end":{"line":201,"column":25}},"73":{"start":{"line":202,"column":8},"end":{"line":202,"column":71}},"74":{"start":{"line":204,"column":6},"end":{"line":207,"column":7}},"75":{"start":{"line":205,"column":8},"end":{"line":205,"column":25}},"76":{"start":{"line":206,"column":8},"end":{"line":206,"column":75}},"77":{"start":{"line":208,"column":6},"end":{"line":211,"column":7}},"78":{"start":{"line":209,"column":8},"end":{"line":209,"column":25}},"79":{"start":{"line":210,"column":8},"end":{"line":210,"column":81}},"80":{"start":{"line":213,"column":6},"end":{"line":245,"column":45}},"81":{"start":{"line":214,"column":8},"end":{"line":214,"column":49}},"82":{"start":{"line":215,"column":8},"end":{"line":215,"column":35}},"83":{"start":{"line":217,"column":8},"end":{"line":221,"column":10}},"84":{"start":{"line":223,"column":8},"end":{"line":229,"column":9}},"85":{"start":{"line":224,"column":10},"end":{"line":228,"column":12}},"86":{"start":{"line":230,"column":8},"end":{"line":236,"column":9}},"87":{"start":{"line":231,"column":10},"end":{"line":235,"column":12}},"88":{"start":{"line":237,"column":8},"end":{"line":243,"column":9}},"89":{"start":{"line":238,"column":10},"end":{"line":242,"column":12}},"90":{"start":{"line":244,"column":8},"end":{"line":244,"column":26}},"91":{"start":{"line":245,"column":22},"end":{"line":245,"column":44}},"92":{"start":{"line":247,"column":6},"end":{"line":252,"column":8}},"93":{"start":{"line":257,"column":0},"end":{"line":259,"column":1}},"94":{"start":{"line":258,"column":2},"end":{"line":258,"column":51}}},"branchMap":{"1":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]},"2":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":2},"end":{"line":91,"column":2},"skip":true},{"start":{"line":91,"column":2},"end":{"line":91,"column":2},"skip":true}]},"3":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"4":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":104,"column":4}},{"start":{"line":104,"column":4},"end":{"line":104,"column":4}}]},"5":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"6":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":4},"end":{"line":115,"column":4}},{"start":{"line":115,"column":4},"end":{"line":115,"column":4}}]},"7":{"line":130,"type":"cond-expr","locations":[{"start":{"line":130,"column":45},"end":{"line":130,"column":79}},{"start":{"line":130,"column":82},"end":{"line":130,"column":84}}]},"8":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":2},"end":{"line":131,"column":2}},{"start":{"line":131,"column":2},"end":{"line":131,"column":2}}]},"9":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":6},"end":{"line":131,"column":21}},{"start":{"line":131,"column":25},"end":{"line":131,"column":45}}]},"10":{"line":147,"type":"switch","locations":[{"start":{"line":148,"column":6},"end":{"line":150,"column":13}},{"start":{"line":151,"column":6},"end":{"line":153,"column":13}},{"start":{"line":154,"column":6},"end":{"line":156,"column":13}}]},"11":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":4},"end":{"line":162,"column":4}},{"start":{"line":162,"column":4},"end":{"line":162,"column":4}}]},"12":{"line":171,"type":"cond-expr","locations":[{"start":{"line":171,"column":52},"end":{"line":171,"column":65}},{"start":{"line":171,"column":68},"end":{"line":171,"column":101}}]},"13":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":2},"end":{"line":173,"column":2}},{"start":{"line":173,"column":2},"end":{"line":173,"column":2}}]},"14":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":6},"end":{"line":173,"column":22}},{"start":{"line":173,"column":26},"end":{"line":173,"column":49}}]},"15":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":6},"end":{"line":175,"column":6}},{"start":{"line":175,"column":6},"end":{"line":175,"column":6}}]},"16":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":2},"end":{"line":196,"column":2}},{"start":{"line":196,"column":2},"end":{"line":196,"column":2}}]},"17":{"line":196,"type":"binary-expr","locations":[{"start":{"line":196,"column":6},"end":{"line":196,"column":19}},{"start":{"line":196,"column":23},"end":{"line":196,"column":43}}]},"18":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":6},"end":{"line":200,"column":6}},{"start":{"line":200,"column":6},"end":{"line":200,"column":6}}]},"19":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":6},"end":{"line":204,"column":6}},{"start":{"line":204,"column":6},"end":{"line":204,"column":6}}]},"20":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":6},"end":{"line":208,"column":6}},{"start":{"line":208,"column":6},"end":{"line":208,"column":6}}]},"21":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":223,"column":8}},{"start":{"line":223,"column":8},"end":{"line":223,"column":8}}]},"22":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":8},"end":{"line":230,"column":8}},{"start":{"line":230,"column":8},"end":{"line":230,"column":8}}]},"23":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":8},"end":{"line":237,"column":8}},{"start":{"line":237,"column":8},"end":{"line":237,"column":8}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const assignDisabledRanges = require(\"../assignDisabledRanges\")","const basicChecks = require(\"./basicChecks\")","const lessSyntax = require(\"postcss-less\")","const normalizeRuleSettings = require(\"../normalizeRuleSettings\")","const postcss = require(\"postcss\")","const scssSyntax = require(\"postcss-scss\")","const sugarss = require(\"sugarss\")","","/**"," * Create a stylelint rule testing function."," *"," * Pass in an `equalityCheck` function. Given some information,"," * this checker should use Whatever Test Runner to perform"," * equality checks."," *"," * `equalityCheck` should accept two arguments:"," * - `processCss` {Promise}: A Promise that resolves with an array of"," *   comparisons that you need to check (documented below)."," * - `context` {object}: An object that contains additional information"," *   you may need:"," *   - `caseDescription` {string}: A description of the test case as a whole."," *   \t Will look like this:"," *   \t   > rule: value-list-comma-space-before"," *   \t   > config: \"always-single-line\""," *   \t   > code: \"a { background-size: 0 ,0;\\n}\""," *   - `comparisonCount` {number}: The number of comparisons that"," *     will need to be performed (e.g. useful for tape)."," *   - `completeAssertionDescription` {string}: While each individual"," *   \t comparison may have its own description, this is a description"," *   \t of the whole assertion (e.g. useful for Mocha)."," *   - `only` {boolean}: If `true`, the test runner should only run this"," *     test case (e.g. `test.only` in tape, `describe.only` in Mocha)."," *"," * `processCss` is a Promsie that resolves with an array of comparisons."," * Each comparison has the following properties:"," * - `actual` {any}: Some actual value."," * - `expected` {any}: Some expected value."," * - `description` {string}: A (possibly empty) description of the comparison."," *"," * Within `equalityCheck`, you need to ensure that you:"," * - Set up the test case."," * - When `processCss` resolves, loop through every comparison."," * - For each comparison, make an assertion checking that `actual === expected`."," *"," * The `testRule` function that you get has a simple signature:"," * `testRule(rule, testGroupDescription)`."," *"," * `rule` is just the rule that you are testing (a function)."," *"," * `testGroupDescription` is an object fitting the following schema."," *"," * Required properties:"," * - `ruleName` {string}: The name of the rule. Used in descriptions."," * - `config` {any}: The rule's configuration for this test group."," *   Should match the format you'd use in `.stylelintrc`."," * - `accept` {array}: An array of objects describing test cases that"," *   should not violate the rule. Each object has these properties:"," *   - `code` {string}: The source CSS to check."," *   - `description` {[string]}: An optional description of the case."," * - `reject` {array}: An array of objects describing test cases that"," *   should violate the rule once. Each object has these properties:"," *   - `code` {string}: The source CSS to check."," *   - `message` {string}: The message of the expected violation."," *   - `line` {[number]}: The expected line number of the violation."," *     If this is left out, the line won't be checked."," *   - `column` {[number]}: The expected column number of the violation."," *     If this is left out, the column won't be checked."," *   - `description` {[string]}: An optional description of the case."," *"," * Optional properties:"," * - `syntax` {\"css\"|\"scss\"|\"less\"|\"sugarss\"}: Defaults to `\"css\"`."," * - `skipBasicChecks` {boolean}: Defaults to `false`. If `true`, a"," *   few rudimentary checks (that should almost always be included)"," *   will not be performed."," * - `preceedingPlugins` {array}: An array of PostCSS plugins that"," *   should be run before the CSS is tested."," *"," * @param {function} equalityCheck - Described above"," * @return {function} testRule - Decsribed above"," */","let onlyTest","","function checkCaseForOnly(caseType, testCase) {","  if (!testCase.only) {","    return","  }","  /* istanbul ignore next */","  if (onlyTest) {","    throw new Error(\"Cannot use `only` on multiple test cases\")","  }","  onlyTest = { case: testCase, type: caseType }","}","","module.exports = function (equalityCheck) {","  return function (rule, schema) {","    const alreadyHadOnlyTest = !!onlyTest","    if (schema.accept) {","      schema.accept.forEach(_.partial(checkCaseForOnly, \"accept\"))","    }","","    if (schema.reject) {","      schema.reject.forEach(_.partial(checkCaseForOnly, \"reject\"))","    }","","    if (onlyTest) {","      schema = _.assign(_.omit(schema, [ \"accept\", \"reject\" ]), {","        skipBasicChecks: true,","        [onlyTest.type]: [onlyTest.case],","      })","    }","","    if (!alreadyHadOnlyTest) {","      process.nextTick(() => {","        processGroup(rule, schema, equalityCheck)","      })","    }","  }","}","","function processGroup(rule, schema, equalityCheck) {","  const ruleName = schema.ruleName","","  const ruleOptions = normalizeRuleSettings(schema.config, ruleName)","  const rulePrimaryOptions = ruleOptions[0]","  const ruleSecondaryOptions = ruleOptions[1]","","  let printableConfig = rulePrimaryOptions ? JSON.stringify(rulePrimaryOptions) : \"\"","  if (printableConfig && ruleSecondaryOptions) {","    printableConfig += \", \" + JSON.stringify(ruleSecondaryOptions)","  }","","  function createCaseDescription(code) {","    let text = `\\n> rule: ${ruleName}\\n`","    text += `> config: ${printableConfig}\\n`","    text += `> code: ${JSON.stringify(code)}\\n`","    return text","  }","","  // Process the code through the rule and return","  // the PostCSS LazyResult promise","  function postcssProcess(code) {","    const postcssProcessOptions = {}","","    switch (schema.syntax) {","      case \"scss\":","        postcssProcessOptions.syntax = scssSyntax","        break","      case \"less\":","        postcssProcessOptions.syntax = lessSyntax","        break","      case \"sugarss\":","        postcssProcessOptions.syntax = sugarss","        break","    }","","    const processor = postcss()","    processor.use(assignDisabledRanges)","","    if (schema.preceedingPlugins) {","      schema.preceedingPlugins.forEach(plugin => processor.use(plugin))","    }","","    return processor.use(rule(rulePrimaryOptions, ruleSecondaryOptions)).process(code, postcssProcessOptions)","  }","","  // Apply the basic positive checks unless","  // explicitly told not to","  const passingTestCases = schema.skipBasicChecks ? schema.accept : basicChecks.concat(schema.accept)","","  if (passingTestCases && passingTestCases.length) {","    passingTestCases.forEach(acceptedCase => {","      if (!acceptedCase) {","        return","      }","      const assertionDescription = spaceJoin(acceptedCase.description, \"should be accepted\")","      const resultPromise = postcssProcess(acceptedCase.code).then(postcssResult => {","        const warnings = postcssResult.warnings()","        return [{","          expected: 0,","          actual: warnings.length,","          description: assertionDescription,","        }]","      }).catch(err => console.log(err.stack)) // eslint-disable-line no-console","","      equalityCheck(resultPromise, {","        comparisonCount: 1,","        caseDescription: createCaseDescription(acceptedCase.code),","        completeAssertionDescription: assertionDescription,","      })","    })","  }","","  if (schema.reject && schema.reject.length) {","    schema.reject.forEach(rejectedCase => {","      let completeAssertionDescription = \"should register one warning\"","      let comparisonCount = 1","      if (rejectedCase.line) {","        comparisonCount++","        completeAssertionDescription += ` on line ${rejectedCase.line}`","      }","      if (rejectedCase.column !== undefined) {","        comparisonCount++","        completeAssertionDescription += ` on column ${rejectedCase.column}`","      }","      if (rejectedCase.message) {","        comparisonCount++","        completeAssertionDescription += ` with message \"${rejectedCase.message}\"`","      }","","      const resultPromise = postcssProcess(rejectedCase.code).then(postcssResult => {","        const warnings = postcssResult.warnings()","        const warning = warnings[0]","","        const comparisons = [{","          expected: 1,","          actual: warnings.length,","          description: spaceJoin(rejectedCase.description, \"should register one warning\"),","        }]","","        if (rejectedCase.line) {","          comparisons.push({","            expected: rejectedCase.line,","            actual: _.get(warning, \"line\"),","            description: spaceJoin(rejectedCase.description, `should warn on line ${rejectedCase.line}`),","          })","        }","        if (rejectedCase.column !== undefined) {","          comparisons.push({","            expected: rejectedCase.column,","            actual: _.get(warning, \"column\"),","            description: spaceJoin(rejectedCase.description, `should warn on column ${rejectedCase.column}`),","          })","        }","        if (rejectedCase.message) {","          comparisons.push({","            expected: rejectedCase.message,","            actual: _.get(warning, \"text\"),","            description: spaceJoin(rejectedCase.description, `should warn with message ${rejectedCase.message}`),","          })","        }","        return comparisons","      }).catch(err => console.log(err.stack)) // eslint-disable-line no-console","","      equalityCheck(resultPromise, {","        comparisonCount,","        completeAssertionDescription,","        caseDescription: createCaseDescription(rejectedCase.code),","        only: rejectedCase.only,","      })","    })","  }","}","","function spaceJoin() {","  return _.compact(Array.from(arguments)).join(\" \")","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"84":1,"86":1,"87":0,"88":0,"91":1,"92":1,"94":0,"97":1,"98":0,"99":0,"100":0,"101":0,"104":0,"105":0,"108":0,"109":0,"115":0,"116":0,"117":0,"123":1,"124":0,"126":0,"127":0,"128":0,"130":0,"131":0,"132":0,"135":1,"136":0,"137":0,"138":0,"139":0,"144":1,"145":0,"147":0,"149":0,"150":0,"152":0,"153":0,"155":0,"156":0,"159":0,"160":0,"162":0,"163":0,"166":0,"171":0,"173":0,"174":0,"175":0,"176":0,"178":0,"179":0,"180":0,"181":0,"186":0,"188":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"204":0,"205":0,"206":0,"208":0,"209":0,"210":0,"213":0,"214":0,"215":0,"217":0,"223":0,"224":0,"230":0,"231":0,"237":0,"238":0,"244":0,"245":0,"247":0,"257":1,"258":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/assignDisabledRanges.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/assignDisabledRanges.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":23,"column":22}}},"2":{"name":"processDisableLineCommand","line":36,"loc":{"start":{"line":36,"column":2},"end":{"line":36,"column":67}}},"3":{"name":"processDisableNextLineCommand","line":42,"loc":{"start":{"line":42,"column":2},"end":{"line":42,"column":71}}},"4":{"name":"disableLine","line":48,"loc":{"start":{"line":48,"column":2},"end":{"line":52,"column":4}}},"5":{"name":"processDisableCommand","line":70,"loc":{"start":{"line":70,"column":2},"end":{"line":70,"column":63}}},"6":{"name":"processEnableCommand","line":89,"loc":{"start":{"line":89,"column":2},"end":{"line":89,"column":62}}},"7":{"name":"checkComment","line":123,"loc":{"start":{"line":123,"column":2},"end":{"line":123,"column":54}}},"8":{"name":"getCommandRules","line":143,"loc":{"start":{"line":143,"column":2},"end":{"line":146,"column":23}}},"9":{"name":"startDisabledRange","line":154,"loc":{"start":{"line":154,"column":2},"end":{"line":154,"column":70}}},"10":{"name":"endDisabledRange","line":160,"loc":{"start":{"line":160,"column":2},"end":{"line":160,"column":68}}},"11":{"name":"ensureRuleRanges","line":169,"loc":{"start":{"line":169,"column":2},"end":{"line":169,"column":50}}},"12":{"name":"ruleIsDisabled","line":175,"loc":{"start":{"line":175,"column":2},"end":{"line":175,"column":61}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":47}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":67}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":23}},"8":{"start":{"line":20,"column":0},"end":{"line":181,"column":1}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":43}},"10":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"11":{"start":{"line":31,"column":2},"end":{"line":31,"column":50}},"12":{"start":{"line":32,"column":2},"end":{"line":32,"column":33}},"13":{"start":{"line":34,"column":2},"end":{"line":34,"column":15}},"14":{"start":{"line":36,"column":2},"end":{"line":40,"column":3}},"15":{"start":{"line":37,"column":4},"end":{"line":39,"column":6}},"16":{"start":{"line":38,"column":6},"end":{"line":38,"column":63}},"17":{"start":{"line":42,"column":2},"end":{"line":46,"column":3}},"18":{"start":{"line":43,"column":4},"end":{"line":45,"column":6}},"19":{"start":{"line":44,"column":6},"end":{"line":44,"column":67}},"20":{"start":{"line":48,"column":2},"end":{"line":68,"column":3}},"21":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"22":{"start":{"line":54,"column":6},"end":{"line":54,"column":90}},"23":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"24":{"start":{"line":57,"column":6},"end":{"line":57,"column":93}},"25":{"start":{"line":59,"column":4},"end":{"line":67,"column":5}},"26":{"start":{"line":60,"column":6},"end":{"line":63,"column":8}},"27":{"start":{"line":61,"column":8},"end":{"line":61,"column":50}},"28":{"start":{"line":62,"column":8},"end":{"line":62,"column":48}},"29":{"start":{"line":65,"column":6},"end":{"line":65,"column":40}},"30":{"start":{"line":66,"column":6},"end":{"line":66,"column":38}},"31":{"start":{"line":70,"column":2},"end":{"line":87,"column":3}},"32":{"start":{"line":71,"column":4},"end":{"line":86,"column":6}},"33":{"start":{"line":72,"column":6},"end":{"line":80,"column":7}},"34":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"35":{"start":{"line":74,"column":10},"end":{"line":74,"column":94}},"36":{"start":{"line":76,"column":8},"end":{"line":78,"column":10}},"37":{"start":{"line":77,"column":10},"end":{"line":77,"column":65}},"38":{"start":{"line":79,"column":8},"end":{"line":79,"column":14}},"39":{"start":{"line":82,"column":6},"end":{"line":84,"column":7}},"40":{"start":{"line":83,"column":8},"end":{"line":83,"column":100}},"41":{"start":{"line":85,"column":6},"end":{"line":85,"column":66}},"42":{"start":{"line":89,"column":2},"end":{"line":121,"column":3}},"43":{"start":{"line":90,"column":4},"end":{"line":120,"column":6}},"44":{"start":{"line":91,"column":6},"end":{"line":101,"column":7}},"45":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"46":{"start":{"line":92,"column":53},"end":{"line":92,"column":94}},"47":{"start":{"line":93,"column":10},"end":{"line":93,"column":85}},"48":{"start":{"line":95,"column":8},"end":{"line":99,"column":10}},"49":{"start":{"line":96,"column":10},"end":{"line":98,"column":11}},"50":{"start":{"line":97,"column":12},"end":{"line":97,"column":63}},"51":{"start":{"line":100,"column":8},"end":{"line":100,"column":14}},"52":{"start":{"line":103,"column":6},"end":{"line":112,"column":7}},"53":{"start":{"line":105,"column":8},"end":{"line":109,"column":9}},"54":{"start":{"line":106,"column":10},"end":{"line":106,"column":72}},"55":{"start":{"line":108,"column":10},"end":{"line":108,"column":87}},"56":{"start":{"line":110,"column":8},"end":{"line":110,"column":63}},"57":{"start":{"line":111,"column":8},"end":{"line":111,"column":14}},"58":{"start":{"line":114,"column":6},"end":{"line":117,"column":7}},"59":{"start":{"line":115,"column":8},"end":{"line":115,"column":63}},"60":{"start":{"line":116,"column":8},"end":{"line":116,"column":14}},"61":{"start":{"line":119,"column":6},"end":{"line":119,"column":93}},"62":{"start":{"line":123,"column":2},"end":{"line":141,"column":3}},"63":{"start":{"line":124,"column":4},"end":{"line":124,"column":29}},"64":{"start":{"line":128,"column":4},"end":{"line":130,"column":5}},"65":{"start":{"line":129,"column":6},"end":{"line":129,"column":19}},"66":{"start":{"line":132,"column":4},"end":{"line":140,"column":5}},"67":{"start":{"line":133,"column":6},"end":{"line":133,"column":40}},"68":{"start":{"line":134,"column":11},"end":{"line":140,"column":5}},"69":{"start":{"line":135,"column":6},"end":{"line":135,"column":44}},"70":{"start":{"line":136,"column":11},"end":{"line":140,"column":5}},"71":{"start":{"line":137,"column":6},"end":{"line":137,"column":36}},"72":{"start":{"line":138,"column":11},"end":{"line":140,"column":5}},"73":{"start":{"line":139,"column":6},"end":{"line":139,"column":35}},"74":{"start":{"line":143,"column":2},"end":{"line":152,"column":3}},"75":{"start":{"line":147,"column":4},"end":{"line":147,"column":89}},"76":{"start":{"line":147,"column":80},"end":{"line":147,"column":88}},"77":{"start":{"line":148,"column":4},"end":{"line":150,"column":5}},"78":{"start":{"line":149,"column":6},"end":{"line":149,"column":24}},"79":{"start":{"line":151,"column":4},"end":{"line":151,"column":16}},"80":{"start":{"line":154,"column":2},"end":{"line":158,"column":3}},"81":{"start":{"line":155,"column":4},"end":{"line":155,"column":36}},"82":{"start":{"line":156,"column":4},"end":{"line":156,"column":30}},"83":{"start":{"line":157,"column":4},"end":{"line":157,"column":43}},"84":{"start":{"line":160,"column":2},"end":{"line":167,"column":3}},"85":{"start":{"line":161,"column":4},"end":{"line":161,"column":61}},"86":{"start":{"line":162,"column":4},"end":{"line":164,"column":5}},"87":{"start":{"line":163,"column":6},"end":{"line":163,"column":12}},"88":{"start":{"line":166,"column":4},"end":{"line":166,"column":31}},"89":{"start":{"line":169,"column":2},"end":{"line":173,"column":3}},"90":{"start":{"line":170,"column":4},"end":{"line":172,"column":5}},"91":{"start":{"line":171,"column":6},"end":{"line":171,"column":64}},"92":{"start":{"line":175,"column":2},"end":{"line":180,"column":3}},"93":{"start":{"line":176,"column":4},"end":{"line":176,"column":60}},"94":{"start":{"line":176,"column":48},"end":{"line":176,"column":60}},"95":{"start":{"line":177,"column":4},"end":{"line":177,"column":68}},"96":{"start":{"line":177,"column":56},"end":{"line":177,"column":68}},"97":{"start":{"line":178,"column":4},"end":{"line":178,"column":81}},"98":{"start":{"line":178,"column":70},"end":{"line":178,"column":81}},"99":{"start":{"line":179,"column":4},"end":{"line":179,"column":16}}},"branchMap":{"1":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":21},"end":{"line":24,"column":37}},{"start":{"line":24,"column":41},"end":{"line":24,"column":43}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"3":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"5":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":6},"end":{"line":72,"column":6}},{"start":{"line":72,"column":6},"end":{"line":72,"column":6}}]},"6":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]},"7":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":6},"end":{"line":82,"column":6}},{"start":{"line":82,"column":6},"end":{"line":82,"column":6}}]},"8":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":6},"end":{"line":91,"column":6}},{"start":{"line":91,"column":6},"end":{"line":91,"column":6}}]},"9":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]},"10":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":53},"end":{"line":92,"column":70}},{"start":{"line":92,"column":74},"end":{"line":92,"column":94}}]},"11":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":10},"end":{"line":96,"column":10}},{"start":{"line":96,"column":10},"end":{"line":96,"column":10}}]},"12":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":6},"end":{"line":103,"column":6}},{"start":{"line":103,"column":6},"end":{"line":103,"column":6}}]},"13":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":10},"end":{"line":103,"column":35}},{"start":{"line":103,"column":39},"end":{"line":103,"column":81}}]},"14":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":8}},{"start":{"line":105,"column":8},"end":{"line":105,"column":8}}]},"15":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]},"16":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"17":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":132,"column":4}},{"start":{"line":132,"column":4},"end":{"line":132,"column":4}}]},"18":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":11},"end":{"line":134,"column":11}},{"start":{"line":134,"column":11},"end":{"line":134,"column":11}}]},"19":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":11},"end":{"line":136,"column":11}},{"start":{"line":136,"column":11},"end":{"line":136,"column":11}}]},"20":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":11},"end":{"line":138,"column":11}},{"start":{"line":138,"column":11},"end":{"line":138,"column":11}}]},"21":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":4},"end":{"line":148,"column":4}},{"start":{"line":148,"column":4},"end":{"line":148,"column":4}}]},"22":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":4},"end":{"line":162,"column":4}},{"start":{"line":162,"column":4},"end":{"line":162,"column":4}}]},"23":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":4},"end":{"line":170,"column":4}},{"start":{"line":170,"column":4},"end":{"line":170,"column":4}}]},"24":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":4},"end":{"line":176,"column":4}},{"start":{"line":176,"column":4},"end":{"line":176,"column":4}}]},"25":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":177,"column":4}},{"start":{"line":177,"column":4},"end":{"line":177,"column":4}}]},"26":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":178,"column":4}},{"start":{"line":178,"column":4},"end":{"line":178,"column":4}}]}},"code":["/* @flow */","\"use strict\"","const _ = require(\"lodash\")","","const COMMAND_PREFIX = \"stylelint-\"","const disableCommand = COMMAND_PREFIX + \"disable\"","const enableCommand = COMMAND_PREFIX + \"enable\"","const disableLineCommand = COMMAND_PREFIX + \"disable-line\"","const disableNextLineCommand = COMMAND_PREFIX + \"disable-next-line\"","const ALL_RULES = \"all\"","","/*:: type disabledRangeObject = {","  [ruleName: string]: Array<{","    start: number,","    end?: number,","  }>","}*/","","// Run it like a plugin ...","module.exports = function (","  root/*: Object*/,","  result/*: Object*/",")/*: postcss$result*/ {","  result.stylelint = result.stylelint || {}","","  // Most of the functions below work via side effects mutating","  // this object","  const disabledRanges/*: disabledRangeObject*/ = {","    all: [],","  }","  result.stylelint.disabledRanges = disabledRanges","  root.walkComments(checkComment)","","  return result","","  function processDisableLineCommand(comment/*: postcss$comment*/) {","    getCommandRules(disableLineCommand, comment.text).forEach(ruleName => {","      disableLine(comment.source.start.line, ruleName, comment)","    })","  }","","  function processDisableNextLineCommand(comment/*: postcss$comment*/) {","    getCommandRules(disableNextLineCommand, comment.text).forEach(ruleName => {","      disableLine(comment.source.start.line + 1, ruleName, comment)","    })","  }","","  function disableLine(","    line/*: number*/,","    ruleName/*: string*/,","    comment/*: postcss$comment*/","  ) {","    if (ruleIsDisabled(ALL_RULES)) {","      throw comment.error(\"All rules have already been disabled\", { plugin: \"stylelint\" })","    }","    if (ruleIsDisabled(ruleName)) {","      throw comment.error(`\"${ruleName}\" has already been disabled`, { plugin: \"stylelint\" })","    }","    if (ruleName === ALL_RULES) {","      Object.keys(disabledRanges).forEach(disabledRuleName => {","        startDisabledRange(line, disabledRuleName)","        endDisabledRange(line, disabledRuleName)","      })","    } else {","      startDisabledRange(line, ruleName)","      endDisabledRange(line, ruleName)","    }","  }","","  function processDisableCommand(comment/*: postcss$comment*/) {","    getCommandRules(disableCommand, comment.text).forEach(ruleToDisable => {","      if (ruleToDisable === ALL_RULES) {","        if (ruleIsDisabled(ALL_RULES)) {","          throw comment.error(\"All rules have already been disabled\", { plugin: \"stylelint\" })","        }","        Object.keys(disabledRanges).forEach(ruleName => {","          startDisabledRange(comment.source.start.line, ruleName)","        })","        return","      }","","      if (ruleIsDisabled(ruleToDisable)) {","        throw comment.error(`\"${ruleToDisable}\" has already been disabled`, { plugin: \"stylelint\" })","      }","      startDisabledRange(comment.source.start.line, ruleToDisable)","    })","  }","","  function processEnableCommand(comment/*: postcss$comment*/) {","    getCommandRules(enableCommand, comment.text).forEach(ruleToEnable => {","      if (ruleToEnable === ALL_RULES) {","        if (_.values(disabledRanges).every(ranges => _.isEmpty(ranges) || !!_.last(ranges.end))) {","          throw comment.error(\"No rules have been disabled\", { plugin: \"stylelint\" })","        }","        Object.keys(disabledRanges).forEach(ruleName => {","          if (!_.get(_.last(disabledRanges[ruleName]), \"end\")) {","            endDisabledRange(comment.source.end.line, ruleName)","          }","        })","        return","      }","","      if (ruleIsDisabled(ALL_RULES) && disabledRanges[ruleToEnable] === undefined) {","        // Get a starting point from the where all rules were disabled","        if (!disabledRanges[ruleToEnable]) {","          disabledRanges[ruleToEnable] = _.cloneDeep(disabledRanges.all)","        } else {","          disabledRanges[ruleToEnable].push(_.clone(_.last(disabledRanges[ALL_RULES])))","        }","        endDisabledRange(comment.source.end.line, ruleToEnable)","        return","      }","","      if (ruleIsDisabled(ruleToEnable)) {","        endDisabledRange(comment.source.end.line, ruleToEnable)","        return","      }","","      throw comment.error(`\"${ruleToEnable}\" has not been disabled`, { plugin: \"stylelint\" })","    })","  }","","  function checkComment(comment/*: postcss$comment*/) {","    const text = comment.text","","    // Ignore comments that are not relevant commands","","    if (text.indexOf(COMMAND_PREFIX) !== 0) {","      return result","    }","","    if (text.indexOf(disableLineCommand) === 0) {","      processDisableLineCommand(comment)","    } else if (text.indexOf(disableNextLineCommand) === 0) {","      processDisableNextLineCommand(comment)","    } else if (text.indexOf(disableCommand) === 0) {","      processDisableCommand(comment)","    } else if (text.indexOf(enableCommand) === 0) {","      processEnableCommand(comment)","    }","  }","","  function getCommandRules(","    command/*: string*/,","    fullText/*: string*/","  )/*: Array<string>*/ {","    const rules = _.compact(fullText.slice(command.length).split(\",\")).map(r => r.trim())","    if (_.isEmpty(rules)) {","      return [ALL_RULES]","    }","    return rules","  }","","  function startDisabledRange(line/*: number*/, ruleName/*: string*/) {","    const rangeObj = { start: line }","    ensureRuleRanges(ruleName)","    disabledRanges[ruleName].push(rangeObj)","  }","","  function endDisabledRange(line/*: number*/, ruleName/*: string*/) {","    const lastRangeForRule = _.last(disabledRanges[ruleName])","    if (!lastRangeForRule) {","      return","    }","    // Add an `end` prop to the last range of that rule","    lastRangeForRule.end = line","  }","","  function ensureRuleRanges(ruleName/*: string*/) {","    if (!disabledRanges[ruleName]) {","      disabledRanges[ruleName] = _.cloneDeep(disabledRanges.all)","    }","  }","","  function ruleIsDisabled(ruleName/*: string*/)/*: boolean*/ {","    if (disabledRanges[ruleName] === undefined) return false","    if (_.last(disabledRanges[ruleName]) === undefined) return false","    if (_.get(_.last(disabledRanges[ruleName]), \"end\") === undefined) return true","    return false","  }","}",""],"l":{"3":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"20":1,"24":0,"28":0,"31":0,"32":0,"34":0,"36":1,"37":0,"38":0,"42":1,"43":0,"44":0,"48":1,"53":0,"54":0,"56":0,"57":0,"59":0,"60":0,"61":0,"62":0,"65":0,"66":0,"70":1,"71":0,"72":0,"73":0,"74":0,"76":0,"77":0,"79":0,"82":0,"83":0,"85":0,"89":1,"90":0,"91":0,"92":0,"93":0,"95":0,"96":0,"97":0,"100":0,"103":0,"105":0,"106":0,"108":0,"110":0,"111":0,"114":0,"115":0,"116":0,"119":0,"123":1,"124":0,"128":0,"129":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"143":1,"147":0,"148":0,"149":0,"151":0,"154":1,"155":0,"156":0,"157":0,"160":1,"161":0,"162":0,"163":0,"166":0,"169":1,"170":0,"171":0,"175":1,"176":0,"177":0,"178":0,"179":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/testUtils/basicChecks.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/testUtils/basicChecks.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":16,"column":3}}},"branchMap":{},"code":["\"use strict\"","","// These should pass for *almost* every rule","module.exports = [ {","  code: \"\",","  description: \"empty stylesheet\",","}, {","  code: \"a {}\",","  description: \"empty rule\",","}, {","  code: \"@import \\\"foo.css\\\";\",","  description: \"blockless statement\",","}, {","  code: \":global {}\",","  description: \"CSS Modules global empty rule set\",","} ]",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/createStylelint.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/createStylelint.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":86}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":42}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":64}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":54}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":54}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":48}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":42}},"9":{"start":{"line":15,"column":0},"end":{"line":41,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":25}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":53}},"12":{"start":{"line":21,"column":2},"end":{"line":25,"column":4}},"13":{"start":{"line":26,"column":2},"end":{"line":29,"column":4}},"14":{"start":{"line":31,"column":2},"end":{"line":31,"column":45}},"15":{"start":{"line":32,"column":2},"end":{"line":32,"column":43}},"16":{"start":{"line":33,"column":2},"end":{"line":33,"column":80}},"17":{"start":{"line":34,"column":2},"end":{"line":34,"column":70}},"18":{"start":{"line":35,"column":2},"end":{"line":35,"column":58}},"19":{"start":{"line":37,"column":2},"end":{"line":37,"column":69}},"20":{"start":{"line":38,"column":2},"end":{"line":38,"column":63}},"21":{"start":{"line":40,"column":2},"end":{"line":40,"column":18}}},"branchMap":{"1":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":12},"end":{"line":16,"column":19}},{"start":{"line":16,"column":23},"end":{"line":16,"column":25}}]}},"code":["/* @flow */","\"use strict\"","const augmentConfig = require(\"./augmentConfig\")","const _ = require(\"lodash\")","const cosmiconfig = require(\"cosmiconfig\")","const createStylelintResult = require(\"./createStylelintResult\")","const getConfigForFile = require(\"./getConfigForFile\")","const getPostcssResult = require(\"./getPostcssResult\")","const isPathIgnored = require(\"./isPathIgnored\")","const lintSource = require(\"./lintSource\")","","// The stylelint \"internal API\" is passed among functions","// so that methods on a stylelint instance can invoke","// each other while sharing options and caches","module.exports = function (options/*: stylelint$options*/)/*: stylelint$internalApi*/ {","  options = options || {}","  const stylelint/*: Object*/ = { _options: options }","","  // Two separate explorers so they can each have their own transform","  // function whose results are cached by cosmiconfig","  stylelint._fullExplorer = cosmiconfig(\"stylelint\", {","    argv: false,","    rcExtensions: true,","    transform: _.partial(augmentConfig.augmentConfigFull, stylelint),","  })","  stylelint._extendExplorer = cosmiconfig(null, {","    argv: false,","    transform: _.partial(augmentConfig.augmentConfigExtended, stylelint),","  })","","  stylelint._specifiedConfigCache = new Map()","  stylelint._postcssResultCache = new Map()","  stylelint._createStylelintResult = _.partial(createStylelintResult, stylelint)","  stylelint._getPostcssResult = _.partial(getPostcssResult, stylelint)","  stylelint._lintSource = _.partial(lintSource, stylelint)","","  stylelint.getConfigForFile = _.partial(getConfigForFile, stylelint)","  stylelint.isPathIgnored = _.partial(isPathIgnored, stylelint)","","  return stylelint","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"15":1,"16":0,"17":0,"21":0,"26":0,"31":0,"32":0,"33":0,"34":0,"35":0,"37":0,"38":0,"40":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/augmentConfig.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/augmentConfig.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":1,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":1,"136":1,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"augmentConfigBasic","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":24,"column":33}}},"2":{"name":"augmentConfigExtended","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":44,"column":65}}},"3":{"name":"augmentConfigFull","line":58,"loc":{"start":{"line":58,"column":0},"end":{"line":64,"column":64}}},"4":{"name":"addIgnorePatterns","line":95,"loc":{"start":{"line":95,"column":0},"end":{"line":98,"column":33}}},"5":{"name":"absolutizePaths","line":127,"loc":{"start":{"line":127,"column":0},"end":{"line":130,"column":24}}},"6":{"name":"absolutizeProcessors","line":153,"loc":{"start":{"line":153,"column":0},"end":{"line":156,"column":34}}},"7":{"name":"extendConfig","line":168,"loc":{"start":{"line":168,"column":0},"end":{"line":172,"column":33}}},"8":{"name":"loadExtendedConfig","line":191,"loc":{"start":{"line":191,"column":0},"end":{"line":196,"column":64}}},"9":{"name":"mergeConfigs","line":207,"loc":{"start":{"line":207,"column":0},"end":{"line":207,"column":94}}},"10":{"name":"addPluginFunctions","line":239,"loc":{"start":{"line":239,"column":0},"end":{"line":239,"column":80}}},"11":{"name":"normalizeAllRuleSettings","line":272,"loc":{"start":{"line":272,"column":0},"end":{"line":272,"column":86}}},"12":{"name":"addProcessorFunctions","line":298,"loc":{"start":{"line":298,"column":0},"end":{"line":298,"column":83}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":24}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":64}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":28}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":32}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":50}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":50}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":42}},"12":{"start":{"line":19,"column":0},"end":{"line":33,"column":1}},"13":{"start":{"line":25,"column":2},"end":{"line":32,"column":4}},"14":{"start":{"line":26,"column":4},"end":{"line":26,"column":38}},"15":{"start":{"line":26,"column":25},"end":{"line":26,"column":38}},"16":{"start":{"line":27,"column":4},"end":{"line":27,"column":62}},"17":{"start":{"line":29,"column":4},"end":{"line":29,"column":62}},"18":{"start":{"line":31,"column":4},"end":{"line":31,"column":54}},"19":{"start":{"line":38,"column":0},"end":{"line":56,"column":1}},"20":{"start":{"line":45,"column":2},"end":{"line":45,"column":48}},"21":{"start":{"line":46,"column":2},"end":{"line":46,"column":54}},"22":{"start":{"line":46,"column":26},"end":{"line":46,"column":54}},"23":{"start":{"line":48,"column":2},"end":{"line":48,"column":66}},"24":{"start":{"line":49,"column":2},"end":{"line":49,"column":71}},"25":{"start":{"line":50,"column":2},"end":{"line":55,"column":4}},"26":{"start":{"line":51,"column":4},"end":{"line":54,"column":5}},"27":{"start":{"line":58,"column":0},"end":{"line":91,"column":1}},"28":{"start":{"line":65,"column":2},"end":{"line":65,"column":48}},"29":{"start":{"line":66,"column":2},"end":{"line":66,"column":54}},"30":{"start":{"line":66,"column":26},"end":{"line":66,"column":54}},"31":{"start":{"line":68,"column":2},"end":{"line":69,"column":41}},"32":{"start":{"line":71,"column":2},"end":{"line":71,"column":84}},"33":{"start":{"line":73,"column":2},"end":{"line":90,"column":4}},"34":{"start":{"line":74,"column":4},"end":{"line":74,"column":56}},"35":{"start":{"line":76,"column":4},"end":{"line":76,"column":46}},"36":{"start":{"line":78,"column":4},"end":{"line":78,"column":49}},"37":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"38":{"start":{"line":81,"column":6},"end":{"line":81,"column":110}},"39":{"start":{"line":84,"column":4},"end":{"line":84,"column":52}},"40":{"start":{"line":86,"column":4},"end":{"line":89,"column":5}},"41":{"start":{"line":95,"column":0},"end":{"line":120,"column":1}},"42":{"start":{"line":99,"column":2},"end":{"line":99,"column":81}},"43":{"start":{"line":100,"column":2},"end":{"line":100,"column":127}},"44":{"start":{"line":102,"column":2},"end":{"line":119,"column":4}},"45":{"start":{"line":103,"column":4},"end":{"line":118,"column":6}},"46":{"start":{"line":104,"column":6},"end":{"line":111,"column":7}},"47":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"48":{"start":{"line":108,"column":10},"end":{"line":108,"column":32}},"49":{"start":{"line":110,"column":8},"end":{"line":110,"column":26}},"50":{"start":{"line":114,"column":6},"end":{"line":116,"column":8}},"51":{"start":{"line":117,"column":6},"end":{"line":117,"column":30}},"52":{"start":{"line":127,"column":0},"end":{"line":149,"column":1}},"53":{"start":{"line":131,"column":2},"end":{"line":136,"column":3}},"54":{"start":{"line":132,"column":4},"end":{"line":135,"column":6}},"55":{"start":{"line":133,"column":6},"end":{"line":133,"column":62}},"56":{"start":{"line":133,"column":51},"end":{"line":133,"column":62}},"57":{"start":{"line":134,"column":6},"end":{"line":134,"column":38}},"58":{"start":{"line":138,"column":2},"end":{"line":142,"column":3}},"59":{"start":{"line":139,"column":4},"end":{"line":141,"column":6}},"60":{"start":{"line":140,"column":6},"end":{"line":140,"column":45}},"61":{"start":{"line":144,"column":2},"end":{"line":146,"column":3}},"62":{"start":{"line":145,"column":4},"end":{"line":145,"column":74}},"63":{"start":{"line":148,"column":2},"end":{"line":148,"column":15}},"64":{"start":{"line":153,"column":0},"end":{"line":166,"column":1}},"65":{"start":{"line":157,"column":2},"end":{"line":157,"column":84}},"66":{"start":{"line":159,"column":2},"end":{"line":165,"column":4}},"67":{"start":{"line":160,"column":4},"end":{"line":162,"column":5}},"68":{"start":{"line":161,"column":6},"end":{"line":161,"column":43}},"69":{"start":{"line":164,"column":4},"end":{"line":164,"column":57}},"70":{"start":{"line":168,"column":0},"end":{"line":189,"column":1}},"71":{"start":{"line":173,"column":2},"end":{"line":173,"column":66}},"72":{"start":{"line":173,"column":36},"end":{"line":173,"column":66}},"73":{"start":{"line":174,"column":2},"end":{"line":174,"column":93}},"74":{"start":{"line":176,"column":2},"end":{"line":176,"column":58}},"75":{"start":{"line":177,"column":2},"end":{"line":184,"column":45}},"76":{"start":{"line":178,"column":4},"end":{"line":183,"column":6}},"77":{"start":{"line":179,"column":6},"end":{"line":182,"column":8}},"78":{"start":{"line":180,"column":8},"end":{"line":180,"column":46}},"79":{"start":{"line":180,"column":27},"end":{"line":180,"column":46}},"80":{"start":{"line":181,"column":8},"end":{"line":181,"column":62}},"81":{"start":{"line":186,"column":2},"end":{"line":188,"column":4}},"82":{"start":{"line":187,"column":4},"end":{"line":187,"column":61}},"83":{"start":{"line":191,"column":0},"end":{"line":199,"column":1}},"84":{"start":{"line":197,"column":2},"end":{"line":197,"column":59}},"85":{"start":{"line":198,"column":2},"end":{"line":198,"column":57}},"86":{"start":{"line":207,"column":0},"end":{"line":237,"column":1}},"87":{"start":{"line":208,"column":2},"end":{"line":208,"column":25}},"88":{"start":{"line":209,"column":2},"end":{"line":217,"column":3}},"89":{"start":{"line":210,"column":4},"end":{"line":210,"column":29}},"90":{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},"91":{"start":{"line":212,"column":6},"end":{"line":212,"column":67}},"92":{"start":{"line":214,"column":4},"end":{"line":216,"column":5}},"93":{"start":{"line":215,"column":6},"end":{"line":215,"column":75}},"94":{"start":{"line":219,"column":2},"end":{"line":219,"column":28}},"95":{"start":{"line":220,"column":2},"end":{"line":228,"column":3}},"96":{"start":{"line":221,"column":4},"end":{"line":221,"column":35}},"97":{"start":{"line":222,"column":4},"end":{"line":224,"column":5}},"98":{"start":{"line":223,"column":6},"end":{"line":223,"column":82}},"99":{"start":{"line":225,"column":4},"end":{"line":227,"column":5}},"100":{"start":{"line":226,"column":6},"end":{"line":226,"column":90}},"101":{"start":{"line":230,"column":2},"end":{"line":230,"column":24}},"102":{"start":{"line":231,"column":2},"end":{"line":233,"column":3}},"103":{"start":{"line":232,"column":4},"end":{"line":232,"column":59}},"104":{"start":{"line":235,"column":2},"end":{"line":235,"column":84}},"105":{"start":{"line":236,"column":2},"end":{"line":236,"column":15}},"106":{"start":{"line":239,"column":0},"end":{"line":270,"column":1}},"107":{"start":{"line":240,"column":2},"end":{"line":240,"column":36}},"108":{"start":{"line":240,"column":23},"end":{"line":240,"column":36}},"109":{"start":{"line":242,"column":2},"end":{"line":242,"column":93}},"110":{"start":{"line":244,"column":2},"end":{"line":266,"column":8}},"111":{"start":{"line":245,"column":4},"end":{"line":245,"column":51}},"112":{"start":{"line":247,"column":4},"end":{"line":247,"column":55}},"113":{"start":{"line":251,"column":4},"end":{"line":251,"column":94}},"114":{"start":{"line":253,"column":4},"end":{"line":263,"column":6}},"115":{"start":{"line":254,"column":6},"end":{"line":256,"column":7}},"116":{"start":{"line":255,"column":8},"end":{"line":255,"column":221}},"117":{"start":{"line":258,"column":6},"end":{"line":260,"column":7}},"118":{"start":{"line":259,"column":8},"end":{"line":259,"column":307}},"119":{"start":{"line":262,"column":6},"end":{"line":262,"column":71}},"120":{"start":{"line":265,"column":4},"end":{"line":265,"column":17}},"121":{"start":{"line":268,"column":2},"end":{"line":268,"column":42}},"122":{"start":{"line":269,"column":2},"end":{"line":269,"column":15}},"123":{"start":{"line":272,"column":0},"end":{"line":285,"column":1}},"124":{"start":{"line":273,"column":2},"end":{"line":273,"column":28}},"125":{"start":{"line":274,"column":2},"end":{"line":274,"column":34}},"126":{"start":{"line":274,"column":21},"end":{"line":274,"column":34}},"127":{"start":{"line":275,"column":2},"end":{"line":282,"column":4}},"128":{"start":{"line":276,"column":4},"end":{"line":276,"column":64}},"129":{"start":{"line":277,"column":4},"end":{"line":277,"column":82}},"130":{"start":{"line":278,"column":4},"end":{"line":280,"column":5}},"131":{"start":{"line":279,"column":6},"end":{"line":279,"column":60}},"132":{"start":{"line":281,"column":4},"end":{"line":281,"column":115}},"133":{"start":{"line":283,"column":2},"end":{"line":283,"column":32}},"134":{"start":{"line":284,"column":2},"end":{"line":284,"column":15}},"135":{"start":{"line":297,"column":0},"end":{"line":297,"column":32}},"136":{"start":{"line":298,"column":0},"end":{"line":331,"column":1}},"137":{"start":{"line":299,"column":2},"end":{"line":299,"column":39}},"138":{"start":{"line":299,"column":26},"end":{"line":299,"column":39}},"139":{"start":{"line":301,"column":2},"end":{"line":301,"column":27}},"140":{"start":{"line":302,"column":2},"end":{"line":304,"column":3}},"141":{"start":{"line":304,"column":3},"end":{"line":326,"column":4}},"142":{"start":{"line":305,"column":4},"end":{"line":305,"column":56}},"143":{"start":{"line":307,"column":4},"end":{"line":307,"column":28}},"144":{"start":{"line":308,"column":4},"end":{"line":318,"column":5}},"145":{"start":{"line":309,"column":6},"end":{"line":309,"column":61}},"146":{"start":{"line":311,"column":6},"end":{"line":311,"column":50}},"147":{"start":{"line":312,"column":6},"end":{"line":312,"column":48}},"148":{"start":{"line":313,"column":6},"end":{"line":313,"column":49}},"149":{"start":{"line":314,"column":6},"end":{"line":314,"column":53}},"150":{"start":{"line":315,"column":6},"end":{"line":315,"column":48}},"151":{"start":{"line":316,"column":6},"end":{"line":316,"column":56}},"152":{"start":{"line":317,"column":6},"end":{"line":317,"column":60}},"153":{"start":{"line":320,"column":4},"end":{"line":322,"column":5}},"154":{"start":{"line":321,"column":6},"end":{"line":321,"column":52}},"155":{"start":{"line":323,"column":4},"end":{"line":325,"column":5}},"156":{"start":{"line":324,"column":6},"end":{"line":324,"column":56}},"157":{"start":{"line":328,"column":2},"end":{"line":328,"column":40}},"158":{"start":{"line":329,"column":2},"end":{"line":329,"column":44}},"159":{"start":{"line":330,"column":2},"end":{"line":330,"column":15}},"160":{"start":{"line":333,"column":0},"end":{"line":333,"column":61}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":46,"column":2}},{"start":{"line":46,"column":2},"end":{"line":46,"column":2}}]},"3":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":33},"end":{"line":48,"column":59}},{"start":{"line":48,"column":63},"end":{"line":48,"column":65}}]},"4":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"5":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":20},"end":{"line":71,"column":52}},{"start":{"line":71,"column":56},"end":{"line":71,"column":84}}]},"6":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":69},"end":{"line":71,"column":77}},{"start":{"line":71,"column":81},"end":{"line":71,"column":83}}]},"7":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"8":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":25},"end":{"line":99,"column":54}},{"start":{"line":99,"column":58},"end":{"line":99,"column":81}}]},"9":{"line":100,"type":"cond-expr","locations":[{"start":{"line":100,"column":67},"end":{"line":100,"column":81}},{"start":{"line":100,"column":84},"end":{"line":100,"column":127}}]},"10":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":6}},{"start":{"line":104,"column":6},"end":{"line":104,"column":6}}]},"11":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":107,"column":8}},{"start":{"line":107,"column":8},"end":{"line":107,"column":8}}]},"12":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":2},"end":{"line":131,"column":2}},{"start":{"line":131,"column":2},"end":{"line":131,"column":2}}]},"13":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":6},"end":{"line":133,"column":6}},{"start":{"line":133,"column":6},"end":{"line":133,"column":6}}]},"14":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":2},"end":{"line":138,"column":2}},{"start":{"line":138,"column":2},"end":{"line":138,"column":2}}]},"15":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":2},"end":{"line":144,"column":2}},{"start":{"line":144,"column":2},"end":{"line":144,"column":2}}]},"16":{"line":157,"type":"cond-expr","locations":[{"start":{"line":157,"column":59},"end":{"line":157,"column":69}},{"start":{"line":157,"column":72},"end":{"line":157,"column":84}}]},"17":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":160,"column":4}},{"start":{"line":160,"column":4},"end":{"line":160,"column":4}}]},"18":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":2},"end":{"line":173,"column":2}},{"start":{"line":173,"column":2},"end":{"line":173,"column":2}}]},"19":{"line":174,"type":"cond-expr","locations":[{"start":{"line":174,"column":60},"end":{"line":174,"column":74}},{"start":{"line":174,"column":77},"end":{"line":174,"column":93}}]},"20":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":8},"end":{"line":180,"column":8}},{"start":{"line":180,"column":8},"end":{"line":180,"column":8}}]},"21":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":2},"end":{"line":209,"column":2}},{"start":{"line":209,"column":2},"end":{"line":209,"column":2}}]},"22":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":6},"end":{"line":209,"column":15}},{"start":{"line":209,"column":19},"end":{"line":209,"column":28}}]},"23":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":211,"column":4}},{"start":{"line":211,"column":4},"end":{"line":211,"column":4}}]},"24":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":214,"column":4}},{"start":{"line":214,"column":4},"end":{"line":214,"column":4}}]},"25":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":2},"end":{"line":220,"column":2}},{"start":{"line":220,"column":2},"end":{"line":220,"column":2}}]},"26":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":6},"end":{"line":220,"column":18}},{"start":{"line":220,"column":22},"end":{"line":220,"column":34}}]},"27":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":222,"column":4}},{"start":{"line":222,"column":4},"end":{"line":222,"column":4}}]},"28":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":4},"end":{"line":225,"column":4}},{"start":{"line":225,"column":4},"end":{"line":225,"column":4}}]},"29":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":2},"end":{"line":231,"column":2}},{"start":{"line":231,"column":2},"end":{"line":231,"column":2}}]},"30":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":6},"end":{"line":231,"column":13}},{"start":{"line":231,"column":17},"end":{"line":231,"column":24}}]},"31":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":2},"end":{"line":240,"column":2}},{"start":{"line":240,"column":2},"end":{"line":240,"column":2}}]},"32":{"line":242,"type":"cond-expr","locations":[{"start":{"line":242,"column":60},"end":{"line":242,"column":74}},{"start":{"line":242,"column":77},"end":{"line":242,"column":93}}]},"33":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":19},"end":{"line":247,"column":39}},{"start":{"line":247,"column":43},"end":{"line":247,"column":55}}]},"34":{"line":251,"type":"cond-expr","locations":[{"start":{"line":251,"column":65},"end":{"line":251,"column":77}},{"start":{"line":251,"column":80},"end":{"line":251,"column":94}}]},"35":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":6},"end":{"line":254,"column":6}},{"start":{"line":254,"column":6},"end":{"line":254,"column":6}}]},"36":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":6},"end":{"line":258,"column":6}},{"start":{"line":258,"column":6},"end":{"line":258,"column":6}}]},"37":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":2},"end":{"line":274,"column":2}},{"start":{"line":274,"column":2},"end":{"line":274,"column":2}}]},"38":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":17},"end":{"line":277,"column":32}},{"start":{"line":277,"column":36},"end":{"line":277,"column":82}}]},"39":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":4},"end":{"line":278,"column":4}},{"start":{"line":278,"column":4},"end":{"line":278,"column":4}}]},"40":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":2},"end":{"line":299,"column":2}},{"start":{"line":299,"column":2},"end":{"line":299,"column":2}}]},"41":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":4},"end":{"line":308,"column":4}},{"start":{"line":308,"column":4},"end":{"line":308,"column":4}}]},"42":{"line":315,"type":"binary-expr","locations":[{"start":{"line":315,"column":18},"end":{"line":315,"column":35}},{"start":{"line":315,"column":39},"end":{"line":315,"column":48}}]},"43":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":4},"end":{"line":320,"column":4}},{"start":{"line":320,"column":4},"end":{"line":320,"column":4}}]},"44":{"line":320,"type":"binary-expr","locations":[{"start":{"line":320,"column":8},"end":{"line":320,"column":28}},{"start":{"line":320,"column":32},"end":{"line":320,"column":57}}]},"45":{"line":323,"type":"if","locations":[{"start":{"line":323,"column":4},"end":{"line":323,"column":4}},{"start":{"line":323,"column":4},"end":{"line":323,"column":4}}]},"46":{"line":323,"type":"binary-expr","locations":[{"start":{"line":323,"column":8},"end":{"line":323,"column":28}},{"start":{"line":323,"column":32},"end":{"line":323,"column":59}}]}},"code":["/* @flow */","\"use strict\"","const configurationError = require(\"./utils/configurationError\")","const getModulePath = require(\"./utils/getModulePath\")","const _ = require(\"lodash\")","const fs = require(\"fs\")","const globjoin = require(\"globjoin\")","const normalizeRuleSettings = require(\"./normalizeRuleSettings\")","const path = require(\"path\")","const rules = require(\"./rules\")","const dynamicRequire = require(\"./dynamicRequire\")","","const DEFAULT_IGNORE_FILENAME = \".stylelintignore\"","const FILE_NOT_FOUND_ERROR_CODE = \"ENOENT\"","","// - Merges config and configOverrides","// - Makes all paths absolute","// - Merges extends","function augmentConfigBasic(","  stylelint/*: stylelint$internalApi*/,","  config/*: stylelint$config*/,","  configDir/*: string*/,","  allowOverrides/*:: ?: boolean*/",")/*: Promise<stylelint$config>*/ {","  return Promise.resolve().then(() => {","    if (!allowOverrides) return config","    return _.merge(config, stylelint._options.configOverrides)","  }).then(augmentedConfig => {","    return extendConfig(stylelint, augmentedConfig, configDir)","  }).then(augmentedConfig => {","    return absolutizePaths(augmentedConfig, configDir)","  })","}","","// Extended configs need to be run through augmentConfigBasic","// but do not need the full treatment. Things like pluginFunctions","// will be resolved and added by the parent config.","function augmentConfigExtended(","  stylelint/*: stylelint$internalApi*/,","  cosmiconfigResultArg/*: ?{","     config: stylelint$config,","     filepath: string,","   }*/"," )/*: Promise<?{ config: stylelint$config, filepath: string }>*/ {","  const cosmiconfigResult = cosmiconfigResultArg // Lock in for Flow","  if (!cosmiconfigResult) return Promise.resolve(null)","","  const configDir = path.dirname(cosmiconfigResult.filepath || \"\")","  const cleanedConfig = _.omit(cosmiconfigResult.config, \"ignoreFiles\")","  return augmentConfigBasic(stylelint, cleanedConfig, configDir).then(augmentedConfig => {","    return {","      config: augmentedConfig,","      filepath: cosmiconfigResult.filepath,","    }","  })","}","","function augmentConfigFull(","  stylelint/*: stylelint$internalApi*/,","   cosmiconfigResultArg/*: ?{","   config: stylelint$config,","   filepath: string,","  }*/",")/*: Promise<?{ config: stylelint$config, filepath: string }>*/ {","  const cosmiconfigResult = cosmiconfigResultArg // Lock in for Flow","  if (!cosmiconfigResult) return Promise.resolve(null)","","  const config = cosmiconfigResult.config,","    filepath = cosmiconfigResult.filepath","","  const configDir = stylelint._options.configBasedir || path.dirname(filepath || \"\")","","  return augmentConfigBasic(stylelint, config, configDir, true).then(augmentedConfig => {","    return addIgnorePatterns(stylelint, augmentedConfig)","  }).then(augmentedConfig => {","    return addPluginFunctions(augmentedConfig)","  }).then(augmentedConfig => {","    return addProcessorFunctions(augmentedConfig)","  }).then(augmentedConfig => {","    if (!augmentedConfig.rules) {","      throw configurationError(\"No rules found within configuration. Have you provided a \\\"rules\\\" property?\")","    }","","    return normalizeAllRuleSettings(augmentedConfig)","  }).then(augmentedConfig => {","    return {","      config: augmentedConfig,","      filepath: cosmiconfigResult.filepath,","    }","  })","}","","// Load a file ignore ignore patterns, if there is one;","// then add them to the config as an ignorePatterns property","function addIgnorePatterns(","  stylelint/*: stylelint$internalApi*/,","  config/*: stylelint$config*/",")/*: Promise<stylelint$config>*/ {","  const ignoreFilePath = stylelint._options.ignorePath || DEFAULT_IGNORE_FILENAME","  const absoluteIgnoreFilePath = path.isAbsolute(ignoreFilePath) ? ignoreFilePath : path.resolve(process.cwd(), ignoreFilePath)","","  return new Promise((resolve, reject) => {","    fs.readFile(absoluteIgnoreFilePath, \"utf8\", (err, data) => {","      if (err) {","        // If the file's not found, fine, we'll just","        // consider it an empty array of globs","        if (err.code === FILE_NOT_FOUND_ERROR_CODE) {","          return resolve(config)","        }","        return reject(err)","      }","      // Add an ignorePatterns property to the config, containing the","      // .gitignore-patterned globs loaded from .stylelintignore","      const augmentedConfig/*: stylelint$config*/ = Object.assign({}, config, {","        ignorePatterns: data,","      })","      resolve(augmentedConfig)","    })","  })","}","","// Make all paths in the config absolute:","// - ignoreFiles","// - plugins","// - processors","// (extends handled elsewhere)","function absolutizePaths(","  config/*: stylelint$config*/,","  configDir/*: string*/",")/*: stylelint$config*/ {","  if (config.ignoreFiles) {","    config.ignoreFiles = [].concat(config.ignoreFiles).map(glob => {","      if (path.isAbsolute(glob.replace(/^!/, \"\"))) return glob","      return globjoin(configDir, glob)","    })","  }","","  if (config.plugins) {","    config.plugins = [].concat(config.plugins).map(lookup => {","      return getModulePath(configDir, lookup)","    })","  }","","  if (config.processors) {","    config.processors = absolutizeProcessors(config.processors, configDir)","  }","","  return config","}","","// Processors are absolutized in their own way because","// they can be and return a string or an array","function absolutizeProcessors(","  processors/*: stylelint$configProcessors*/,","  configDir/*: string*/",")/*: stylelint$configProcessors*/ {","  const normalizedProcessors = Array.isArray(processors) ? processors : [processors]","","  return normalizedProcessors.map(item => {","    if (typeof item === \"string\") {","      return getModulePath(configDir, item)","    }","","    return [ getModulePath(configDir, item[0]), item[1] ]","  })","}","","function extendConfig(","  stylelint/*: stylelint$internalApi*/,","  config/*: stylelint$config*/,","  configDir/*: string*/",")/*: Promise<stylelint$config>*/ {","  if (config.extends === undefined) return Promise.resolve(config)","  const normalizedExtends = Array.isArray(config.extends) ? config.extends : [config.extends]","","  const originalWithoutExtends = _.omit(config, \"extends\")","  const loadExtends = normalizedExtends.reduce((resultPromise, extendLookup) => {","    return resultPromise.then(resultConfig => {","      return loadExtendedConfig(stylelint, resultConfig, configDir, extendLookup).then(extendResult => {","        if (!extendResult) return resultConfig","        return mergeConfigs(resultConfig, extendResult.config)","      })","    })","  }, Promise.resolve(originalWithoutExtends))","","  return loadExtends.then(resultConfig => {","    return mergeConfigs(resultConfig, originalWithoutExtends)","  })","}","","function loadExtendedConfig(","  stylelint/*: stylelint$internalApi*/,","  config/*: stylelint$config*/,","  configDir/*: string*/,","  extendLookup/*: string*/",")/*: Promise<?{ config: stylelint$config, filepath: string }>*/ {","  const extendPath = getModulePath(configDir, extendLookup)","  return stylelint._extendExplorer.load(null, extendPath)","}","","// When merging configs (via extends)","// - plugin and processor arrays are joined","// - rules are merged via Object.assign, so there is no attempt made to","//   merge any given rule's settings. If b contains the same rule as a,","//   b's rule settings will override a's rule settings entirely.","// - Everything else is merged via Object.assign","function mergeConfigs(a/*: stylelint$config*/, b/*: stylelint$config*/)/*: stylelint$config*/ {","  const pluginMerger = {}","  if (a.plugins || b.plugins) {","    pluginMerger.plugins = []","    if (a.plugins) {","      pluginMerger.plugins = pluginMerger.plugins.concat(a.plugins)","    }","    if (b.plugins) {","      pluginMerger.plugins = _.uniq(pluginMerger.plugins.concat(b.plugins))","    }","  }","","  const processorMerger = {}","  if (a.processors || b.processors) {","    processorMerger.processors = []","    if (a.processors) {","      processorMerger.processors = processorMerger.processors.concat(a.processors)","    }","    if (b.processors) {","      processorMerger.processors = _.uniq(processorMerger.processors.concat(b.processors))","    }","  }","","  const rulesMerger = {}","  if (a.rules || b.rules) {","    rulesMerger.rules = Object.assign({}, a.rules, b.rules)","  }","","  const result = Object.assign({}, a, b, processorMerger, pluginMerger, rulesMerger)","  return result","}","","function addPluginFunctions(config/*: stylelint$config*/)/*: stylelint$config*/ {","  if (!config.plugins) return config","","  const normalizedPlugins = Array.isArray(config.plugins) ? config.plugins : [config.plugins]","","  const pluginFunctions = normalizedPlugins.reduce((result, pluginLookup) => {","    let pluginImport = dynamicRequire(pluginLookup)","    // Handle either ES6 or CommonJS modules","    pluginImport = pluginImport.default || pluginImport","","    // A plugin can export either a single rule definition","    // or an array of them","    const normalizedPluginImport = Array.isArray(pluginImport) ? pluginImport : [pluginImport]","","    normalizedPluginImport.forEach(pluginRuleDefinition => {","      if (!pluginRuleDefinition.ruleName) {","        throw configurationError(\"stylelint v3+ requires plugins to expose a ruleName. \" + `The plugin \"${pluginLookup}\" is not doing this, so will not work ` + \"with stylelint v3+. Please file an issue with the plugin.\")","      }","","      if (!_.includes(pluginRuleDefinition.ruleName, \"/\")) {","        throw configurationError(\"stylelint v7+ requires plugin rules to be namspaced, \" + \"i.e. only `plugin-namespace/plugin-rule-name` plugin rule names are supported. \" + `The plugin rule \"${pluginRuleDefinition.ruleName}\" does not do this, so will not work. ` + \"Please file an issue with the plugin.\")","      }","","      result[pluginRuleDefinition.ruleName] = pluginRuleDefinition.rule","    })","","    return result","  }, {})","","  config.pluginFunctions = pluginFunctions","  return config","}","","function normalizeAllRuleSettings(config/*: stylelint$config*/)/*: stylelint$config*/ {","  const normalizedRules = {}","  if (!config.rules) return config","  Object.keys(config.rules).forEach(ruleName => {","    const rawRuleSettings = _.get(config, [ \"rules\", ruleName ])","    const rule = rules[ruleName] || _.get(config, [ \"pluginFunctions\", ruleName ])","    if (!rule) {","      throw configurationError(`Undefined rule ${ruleName}`)","    }","    normalizedRules[ruleName] = normalizeRuleSettings(rawRuleSettings, ruleName, _.get(rule, \"primaryOptionArray\"))","  })","  config.rules = normalizedRules","  return config","}","","// Given an array of processors strings, we want to add two","// properties to the augmented config:","// - codeProcessors: functions that will run on code as it comes in","// - resultProcessors: functions that will run on results as they go out","//","// To create these properties, we need to:","// - Find the processor module","// - Intialize the processor module by calling its functions with any","//   provided options","// - Push the processor's code and result processors to their respective arrays","const processorCache = new Map()","function addProcessorFunctions(config/*: stylelint$config*/)/*: stylelint$config*/ {","  if (!config.processors) return config","","  const codeProcessors = []","  const resultProcessors = []","","  ;[].concat(config.processors).forEach(processorConfig => {","    const processorKey = JSON.stringify(processorConfig)","","    let initializedProcessor","    if (processorCache.has(processorKey)) {","      initializedProcessor = processorCache.get(processorKey)","    } else {","      processorConfig = [].concat(processorConfig)","      const processorLookup = processorConfig[0]","      const processorOptions = processorConfig[1]","      let processor = dynamicRequire(processorLookup)","      processor = processor.default || processor","      initializedProcessor = processor(processorOptions)","      processorCache.set(processorKey, initializedProcessor)","    }","","    if (initializedProcessor && initializedProcessor.code) {","      codeProcessors.push(initializedProcessor.code)","    }","    if (initializedProcessor && initializedProcessor.result) {","      resultProcessors.push(initializedProcessor.result)","    }","  })","","  config.codeProcessors = codeProcessors","  config.resultProcessors = resultProcessors","  return config","}","","module.exports = { augmentConfigExtended, augmentConfigFull }",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"14":1,"19":1,"25":0,"26":0,"27":0,"29":0,"31":0,"38":1,"45":0,"46":0,"48":0,"49":0,"50":0,"51":0,"58":1,"65":0,"66":0,"68":0,"71":0,"73":0,"74":0,"76":0,"78":0,"80":0,"81":0,"84":0,"86":0,"95":1,"99":0,"100":0,"102":0,"103":0,"104":0,"107":0,"108":0,"110":0,"114":0,"117":0,"127":1,"131":0,"132":0,"133":0,"134":0,"138":0,"139":0,"140":0,"144":0,"145":0,"148":0,"153":1,"157":0,"159":0,"160":0,"161":0,"164":0,"168":1,"173":0,"174":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"186":0,"187":0,"191":1,"197":0,"198":0,"207":1,"208":0,"209":0,"210":0,"211":0,"212":0,"214":0,"215":0,"219":0,"220":0,"221":0,"222":0,"223":0,"225":0,"226":0,"230":0,"231":0,"232":0,"235":0,"236":0,"239":1,"240":0,"242":0,"244":0,"245":0,"247":0,"251":0,"253":0,"254":0,"255":0,"258":0,"259":0,"262":0,"265":0,"268":0,"269":0,"272":1,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"281":0,"283":0,"284":0,"297":1,"298":1,"299":0,"301":0,"302":0,"304":0,"305":0,"307":0,"308":0,"309":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"320":0,"321":0,"323":0,"324":0,"328":0,"329":0,"330":0,"333":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/getModulePath.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/getModulePath.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":80}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"3":{"start":{"line":7,"column":0},"end":{"line":18,"column":1}},"4":{"start":{"line":10,"column":2},"end":{"line":10,"column":41}},"5":{"start":{"line":11,"column":2},"end":{"line":13,"column":3}},"6":{"start":{"line":12,"column":4},"end":{"line":12,"column":45}},"7":{"start":{"line":14,"column":2},"end":{"line":16,"column":3}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":92}},"9":{"start":{"line":17,"column":2},"end":{"line":17,"column":13}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":2},"end":{"line":11,"column":2}},{"start":{"line":11,"column":2},"end":{"line":11,"column":2}}]},"2":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const configurationError = require(\"./configurationError\")","const resolveFrom = require(\"resolve-from\")","","module.exports = function (basedir/*: string*/, lookup/*: string*/)/*: string*/ {","  // First try to resolve from the provided directory,","  // then try to resolve from process.cwd.","  let path = resolveFrom(basedir, lookup)","  if (!path) {","    path = resolveFrom(process.cwd(), lookup)","  }","  if (!path) {","    throw configurationError(`Could not find \"${lookup}\". Do you need a \\`configBasedir\\`?`)","  }","  return path","}",""],"l":{"4":1,"5":1,"7":1,"10":0,"11":0,"12":0,"14":0,"15":0,"17":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/dynamicRequire.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/dynamicRequire.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":4,"loc":{"start":{"line":4,"column":17},"end":{"line":4,"column":33}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":6,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":22}}},"branchMap":{},"code":["\"use strict\"","// This file exists to remove the need for Flow's ignore_non_literal_requires option","","module.exports = function (name) {","  return require(name)","}",""],"l":{"4":1,"5":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/createStylelintResult.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/createStylelintResult.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":17},"end":{"line":9,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":5,"column":0},"end":{"line":64,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":132}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":96}},"5":{"start":{"line":14,"column":2},"end":{"line":19,"column":4}},"6":{"start":{"line":15,"column":4},"end":{"line":18,"column":5}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":100}},"8":{"start":{"line":23,"column":2},"end":{"line":27,"column":4}},"9":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"10":{"start":{"line":30,"column":2},"end":{"line":46,"column":3}},"11":{"start":{"line":36,"column":6},"end":{"line":42,"column":7}},"12":{"start":{"line":48,"column":2},"end":{"line":63,"column":4}},"13":{"start":{"line":49,"column":4},"end":{"line":49,"column":32}},"14":{"start":{"line":51,"column":4},"end":{"line":60,"column":5}},"15":{"start":{"line":52,"column":6},"end":{"line":59,"column":8}},"16":{"start":{"line":55,"column":8},"end":{"line":55,"column":65}},"17":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"18":{"start":{"line":57,"column":10},"end":{"line":57,"column":36}},"19":{"start":{"line":62,"column":4},"end":{"line":62,"column":26}}},"branchMap":{"1":{"line":10,"type":"cond-expr","locations":[{"start":{"line":10,"column":46},"end":{"line":10,"column":55}},{"start":{"line":10,"column":58},"end":{"line":10,"column":132}}]},"2":{"line":10,"type":"binary-expr","locations":[{"start":{"line":10,"column":58},"end":{"line":10,"column":94}},{"start":{"line":10,"column":98},"end":{"line":10,"column":132}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"4":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]}},"code":["/* @flow */","\"use strict\"","const _ = require(\"lodash\")","","module.exports = function (","  stylelint/*: stylelint$internalApi*/,","  postcssResult/*: Object*/,","  filePath/*:: ?: string*/",")/*: Promise<stylelint$result>*/ {","  const source = !postcssResult.root.source ? undefined : postcssResult.root.source.input.file || postcssResult.root.source.input.id","","  // Strip out deprecation warnings from the messages","  const deprecationMessages = _.remove(postcssResult.messages, { stylelintType: \"deprecation\" })","  const deprecations = deprecationMessages.map(deprecationMessage => {","    return {","      text: deprecationMessage.text,","      reference: deprecationMessage.stylelintReference,","    }","  })","","  // Also strip out invalid options","  const invalidOptionMessages = _.remove(postcssResult.messages, { stylelintType: \"invalidOption\" })","  const invalidOptionWarnings = invalidOptionMessages.map(invalidOptionMessage => {","    return {","      text: invalidOptionMessage.text,","    }","  })","","  // This defines the stylelint result object that formatters receive","  let stylelintResult = {","    source,","    deprecations,","    invalidOptionWarnings,","    errored: postcssResult.stylelint.stylelintError,","    warnings: postcssResult.messages.map(message => {","      return {","        line: message.line,","        column: message.column,","        rule: message.rule,","        severity: message.severity,","        text: message.text,","      }","    }),","    ignored: postcssResult.stylelint.ignored,","    _postcssResult: postcssResult,","  }","","  return stylelint.getConfigForFile(filePath).then((result) => {","    const config = result.config","","    if (config.resultProcessors) {","      config.resultProcessors.forEach(resultProcessor => {","        // Result processors might just mutate the result object,","        // or might return a new one","        const returned = resultProcessor(stylelintResult, source)","        if (returned) {","          stylelintResult = returned","        }","      })","    }","","    return stylelintResult","  })","}",""],"l":{"3":1,"5":1,"10":0,"13":0,"14":0,"15":0,"22":0,"23":0,"24":0,"30":0,"36":0,"48":0,"49":0,"51":0,"52":0,"55":0,"56":0,"57":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/getConfigForFile.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/getConfigForFile.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":10,"column":64}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":70}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":64}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":28}},"4":{"start":{"line":7,"column":0},"end":{"line":43,"column":1}},"5":{"start":{"line":11,"column":2},"end":{"line":11,"column":42}},"6":{"start":{"line":13,"column":2},"end":{"line":13,"column":49}},"7":{"start":{"line":15,"column":2},"end":{"line":30,"column":3}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":69}},"9":{"start":{"line":17,"column":4},"end":{"line":17,"column":29}},"10":{"start":{"line":17,"column":16},"end":{"line":17,"column":29}},"11":{"start":{"line":22,"column":4},"end":{"line":27,"column":6}},"12":{"start":{"line":28,"column":4},"end":{"line":28,"column":71}},"13":{"start":{"line":29,"column":4},"end":{"line":29,"column":26}},"14":{"start":{"line":32,"column":2},"end":{"line":42,"column":4}},"15":{"start":{"line":34,"column":4},"end":{"line":34,"column":67}},"16":{"start":{"line":34,"column":17},"end":{"line":34,"column":67}},"17":{"start":{"line":35,"column":4},"end":{"line":35,"column":17}},"18":{"start":{"line":37,"column":4},"end":{"line":40,"column":5}},"19":{"start":{"line":38,"column":6},"end":{"line":38,"column":59}},"20":{"start":{"line":39,"column":6},"end":{"line":39,"column":68}},"21":{"start":{"line":41,"column":4},"end":{"line":41,"column":17}}},"branchMap":{"1":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":15},"end":{"line":11,"column":25}},{"start":{"line":11,"column":29},"end":{"line":11,"column":42}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"3":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"4":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"6":{"line":38,"type":"cond-expr","locations":[{"start":{"line":38,"column":34},"end":{"line":38,"column":54}},{"start":{"line":38,"column":57},"end":{"line":38,"column":59}}]}},"code":["/* @flow */","\"use strict\"","const augmentConfigFull = require(\"./augmentConfig\").augmentConfigFull","const configurationError = require(\"./utils/configurationError\")","const path = require(\"path\")","","module.exports = function (","  stylelint/*: stylelint$internalApi*/,","  searchPath/*:: ?: string*/",")/*: Promise<?{ config: stylelint$config, filepath: string }>*/ {","  searchPath = searchPath || process.cwd()","","  const optionsConfig = stylelint._options.config","","  if (optionsConfig !== undefined) {","    const cached = stylelint._specifiedConfigCache.get(optionsConfig)","    if (cached) return cached","","    // stylelint._fullExplorer (cosmiconfig) is already configured to","    // run augmentConfigFull; but since we're making up the result here,","    // we need to manually run the transform","    const augmentedResult = augmentConfigFull(stylelint, {","      config: optionsConfig,","      // Add the extra path part so that we can get the directory without being","      // confused","      filepath: path.join(process.cwd(), \"argument-config\"),","    })","    stylelint._specifiedConfigCache.set(optionsConfig, augmentedResult)","    return augmentedResult","  }","","  return stylelint._fullExplorer.load(searchPath, stylelint._options.configFile).then(config => {","    // If no config was found, try looking from process.cwd","    if (!config) return stylelint._fullExplorer.load(process.cwd())","    return config","  }).then(config => {","    if (!config) {","      const ending = searchPath ? ` for ${searchPath}` : \"\"","      throw configurationError(`No configuration provided${ending}`)","    }","    return config","  })","}",""],"l":{"3":1,"4":1,"5":1,"7":1,"11":0,"13":0,"15":0,"16":0,"17":0,"22":0,"28":0,"29":0,"32":0,"34":0,"35":0,"37":0,"38":0,"39":0,"41":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/getPostcssResult.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/getPostcssResult.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":17},"end":{"line":14,"column":87}}},"2":{"name":"readFile","line":90,"loc":{"start":{"line":90,"column":0},"end":{"line":90,"column":61}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":24}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":42}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":40}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":50}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":34}},"9":{"start":{"line":14,"column":0},"end":{"line":88,"column":1}},"10":{"start":{"line":15,"column":2},"end":{"line":22,"column":78}},"11":{"start":{"line":24,"column":2},"end":{"line":24,"column":89}},"12":{"start":{"line":25,"column":2},"end":{"line":25,"column":44}},"13":{"start":{"line":25,"column":14},"end":{"line":25,"column":44}},"14":{"start":{"line":27,"column":2},"end":{"line":27,"column":13}},"15":{"start":{"line":28,"column":2},"end":{"line":32,"column":3}},"16":{"start":{"line":29,"column":4},"end":{"line":29,"column":43}},"17":{"start":{"line":30,"column":9},"end":{"line":32,"column":3}},"18":{"start":{"line":31,"column":4},"end":{"line":31,"column":40}},"19":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"20":{"start":{"line":35,"column":4},"end":{"line":35,"column":48}},"21":{"start":{"line":38,"column":2},"end":{"line":87,"column":4}},"22":{"start":{"line":39,"column":4},"end":{"line":39,"column":56}},"23":{"start":{"line":40,"column":4},"end":{"line":40,"column":42}},"24":{"start":{"line":42,"column":4},"end":{"line":59,"column":5}},"25":{"start":{"line":43,"column":6},"end":{"line":47,"column":7}},"26":{"start":{"line":44,"column":8},"end":{"line":44,"column":45}},"27":{"start":{"line":46,"column":8},"end":{"line":46,"column":78}},"28":{"start":{"line":49,"column":6},"end":{"line":49,"column":64}},"29":{"start":{"line":50,"column":6},"end":{"line":58,"column":7}},"30":{"start":{"line":51,"column":8},"end":{"line":51,"column":27}},"31":{"start":{"line":52,"column":13},"end":{"line":58,"column":7}},"32":{"start":{"line":53,"column":8},"end":{"line":53,"column":27}},"33":{"start":{"line":54,"column":13},"end":{"line":58,"column":7}},"34":{"start":{"line":55,"column":8},"end":{"line":55,"column":30}},"35":{"start":{"line":56,"column":13},"end":{"line":58,"column":7}},"36":{"start":{"line":57,"column":8},"end":{"line":57,"column":92}},"37":{"start":{"line":61,"column":4},"end":{"line":61,"column":50}},"38":{"start":{"line":63,"column":4},"end":{"line":63,"column":42}},"39":{"start":{"line":69,"column":4},"end":{"line":73,"column":5}},"40":{"start":{"line":70,"column":6},"end":{"line":70,"column":36}},"41":{"start":{"line":72,"column":6},"end":{"line":72,"column":36}},"42":{"start":{"line":75,"column":4},"end":{"line":75,"column":73}},"43":{"start":{"line":76,"column":4},"end":{"line":76,"column":31}},"44":{"start":{"line":77,"column":4},"end":{"line":81,"column":5}},"45":{"start":{"line":78,"column":6},"end":{"line":80,"column":8}},"46":{"start":{"line":79,"column":8},"end":{"line":79,"column":66}},"47":{"start":{"line":83,"column":4},"end":{"line":83,"column":69}},"48":{"start":{"line":85,"column":4},"end":{"line":85,"column":70}},"49":{"start":{"line":86,"column":4},"end":{"line":86,"column":24}},"50":{"start":{"line":90,"column":0},"end":{"line":99,"column":1}},"51":{"start":{"line":91,"column":2},"end":{"line":98,"column":4}},"52":{"start":{"line":92,"column":4},"end":{"line":97,"column":6}},"53":{"start":{"line":93,"column":6},"end":{"line":95,"column":7}},"54":{"start":{"line":94,"column":8},"end":{"line":94,"column":26}},"55":{"start":{"line":96,"column":6},"end":{"line":96,"column":22}}},"branchMap":{"1":{"line":22,"type":"cond-expr","locations":[{"start":{"line":22,"column":61},"end":{"line":22,"column":73}},{"start":{"line":22,"column":76},"end":{"line":22,"column":78}}]},"2":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":28}},{"start":{"line":22,"column":32},"end":{"line":22,"column":58}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"4":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"5":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":9},"end":{"line":30,"column":9}},{"start":{"line":30,"column":9},"end":{"line":30,"column":9}}]},"6":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"7":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"8":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":41},"end":{"line":49,"column":57}},{"start":{"line":49,"column":61},"end":{"line":49,"column":63}}]},"9":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"10":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":10},"end":{"line":50,"column":27}},{"start":{"line":50,"column":31},"end":{"line":50,"column":38}},{"start":{"line":50,"column":42},"end":{"line":50,"column":67}}]},"11":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":13},"end":{"line":52,"column":13}},{"start":{"line":52,"column":13},"end":{"line":52,"column":13}}]},"12":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":17},"end":{"line":52,"column":34}},{"start":{"line":52,"column":38},"end":{"line":52,"column":45}},{"start":{"line":52,"column":49},"end":{"line":52,"column":74}}]},"13":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":13},"end":{"line":54,"column":13}},{"start":{"line":54,"column":13},"end":{"line":54,"column":13}}]},"14":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":17},"end":{"line":54,"column":37}},{"start":{"line":54,"column":41},"end":{"line":54,"column":48}},{"start":{"line":54,"column":52},"end":{"line":54,"column":76}}]},"15":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":13},"end":{"line":56,"column":13}},{"start":{"line":56,"column":13},"end":{"line":56,"column":13}}]},"16":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]},"17":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":14}},{"start":{"line":69,"column":18},"end":{"line":69,"column":35}}]},"18":{"line":75,"type":"cond-expr","locations":[{"start":{"line":75,"column":34},"end":{"line":75,"column":54}},{"start":{"line":75,"column":57},"end":{"line":75,"column":73}}]},"19":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"20":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":6},"end":{"line":93,"column":6}},{"start":{"line":93,"column":6},"end":{"line":93,"column":6}}]}},"code":["/* @flow */","\"use strict\"","","const fs = require(\"fs\")","const lessSyntax = require(\"postcss-less\")","const path = require(\"path\")","const postcss = require(\"postcss\")","const scssSyntax = require(\"postcss-scss\")","const sugarssSyntax = require(\"sugarss\")","const dynamicRequire = require(\"./dynamicRequire\")","","const postcssProcessor = postcss()","","module.exports = function (stylelint/*: stylelint$internalApi*/)/*: Promise<?Object>*/ {","  const options/*: {","    code?: string,","    codeFilename?: string,","    filePath?: string,","    codeProcessors?: Array<Function>,","    syntax?: stylelint$syntaxes,","    customSyntax?: string","  }*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}","","  const cached/*: ?postcss$result*/ = stylelint._postcssResultCache.get(options.filePath)","  if (cached) return Promise.resolve(cached)","","  let getCode","  if (options.code !== undefined) {","    getCode = Promise.resolve(options.code)","  } else if (options.filePath) {","    getCode = readFile(options.filePath)","  }","","  if (!getCode) {","    throw new Error(\"code or filePath required\")","  }","","  return getCode.then(code => {","    const customSyntax = stylelint._options.customSyntax","    let syntax = stylelint._options.syntax","","    if (customSyntax) {","      try {","        syntax = dynamicRequire(customSyntax)","      } catch (e) {","        throw new Error(`Cannot resolve custom syntax module ${customSyntax}`)","      }","    } else {","      const fileExtension = path.extname(options.filePath || \"\")","      if (syntax === \"scss\" || !syntax && fileExtension === \".scss\") {","        syntax = scssSyntax","      } else if (syntax === \"less\" || !syntax && fileExtension === \".less\") {","        syntax = lessSyntax","      } else if (syntax === \"sugarss\" || !syntax && fileExtension === \".sss\") {","        syntax = sugarssSyntax","      } else if (syntax) {","        throw new Error(\"You must use a valid syntax option, either: scss, less or sugarss\")","      }","    }","","    const postcssOptions/*: postcss$options*/ = {}","","    postcssOptions.from = options.filePath","","    /*","     * PostCSS allows for syntaxes that only contain a parser, however,","     * it then expects the syntax to be set as the `parser` option rather than `syntax.","     */","    if (syntax && !syntax.stringify) {","      postcssOptions.parser = syntax","    } else {","      postcssOptions.syntax = syntax","    }","","    const source = options.code ? options.codeFilename : options.filePath","    let preProcessedCode = code","    if (options.codeProcessors) {","      options.codeProcessors.forEach(codeProcessor => {","        preProcessedCode = codeProcessor(preProcessedCode, source)","      })","    }","","    return postcssProcessor.process(preProcessedCode, postcssOptions)","  }).then(postcssResult => {","    stylelint._postcssResultCache.set(options.filePath, postcssResult)","    return postcssResult","  })","}","","function readFile(filePath/*: string*/)/*: Promise<string>*/ {","  return new Promise((resolve, reject) => {","    fs.readFile(filePath, \"utf8\", (err, content) => {","      if (err) {","        return reject(err)","      }","      resolve(content)","    })","  })","}",""],"l":{"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":0,"24":0,"25":0,"27":0,"28":0,"29":0,"30":0,"31":0,"34":0,"35":0,"38":0,"39":0,"40":0,"42":0,"43":0,"44":0,"46":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"61":0,"63":0,"69":0,"70":0,"72":0,"75":0,"76":0,"77":0,"78":0,"79":0,"83":0,"85":0,"86":0,"90":1,"91":0,"92":0,"93":0,"94":0,"96":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/isPathIgnored.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/isPathIgnored.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":17},"end":{"line":17,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":28}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"5":{"start":{"line":14,"column":0},"end":{"line":43,"column":1}},"6":{"start":{"line":18,"column":2},"end":{"line":18,"column":30}},"7":{"start":{"line":19,"column":2},"end":{"line":21,"column":3}},"8":{"start":{"line":20,"column":4},"end":{"line":20,"column":33}},"9":{"start":{"line":23,"column":2},"end":{"line":42,"column":4}},"10":{"start":{"line":24,"column":4},"end":{"line":24,"column":32}},"11":{"start":{"line":26,"column":4},"end":{"line":26,"column":105}},"12":{"start":{"line":28,"column":4},"end":{"line":28,"column":75}},"13":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"14":{"start":{"line":30,"column":6},"end":{"line":30,"column":17}},"15":{"start":{"line":33,"column":4},"end":{"line":33,"column":83}},"16":{"start":{"line":35,"column":4},"end":{"line":35,"column":72}},"17":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"18":{"start":{"line":38,"column":6},"end":{"line":38,"column":17}},"19":{"start":{"line":41,"column":4},"end":{"line":41,"column":16}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"2":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":57},"end":{"line":26,"column":65}},{"start":{"line":26,"column":68},"end":{"line":26,"column":105}}]},"3":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":50},"end":{"line":28,"column":68}},{"start":{"line":28,"column":72},"end":{"line":28,"column":74}}]},"4":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]},"6":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":28}},{"start":{"line":37,"column":32},"end":{"line":37,"column":76}}]}},"code":["/* @flow */","\"use strict\"","const ignore = require(\"ignore\")","const micromatch = require(\"micromatch\")","const path = require(\"path\")","","const alwaysIgnoredGlobs = require(\"./alwaysIgnoredGlobs\")","","// To find out if a path is ignored, we need to load the config,","// which may have an ignoreFiles property,","// and will have incorporated any .stylelintignore file that was found","// into its ignorePatterns property. We then check the path","// against these.","module.exports = function (","  stylelint/*: stylelint$internalApi*/,","  filePathArg/*:: ?: string*/",")/*: Promise<boolean>*/ {","  const filePath = filePathArg // to please Flow","  if (!filePath) {","    return Promise.resolve(false)","  }","","  return stylelint.getConfigForFile(filePath).then((result) => {","    const config = result.config","","    const absoluteFilePath = path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath)","","    const ignoreFiles = alwaysIgnoredGlobs.concat(config.ignoreFiles || [])","    if (micromatch(absoluteFilePath, ignoreFiles).length) {","      return true","    }","","    const ignorePatternsFilter = ignore().add(config.ignorePatterns).createFilter()","","    const filepathRelativeToCwd = path.relative(process.cwd(), filePath)","","    if (ignorePatternsFilter && !ignorePatternsFilter(filepathRelativeToCwd)) {","      return true","    }","","    return false","  })","}",""],"l":{"3":1,"4":1,"5":1,"7":1,"14":1,"18":0,"19":0,"20":0,"23":0,"24":0,"26":0,"28":0,"29":0,"30":0,"33":0,"35":0,"37":0,"38":0,"41":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/alwaysIgnoredGlobs.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/alwaysIgnoredGlobs.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":96}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":35}}},"branchMap":{},"code":["/* @flow */","\"use strict\"","","const alwaysIgnoredGlobs/*: Array<string>*/ = [ \"**/node_modules/**\", \"**/bower_components/**\" ]","","module.exports = alwaysIgnoredGlobs",""],"l":{"4":1,"6":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/lintSource.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/lintSource.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1,"69":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":19,"column":23}}},"2":{"name":"lintPostcssResult","line":78,"loc":{"start":{"line":78,"column":0},"end":{"line":82,"column":17}}},"3":{"name":"createEmptyPostcssResult","line":130,"loc":{"start":{"line":130,"column":0},"end":{"line":130,"column":72}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":64}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"6":{"start":{"line":11,"column":0},"end":{"line":76,"column":1}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":25}},"8":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"9":{"start":{"line":23,"column":4},"end":{"line":23,"column":97}},"10":{"start":{"line":26,"column":2},"end":{"line":26,"column":50}},"11":{"start":{"line":28,"column":2},"end":{"line":28,"column":79}},"12":{"start":{"line":29,"column":2},"end":{"line":35,"column":3}},"13":{"start":{"line":30,"column":4},"end":{"line":34,"column":5}},"14":{"start":{"line":31,"column":6},"end":{"line":31,"column":79}},"15":{"start":{"line":33,"column":6},"end":{"line":33,"column":75}},"16":{"start":{"line":37,"column":2},"end":{"line":40,"column":4}},"17":{"start":{"line":38,"column":4},"end":{"line":38,"column":60}},"18":{"start":{"line":38,"column":48},"end":{"line":38,"column":60}},"19":{"start":{"line":39,"column":4},"end":{"line":39,"column":13}},"20":{"start":{"line":42,"column":2},"end":{"line":75,"column":4}},"21":{"start":{"line":43,"column":4},"end":{"line":49,"column":5}},"22":{"start":{"line":44,"column":6},"end":{"line":44,"column":100}},"23":{"start":{"line":45,"column":6},"end":{"line":45,"column":61}},"24":{"start":{"line":46,"column":6},"end":{"line":46,"column":44}},"25":{"start":{"line":47,"column":6},"end":{"line":47,"column":44}},"26":{"start":{"line":48,"column":6},"end":{"line":48,"column":26}},"27":{"start":{"line":51,"column":4},"end":{"line":51,"column":75}},"28":{"start":{"line":53,"column":4},"end":{"line":56,"column":6}},"29":{"start":{"line":54,"column":6},"end":{"line":54,"column":98}},"30":{"start":{"line":54,"column":50},"end":{"line":54,"column":98}},"31":{"start":{"line":55,"column":6},"end":{"line":55,"column":15}},"32":{"start":{"line":58,"column":4},"end":{"line":74,"column":6}},"33":{"start":{"line":59,"column":6},"end":{"line":59,"column":34}},"34":{"start":{"line":60,"column":6},"end":{"line":60,"column":65}},"35":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"36":{"start":{"line":63,"column":8},"end":{"line":63,"column":108}},"37":{"start":{"line":63,"column":86},"end":{"line":63,"column":107}},"38":{"start":{"line":66,"column":6},"end":{"line":73,"column":8}},"39":{"start":{"line":72,"column":8},"end":{"line":72,"column":92}},"40":{"start":{"line":72,"column":78},"end":{"line":72,"column":91}},"41":{"start":{"line":78,"column":0},"end":{"line":128,"column":1}},"42":{"start":{"line":83,"column":2},"end":{"line":83,"column":57}},"43":{"start":{"line":84,"column":2},"end":{"line":84,"column":45}},"44":{"start":{"line":85,"column":2},"end":{"line":85,"column":45}},"45":{"start":{"line":86,"column":2},"end":{"line":86,"column":46}},"46":{"start":{"line":88,"column":2},"end":{"line":88,"column":40}},"47":{"start":{"line":89,"column":2},"end":{"line":89,"column":50}},"48":{"start":{"line":90,"column":2},"end":{"line":92,"column":3}},"49":{"start":{"line":91,"column":4},"end":{"line":91,"column":49}},"50":{"start":{"line":97,"column":2},"end":{"line":97,"column":25}},"51":{"start":{"line":99,"column":2},"end":{"line":99,"column":61}},"52":{"start":{"line":101,"column":2},"end":{"line":125,"column":4}},"53":{"start":{"line":102,"column":4},"end":{"line":102,"column":100}},"54":{"start":{"line":104,"column":4},"end":{"line":106,"column":5}},"55":{"start":{"line":105,"column":6},"end":{"line":105,"column":60}},"56":{"start":{"line":108,"column":4},"end":{"line":108,"column":61}},"57":{"start":{"line":109,"column":4},"end":{"line":111,"column":5}},"58":{"start":{"line":110,"column":6},"end":{"line":110,"column":12}},"59":{"start":{"line":113,"column":4},"end":{"line":113,"column":41}},"60":{"start":{"line":114,"column":4},"end":{"line":114,"column":44}},"61":{"start":{"line":117,"column":4},"end":{"line":117,"column":61}},"62":{"start":{"line":118,"column":4},"end":{"line":118,"column":107}},"63":{"start":{"line":119,"column":4},"end":{"line":119,"column":89}},"64":{"start":{"line":121,"column":4},"end":{"line":123,"column":6}},"65":{"start":{"line":122,"column":6},"end":{"line":122,"column":86}},"66":{"start":{"line":124,"column":4},"end":{"line":124,"column":34}},"67":{"start":{"line":127,"column":2},"end":{"line":127,"column":34}},"68":{"start":{"line":130,"column":0},"end":{"line":140,"column":1}},"69":{"start":{"line":131,"column":2},"end":{"line":139,"column":3}}},"branchMap":{"1":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":12},"end":{"line":20,"column":19}},{"start":{"line":20,"column":23},"end":{"line":20,"column":25}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"3":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":23}},{"start":{"line":22,"column":27},"end":{"line":22,"column":53}},{"start":{"line":22,"column":57},"end":{"line":22,"column":87}}]},"4":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":40},"end":{"line":28,"column":60}},{"start":{"line":28,"column":63},"end":{"line":28,"column":79}}]},"5":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"6":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":33}},{"start":{"line":29,"column":37},"end":{"line":29,"column":68}}]},"7":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"8":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":4},"end":{"line":38,"column":4}},{"start":{"line":38,"column":4},"end":{"line":38,"column":4}}]},"9":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":21}},{"start":{"line":38,"column":25},"end":{"line":38,"column":46}}]},"10":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"11":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":28},"end":{"line":44,"column":57}},{"start":{"line":44,"column":61},"end":{"line":44,"column":100}}]},"12":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":32},"end":{"line":45,"column":55}},{"start":{"line":45,"column":59},"end":{"line":45,"column":61}}]},"13":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":29},"end":{"line":51,"column":58}},{"start":{"line":51,"column":62},"end":{"line":51,"column":75}}]},"14":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"15":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":10},"end":{"line":54,"column":23}},{"start":{"line":54,"column":27},"end":{"line":54,"column":48}}]},"16":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"17":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":28},"end":{"line":83,"column":51}},{"start":{"line":83,"column":55},"end":{"line":83,"column":57}}]},"18":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]},"19":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":6},"end":{"line":90,"column":47}},{"start":{"line":90,"column":51},"end":{"line":90,"column":84}}]},"20":{"line":99,"type":"cond-expr","locations":[{"start":{"line":99,"column":31},"end":{"line":99,"column":56}},{"start":{"line":99,"column":59},"end":{"line":99,"column":61}}]},"21":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":25},"end":{"line":102,"column":50}},{"start":{"line":102,"column":54},"end":{"line":102,"column":100}}]},"22":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":104,"column":4}},{"start":{"line":104,"column":4},"end":{"line":104,"column":4}}]},"23":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":109,"column":4}},{"start":{"line":109,"column":4},"end":{"line":109,"column":4}}]},"24":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":29}},{"start":{"line":109,"column":33},"end":{"line":109,"column":57}}]},"25":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":28},"end":{"line":117,"column":50}},{"start":{"line":117,"column":54},"end":{"line":117,"column":61}}]}},"code":["/* @flow */","\"use strict\"","const _ = require(\"lodash\")","const assignDisabledRanges = require(\"./assignDisabledRanges\")","const configurationError = require(\"./utils/configurationError\")","const path = require(\"path\")","const ruleDefinitions = require(\"./rules\")","","// Run stylelint on a PostCSS Result, either one that is provided","// or one that we create","module.exports = function (","  stylelint/*: stylelint$internalApi*/,","  options/*: {","    code?: string,","    codeFilename?: string, // Must be an absolute file path","    filePath?: string, // Must be an absolute file path","    existingPostcssResult?: Object,","  }*/",")/*: Promise<Object>*/ {","  options = options || {}","","  if (!options.filePath && options.code === undefined && !options.existingPostcssResult) {","    return Promise.reject(new Error(\"You must provide filePath, code, or existingPostcssResult\"))","  }","","  const isCodeNotFile = options.code !== undefined","","  const inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath","  if (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {","    if (isCodeNotFile) {","      return Promise.reject(new Error(\"codeFilename must be an absolute path\"))","    } else {","      return Promise.reject(new Error(\"filePath must be an absolute path\"))","    }","  }","","  const getIsIgnored = stylelint.isPathIgnored(inputFilePath).catch(err => {","    if (isCodeNotFile && err.code === \"ENOENT\") return false","    throw err","  })","","  return getIsIgnored.then(isIgnored => {","    if (isIgnored) {","      const postcssResult = options.existingPostcssResult || createEmptyPostcssResult(inputFilePath)","      postcssResult.stylelint = postcssResult.stylelint || {}","      postcssResult.stylelint.ignored = true","      postcssResult.standaloneIgnored = true // TODO: remove need for this","      return postcssResult","    }","","    const configSearchPath = stylelint._options.configFile || inputFilePath","","    const getConfig = stylelint.getConfigForFile(configSearchPath).catch(err => {","      if (isCodeNotFile && err.code === \"ENOENT\") return stylelint.getConfigForFile(process.cwd())","      throw err","    })","","    return getConfig.then((result) => {","      const config = result.config","      const existingPostcssResult = options.existingPostcssResult","","      if (existingPostcssResult) {","        return lintPostcssResult(stylelint, existingPostcssResult, config).then(() => existingPostcssResult)","      }","","      return stylelint._getPostcssResult({","        code: options.code,","        codeFilename: options.codeFilename,","        filePath: inputFilePath,","        codeProcessors: config.codeProcessors,","      }).then(postcssResult => {","        return lintPostcssResult(stylelint, postcssResult, config).then(() => postcssResult)","      })","    })","  })","}","","function lintPostcssResult(","  stylelint/*: stylelint$internalApi*/,","  postcssResult/*: Object*/,","  config/*: stylelint$config*/",")/*: Promise<>*/ {","  postcssResult.stylelint = postcssResult.stylelint || {}","  postcssResult.stylelint.ruleSeverities = {}","  postcssResult.stylelint.customMessages = {}","  postcssResult.stylelint.quiet = config.quiet","","  const postcssRoot = postcssResult.root","  assignDisabledRanges(postcssRoot, postcssResult)","  if (stylelint._options.reportNeedlessDisables || stylelint._options.ignoreDisables) {","    postcssResult.stylelint.ignoreDisables = true","  }","","  // Promises for the rules. Although the rule code runs synchronously now,","  // the use of Promises makes it compatible with the possibility of async","  // rules down the line.","  const performRules = []","","  const rules = config.rules ? Object.keys(config.rules) : []","","  rules.forEach(ruleName => {","    const ruleFunction = ruleDefinitions[ruleName] || _.get(config, [ \"pluginFunctions\", ruleName ])","","    if (ruleFunction === undefined) {","      throw configurationError(`Undefined rule ${ruleName}`)","    }","","    const ruleSettings = _.get(config, [ \"rules\", ruleName ])","    if (ruleSettings === null || ruleSettings[0] === null) {","      return","    }","","    const primaryOption = ruleSettings[0]","    const secondaryOptions = ruleSettings[1]","","    // Log the rule's severity in the PostCSS result","    const defaultSeverity = config.defaultSeverity || \"error\"","    postcssResult.stylelint.ruleSeverities[ruleName] = _.get(secondaryOptions, \"severity\", defaultSeverity)","    postcssResult.stylelint.customMessages[ruleName] = _.get(secondaryOptions, \"message\")","","    const performRule = Promise.resolve().then(() => {","      return ruleFunction(primaryOption, secondaryOptions)(postcssRoot, postcssResult)","    })","    performRules.push(performRule)","  })","","  return Promise.all(performRules)","}","","function createEmptyPostcssResult(filePath/*:: ?: string*/)/*: Object*/ {","  return {","    root: {","      source: {","        input: { file: filePath },","      },","    },","    messages: [],","    stylelint: { stylelintError: null },","  }","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"11":1,"20":0,"22":0,"23":0,"26":0,"28":0,"29":0,"30":0,"31":0,"33":0,"37":0,"38":0,"39":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"51":0,"53":0,"54":0,"55":0,"58":0,"59":0,"60":0,"62":0,"63":0,"66":0,"72":0,"78":1,"83":0,"84":0,"85":0,"86":0,"88":0,"89":0,"90":0,"91":0,"97":0,"99":0,"101":0,"102":0,"104":0,"105":0,"108":0,"109":0,"110":0,"113":0,"114":0,"117":0,"118":0,"119":0,"121":0,"122":0,"124":0,"127":0,"130":1,"131":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/postcssPlugin.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/postcssPlugin.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":45},"end":{"line":8,"column":64}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"5":{"start":{"line":8,"column":0},"end":{"line":27,"column":2}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":25}},"7":{"start":{"line":11,"column":2},"end":{"line":13,"column":13}},"8":{"start":{"line":14,"column":2},"end":{"line":14,"column":52}},"9":{"start":{"line":16,"column":2},"end":{"line":26,"column":3}},"10":{"start":{"line":17,"column":4},"end":{"line":17,"column":67}},"11":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"12":{"start":{"line":19,"column":6},"end":{"line":19,"column":51}},"13":{"start":{"line":22,"column":4},"end":{"line":25,"column":6}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":12},"end":{"line":9,"column":19}},{"start":{"line":9,"column":23},"end":{"line":9,"column":25}}]},"2":{"line":11,"type":"cond-expr","locations":[{"start":{"line":12,"column":6},"end":{"line":12,"column":25}},{"start":{"line":13,"column":6},"end":{"line":13,"column":13}}]},"3":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":19},"end":{"line":17,"column":31}},{"start":{"line":17,"column":35},"end":{"line":17,"column":67}}]},"4":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"5":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},{"start":{"line":18,"column":34},"end":{"line":18,"column":60}}]}},"code":["/* @flow */","\"use strict\"","const _ = require(\"lodash\")","const createStylelint = require(\"./createStylelint\")","const postcss = require(\"postcss\")","const path = require(\"path\")","","module.exports = postcss.plugin(\"stylelint\", function (options) {","  options = options || {}","","  const tailoredOptions/*: Object*/ = options.rules","    ? { config: options }","    : options","  const stylelint = createStylelint(tailoredOptions)","","  return (root, result) => {","    let filePath = options.from || _.get(root, \"source.input.file\")","    if (filePath !== undefined && !path.isAbsolute(filePath)) {","      filePath = path.join(process.cwd(), filePath)","    }","","    return stylelint._lintSource({","      filePath,","      existingPostcssResult: result,","    })","  }","})",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":0,"11":0,"14":0,"16":0,"17":0,"18":0,"19":0,"22":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/formatters/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/formatters/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":7,"column":1}}},"branchMap":{},"code":["\"use strict\"","","module.exports = {","  json: require(\"./jsonFormatter\"),","  string: require(\"./stringFormatter\"),","  verbose: require(\"./verboseFormatter\"),","}",""],"l":{"3":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/formatters/jsonFormatter.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/formatters/jsonFormatter.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":17},"end":{"line":6,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":11,"column":1}},"3":{"start":{"line":7,"column":2},"end":{"line":9,"column":4}},"4":{"start":{"line":8,"column":4},"end":{"line":8,"column":59}},"5":{"start":{"line":8,"column":44},"end":{"line":8,"column":58}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":39}}},"branchMap":{},"code":["\"use strict\"","","const _ = require(\"lodash\")","","// Omit any properties starting with `_`, which are fake-private","module.exports = function (results) {","  const cleanedResults = results.map(result => {","    return _.omitBy(result, (value, key) => key[0] === \"_\")","  })","  return JSON.stringify(cleanedResults)","}",""],"l":{"3":1,"6":1,"7":0,"8":0,"10":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/formatters/stringFormatter.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/formatters/stringFormatter.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"deprecationsFormatter","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":40}}},"2":{"name":"invalidOptionsFormatter","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":42}}},"3":{"name":"logFrom","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":28}}},"4":{"name":"getMessageWidth","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":39}}},"5":{"name":"formatter","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":37}}},"6":{"name":"(anonymous_6)","line":80,"loc":{"start":{"line":80,"column":26},"end":{"line":80,"column":45}}},"7":{"name":"(anonymous_7)","line":123,"loc":{"start":{"line":123,"column":17},"end":{"line":123,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":30}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":38}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":50}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":23}},"9":{"start":{"line":13,"column":0},"end":{"line":17,"column":1}},"10":{"start":{"line":19,"column":0},"end":{"line":36,"column":1}},"11":{"start":{"line":20,"column":2},"end":{"line":20,"column":67}},"12":{"start":{"line":21,"column":2},"end":{"line":21,"column":76}},"13":{"start":{"line":23,"column":2},"end":{"line":25,"column":3}},"14":{"start":{"line":24,"column":4},"end":{"line":24,"column":13}},"15":{"start":{"line":27,"column":2},"end":{"line":35,"column":10}},"16":{"start":{"line":28,"column":4},"end":{"line":28,"column":51}},"17":{"start":{"line":29,"column":4},"end":{"line":29,"column":26}},"18":{"start":{"line":30,"column":4},"end":{"line":33,"column":5}},"19":{"start":{"line":31,"column":6},"end":{"line":31,"column":35}},"20":{"start":{"line":32,"column":6},"end":{"line":32,"column":54}},"21":{"start":{"line":34,"column":4},"end":{"line":34,"column":24}},"22":{"start":{"line":38,"column":0},"end":{"line":47,"column":1}},"23":{"start":{"line":39,"column":2},"end":{"line":39,"column":100}},"24":{"start":{"line":39,"column":59},"end":{"line":39,"column":99}},"25":{"start":{"line":39,"column":92},"end":{"line":39,"column":98}},"26":{"start":{"line":40,"column":2},"end":{"line":40,"column":70}},"27":{"start":{"line":42,"column":2},"end":{"line":46,"column":10}},"28":{"start":{"line":43,"column":4},"end":{"line":43,"column":43}},"29":{"start":{"line":44,"column":4},"end":{"line":44,"column":21}},"30":{"start":{"line":45,"column":4},"end":{"line":45,"column":24}},"31":{"start":{"line":49,"column":0},"end":{"line":52,"column":1}},"32":{"start":{"line":50,"column":2},"end":{"line":50,"column":51}},"33":{"start":{"line":50,"column":35},"end":{"line":50,"column":51}},"34":{"start":{"line":51,"column":2},"end":{"line":51,"column":74}},"35":{"start":{"line":54,"column":0},"end":{"line":68,"column":1}},"36":{"start":{"line":55,"column":2},"end":{"line":57,"column":3}},"37":{"start":{"line":56,"column":4},"end":{"line":56,"column":26}},"38":{"start":{"line":59,"column":2},"end":{"line":59,"column":82}},"39":{"start":{"line":60,"column":2},"end":{"line":60,"column":49}},"40":{"start":{"line":63,"column":2},"end":{"line":65,"column":3}},"41":{"start":{"line":64,"column":4},"end":{"line":64,"column":26}},"42":{"start":{"line":67,"column":2},"end":{"line":67,"column":71}},"43":{"start":{"line":70,"column":0},"end":{"line":121,"column":1}},"44":{"start":{"line":71,"column":2},"end":{"line":71,"column":33}},"45":{"start":{"line":71,"column":24},"end":{"line":71,"column":33}},"46":{"start":{"line":73,"column":2},"end":{"line":74,"column":29}},"47":{"start":{"line":73,"column":50},"end":{"line":73,"column":64}},"48":{"start":{"line":74,"column":7},"end":{"line":74,"column":13}},"49":{"start":{"line":74,"column":20},"end":{"line":74,"column":28}},"50":{"start":{"line":78,"column":2},"end":{"line":78,"column":55}},"51":{"start":{"line":80,"column":2},"end":{"line":87,"column":3}},"52":{"start":{"line":81,"column":4},"end":{"line":84,"column":6}},"53":{"start":{"line":82,"column":6},"end":{"line":82,"column":62}},"54":{"start":{"line":83,"column":6},"end":{"line":83,"column":83}},"55":{"start":{"line":86,"column":4},"end":{"line":86,"column":18}},"56":{"start":{"line":89,"column":2},"end":{"line":89,"column":19}},"57":{"start":{"line":91,"column":2},"end":{"line":93,"column":3}},"58":{"start":{"line":92,"column":4},"end":{"line":92,"column":53}},"59":{"start":{"line":95,"column":2},"end":{"line":106,"column":4}},"60":{"start":{"line":96,"column":4},"end":{"line":96,"column":47}},"61":{"start":{"line":97,"column":4},"end":{"line":97,"column":37}},"62":{"start":{"line":98,"column":4},"end":{"line":101,"column":128}},"63":{"start":{"line":103,"column":4},"end":{"line":103,"column":24}},"64":{"start":{"line":105,"column":4},"end":{"line":105,"column":14}},"65":{"start":{"line":108,"column":2},"end":{"line":118,"column":107}},"66":{"start":{"line":117,"column":30},"end":{"line":117,"column":35}},"67":{"start":{"line":118,"column":27},"end":{"line":118,"column":95}},"68":{"start":{"line":118,"column":70},"end":{"line":118,"column":94}},"69":{"start":{"line":120,"column":2},"end":{"line":120,"column":15}},"70":{"start":{"line":123,"column":0},"end":{"line":140,"column":1}},"71":{"start":{"line":124,"column":2},"end":{"line":124,"column":47}},"72":{"start":{"line":125,"column":2},"end":{"line":125,"column":42}},"73":{"start":{"line":127,"column":2},"end":{"line":130,"column":12}},"74":{"start":{"line":128,"column":4},"end":{"line":128,"column":55}},"75":{"start":{"line":129,"column":4},"end":{"line":129,"column":17}},"76":{"start":{"line":133,"column":2},"end":{"line":133,"column":24}},"77":{"start":{"line":135,"column":2},"end":{"line":137,"column":3}},"78":{"start":{"line":136,"column":4},"end":{"line":136,"column":35}},"79":{"start":{"line":139,"column":2},"end":{"line":139,"column":15}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":2},"end":{"line":23,"column":2}},{"start":{"line":23,"column":2},"end":{"line":23,"column":2}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":6},"end":{"line":23,"column":32}},{"start":{"line":23,"column":36},"end":{"line":23,"column":69}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":2},"end":{"line":50,"column":2}},{"start":{"line":50,"column":2},"end":{"line":50,"column":2}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":2},"end":{"line":55,"column":2}},{"start":{"line":55,"column":2},"end":{"line":55,"column":2}}]},"6":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":55},"end":{"line":59,"column":57}},{"start":{"line":59,"column":60},"end":{"line":59,"column":82}}]},"7":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"8":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"9":{"line":73,"type":"cond-expr","locations":[{"start":{"line":73,"column":59},"end":{"line":73,"column":60}},{"start":{"line":73,"column":63},"end":{"line":73,"column":64}}]},"10":{"line":82,"type":"cond-expr","locations":[{"start":{"line":82,"column":38},"end":{"line":82,"column":54}},{"start":{"line":82,"column":57},"end":{"line":82,"column":62}}]},"11":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":2},"end":{"line":91,"column":2}},{"start":{"line":91,"column":2},"end":{"line":91,"column":2}}]},"12":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":18},"end":{"line":98,"column":31}},{"start":{"line":98,"column":35},"end":{"line":98,"column":37}}]},"13":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":39},"end":{"line":98,"column":54}},{"start":{"line":98,"column":58},"end":{"line":98,"column":60}}]},"14":{"line":98,"type":"cond-expr","locations":[{"start":{"line":98,"column":82},"end":{"line":98,"column":129}},{"start":{"line":98,"column":132},"end":{"line":98,"column":140}}]},"15":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":107},"end":{"line":101,"column":119}},{"start":{"line":101,"column":123},"end":{"line":101,"column":125}}]},"16":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":2},"end":{"line":135,"column":2}},{"start":{"line":135,"column":2},"end":{"line":135,"column":2}}]}},"code":["\"use strict\"","","const table = require(\"table\")","const _ = require(\"lodash\")","const chalk = require(\"chalk\")","const path = require(\"path\")","const stringWidth = require(\"string-width\")","const symbols = require(\"log-symbols\")","const utils = require(\"postcss-reporter/lib/util\")","","const MARGIN_WIDTHS = 9","","const levelColors = {","  info: \"blue\",","  warning: \"yellow\",","  error: \"red\",","}","","function deprecationsFormatter(results) {","  const allDeprecationWarnings = _.flatMap(results, \"deprecations\")","  const uniqueDeprecationWarnings = _.uniqBy(allDeprecationWarnings, \"text\")","","  if (!uniqueDeprecationWarnings || !uniqueDeprecationWarnings.length) {","    return \"\"","  }","","  return uniqueDeprecationWarnings.reduce((output, warning) => {","    output += chalk.yellow(\"Deprecation Warning: \")","    output += warning.text","    if (warning.reference) {","      output += chalk.dim(\" See: \")","      output += chalk.dim.underline(warning.reference)","    }","    return output + \"\\n\"","  }, \"\\n\")","}","","function invalidOptionsFormatter(results) {","  const allInvalidOptionWarnings = _.flatMap(results, r => r.invalidOptionWarnings.map(w => w.text))","  const uniqueInvalidOptionWarnings = _.uniq(allInvalidOptionWarnings)","","  return uniqueInvalidOptionWarnings.reduce((output, warning) => {","    output += chalk.red(\"Invalid Option: \")","    output += warning","    return output + \"\\n\"","  }, \"\\n\")","}","","function logFrom(fromValue) {","  if (fromValue.charAt(0) === \"<\") return fromValue","  return path.relative(process.cwd(), fromValue).split(path.sep).join(\"/\")","}","","function getMessageWidth(columnWidths) {","  if (!process.stdout.isTTY) {","    return columnWidths[3]","  }","","  const availableWidth = process.stdout.columns < 80 ? 80 : process.stdout.columns","  const fullWidth = _.sum(_.values(columnWidths))","","  // If there is no reason to wrap the text, we won't align the last column to the right","  if (availableWidth > fullWidth + MARGIN_WIDTHS) {","    return columnWidths[3]","  }","","  return availableWidth - (fullWidth - columnWidths[3] + MARGIN_WIDTHS)","}","","function formatter(messages, source) {","  if (!messages.length) return \"\"","","  const orderedMessages = _.sortBy(messages, m => m.line ? 2 : 1, // positionless first","  m => m.line, m => m.column)","","  // Create a list of column widths, needed to calculate","  // the size of the message column and if needed wrap it.","  const columnWidths = { 0: 1, 1: 1, 2: 1, 3: 1, 4: 1 }","","  const calculateWidths = function (columns) {","    _.forOwn(columns, (value, key) => {","      const normalisedValue = value ? value.toString() : value","      columnWidths[key] = Math.max(columnWidths[key], stringWidth(normalisedValue))","    })","","    return columns","  }","","  let output = \"\\n\"","","  if (source) {","    output += chalk.underline(logFrom(source)) + \"\\n\"","  }","","  const cleanedMessages = orderedMessages.map(message => {","    const location = utils.getLocation(message)","    const severity = message.severity","    const row = [ location.line || \"\", location.column || \"\", symbols[severity] ? chalk[levelColors[severity]](symbols[severity]) : severity, message.text","    // Remove all control characters (newline, tab and etc)","    .replace(/[\\x01-\\x1A]+/g, \" \") // eslint-disable-line","    .replace(/\\.$/, \"\").replace(new RegExp(_.escapeRegExp(\"(\" + message.rule + \")\") + \"$\"), \"\"), chalk.dim(message.rule || \"\") ]","","    calculateWidths(row)","","    return row","  })","","  output += table.table(cleanedMessages, {","    border: table.getBorderCharacters(\"void\"),","    columns: {","      0: { alignment: \"right\", width: columnWidths[0], paddingRight: 0 },","      1: { alignment: \"left\", width: columnWidths[1] },","      2: { alignment: \"center\", width: columnWidths[2] },","      3: { alignment: \"left\", width: getMessageWidth(columnWidths), wrapWord: true },","      4: { alignment: \"left\", width: columnWidths[4], paddingRight: 0 },","    },","    drawHorizontalLine: () => false,","  }).split(\"\\n\").map(el => el.replace(/(\\d+)\\s+(\\d+)/, (m, p1, p2) => chalk.dim(p1 + \":\" + p2))).join(\"\\n\")","","  return output","}","","module.exports = function (results) {","  let output = invalidOptionsFormatter(results)","  output += deprecationsFormatter(results)","","  output = results.reduce((output, result) => {","    output += formatter(result.warnings, result.source)","    return output","  }, output)","","  // Ensure consistent padding","  output = output.trim()","","  if (output !== \"\") {","    output = \"\\n\" + output + \"\\n\\n\"","  }","","  return output","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"19":1,"20":0,"21":0,"23":0,"24":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"34":0,"38":1,"39":0,"40":0,"42":0,"43":0,"44":0,"45":0,"49":1,"50":0,"51":0,"54":1,"55":0,"56":0,"59":0,"60":0,"63":0,"64":0,"67":0,"70":1,"71":0,"73":0,"74":0,"78":0,"80":0,"81":0,"82":0,"83":0,"86":0,"89":0,"91":0,"92":0,"95":0,"96":0,"97":0,"98":0,"103":0,"105":0,"108":0,"117":0,"118":0,"120":0,"123":1,"124":0,"125":0,"127":0,"128":0,"129":0,"133":0,"135":0,"136":0,"139":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/formatters/verboseFormatter.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/formatters/verboseFormatter.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":30}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":52}},"4":{"start":{"line":7,"column":0},"end":{"line":49,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":39}},"6":{"start":{"line":10,"column":2},"end":{"line":12,"column":3}},"7":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"8":{"start":{"line":14,"column":2},"end":{"line":14,"column":62}},"9":{"start":{"line":15,"column":2},"end":{"line":15,"column":70}},"10":{"start":{"line":15,"column":48},"end":{"line":15,"column":62}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":112}},"12":{"start":{"line":17,"column":2},"end":{"line":17,"column":72}},"13":{"start":{"line":18,"column":2},"end":{"line":32,"column":4}},"14":{"start":{"line":19,"column":4},"end":{"line":19,"column":28}},"15":{"start":{"line":20,"column":4},"end":{"line":26,"column":5}},"16":{"start":{"line":21,"column":6},"end":{"line":21,"column":24}},"17":{"start":{"line":22,"column":11},"end":{"line":26,"column":5}},"18":{"start":{"line":23,"column":6},"end":{"line":23,"column":27}},"19":{"start":{"line":24,"column":11},"end":{"line":26,"column":5}},"20":{"start":{"line":25,"column":6},"end":{"line":25,"column":24}},"21":{"start":{"line":27,"column":4},"end":{"line":27,"column":39}},"22":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"23":{"start":{"line":29,"column":6},"end":{"line":29,"column":32}},"24":{"start":{"line":31,"column":4},"end":{"line":31,"column":58}},"25":{"start":{"line":34,"column":2},"end":{"line":34,"column":58}},"26":{"start":{"line":34,"column":46},"end":{"line":34,"column":56}},"27":{"start":{"line":35,"column":2},"end":{"line":35,"column":60}},"28":{"start":{"line":36,"column":2},"end":{"line":36,"column":68}},"29":{"start":{"line":38,"column":2},"end":{"line":38,"column":74}},"30":{"start":{"line":40,"column":2},"end":{"line":46,"column":4}},"31":{"start":{"line":41,"column":4},"end":{"line":41,"column":57}},"32":{"start":{"line":42,"column":4},"end":{"line":42,"column":75}},"33":{"start":{"line":43,"column":4},"end":{"line":45,"column":6}},"34":{"start":{"line":44,"column":6},"end":{"line":44,"column":56}},"35":{"start":{"line":48,"column":2},"end":{"line":48,"column":22}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":2},"end":{"line":10,"column":2}},{"start":{"line":10,"column":2},"end":{"line":10,"column":2}}]},"2":{"line":14,"type":"cond-expr","locations":[{"start":{"line":14,"column":42},"end":{"line":14,"column":51}},{"start":{"line":14,"column":54},"end":{"line":14,"column":62}}]},"3":{"line":16,"type":"cond-expr","locations":[{"start":{"line":16,"column":40},"end":{"line":16,"column":95}},{"start":{"line":16,"column":98},"end":{"line":16,"column":112}}]},"4":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"5":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":11},"end":{"line":22,"column":11}},{"start":{"line":22,"column":11},"end":{"line":22,"column":11}}]},"6":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":11},"end":{"line":24,"column":11}},{"start":{"line":24,"column":11},"end":{"line":24,"column":11}}]},"7":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"8":{"line":36,"type":"cond-expr","locations":[{"start":{"line":36,"column":46},"end":{"line":36,"column":55}},{"start":{"line":36,"column":58},"end":{"line":36,"column":68}}]}},"code":["\"use strict\"","","const _ = require(\"lodash\")","const chalk = require(\"chalk\")","const stringFormatter = require(\"./stringFormatter\")","","module.exports = function (results) {","  let output = stringFormatter(results)","","  if (output === \"\") {","    output = \"\\n\"","  }","","  const sourceWord = results.length > 1 ? \"sources\" : \"source\"","  const ignoredCount = results.filter(result => result.ignored).length","  const checkedDisplay = ignoredCount ? `${results.length - ignoredCount} of ${results.length}` : results.length","  output += chalk.underline(`${checkedDisplay} ${sourceWord} checked\\n`)","  results.forEach(result => {","    let formatting = \"green\"","    if (result.errored) {","      formatting = \"red\"","    } else if (result.warnings.length) {","      formatting = \"yellow\"","    } else if (result.ignored) {","      formatting = \"dim\"","    }","    let sourceText = `${result.source}`","    if (result.ignored) {","      sourceText += \" (ignored)\"","    }","    output += _.get(chalk, formatting)(` ${sourceText}\\n`)","  })","","  const warnings = _.flatten(results.map(r => r.warnings))","  const warningsBySeverity = _.groupBy(warnings, \"severity\")","  const problemWord = warnings.length === 1 ? \"problem\" : \"problems\"","","  output += chalk.underline(`\\n${warnings.length} ${problemWord} found\\n`)","","  _.forOwn(warningsBySeverity, (warningList, severityLevel) => {","    const warningsByRule = _.groupBy(warningList, \"rule\")","    output += ` severity level \"${severityLevel}\": ${warningList.length}\\n`","    _.forOwn(warningsByRule, (list, rule) => {","      output += chalk.dim(`  ${rule}: ${list.length}\\n`)","    })","  })","","  return output + \"\\n\"","}",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"10":0,"11":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"27":0,"28":0,"29":0,"31":0,"34":0,"35":0,"36":0,"38":0,"40":0,"41":0,"42":0,"43":0,"44":0,"48":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/standalone.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/standalone.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":17},"end":{"line":30,"column":116}}},"2":{"name":"prepareReturnValue","line":163,"loc":{"start":{"line":163,"column":2},"end":{"line":163,"column":114}}},"3":{"name":"handleError","line":181,"loc":{"start":{"line":181,"column":0},"end":{"line":181,"column":40}}},"4":{"name":"convertCssSyntaxErrorToResult","line":193,"loc":{"start":{"line":193,"column":0},"end":{"line":193,"column":89}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":52}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":68}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":46}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":54}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":38}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":36}},"11":{"start":{"line":30,"column":0},"end":{"line":179,"column":1}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":29}},"13":{"start":{"line":32,"column":2},"end":{"line":32,"column":27}},"14":{"start":{"line":33,"column":2},"end":{"line":33,"column":43}},"15":{"start":{"line":34,"column":2},"end":{"line":34,"column":31}},"16":{"start":{"line":35,"column":2},"end":{"line":35,"column":39}},"17":{"start":{"line":36,"column":2},"end":{"line":36,"column":45}},"18":{"start":{"line":37,"column":2},"end":{"line":37,"column":49}},"19":{"start":{"line":38,"column":2},"end":{"line":38,"column":47}},"20":{"start":{"line":39,"column":2},"end":{"line":39,"column":39}},"21":{"start":{"line":40,"column":2},"end":{"line":40,"column":63}},"22":{"start":{"line":41,"column":2},"end":{"line":41,"column":37}},"23":{"start":{"line":42,"column":2},"end":{"line":42,"column":31}},"24":{"start":{"line":43,"column":2},"end":{"line":43,"column":43}},"25":{"start":{"line":44,"column":2},"end":{"line":44,"column":49}},"26":{"start":{"line":45,"column":2},"end":{"line":45,"column":45}},"27":{"start":{"line":46,"column":2},"end":{"line":46,"column":41}},"28":{"start":{"line":47,"column":2},"end":{"line":47,"column":15}},"29":{"start":{"line":49,"column":2},"end":{"line":49,"column":30}},"30":{"start":{"line":51,"column":2},"end":{"line":51,"column":46}},"31":{"start":{"line":52,"column":2},"end":{"line":54,"column":3}},"32":{"start":{"line":53,"column":4},"end":{"line":53,"column":97}},"33":{"start":{"line":56,"column":2},"end":{"line":56,"column":23}},"34":{"start":{"line":57,"column":2},"end":{"line":66,"column":3}},"35":{"start":{"line":58,"column":4},"end":{"line":58,"column":45}},"36":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"37":{"start":{"line":60,"column":6},"end":{"line":60,"column":123}},"38":{"start":{"line":62,"column":9},"end":{"line":66,"column":3}},"39":{"start":{"line":63,"column":4},"end":{"line":63,"column":33}},"40":{"start":{"line":65,"column":4},"end":{"line":65,"column":39}},"41":{"start":{"line":68,"column":2},"end":{"line":78,"column":4}},"42":{"start":{"line":80,"column":2},"end":{"line":92,"column":3}},"43":{"start":{"line":81,"column":4},"end":{"line":83,"column":20}},"44":{"start":{"line":84,"column":4},"end":{"line":91,"column":6}},"45":{"start":{"line":88,"column":6},"end":{"line":88,"column":60}},"46":{"start":{"line":90,"column":6},"end":{"line":90,"column":50}},"47":{"start":{"line":94,"column":2},"end":{"line":94,"column":22}},"48":{"start":{"line":95,"column":2},"end":{"line":97,"column":3}},"49":{"start":{"line":96,"column":4},"end":{"line":96,"column":25}},"50":{"start":{"line":98,"column":2},"end":{"line":100,"column":3}},"51":{"start":{"line":99,"column":35},"end":{"line":99,"column":45}},"52":{"start":{"line":102,"column":2},"end":{"line":111,"column":3}},"53":{"start":{"line":103,"column":4},"end":{"line":103,"column":40}},"54":{"start":{"line":104,"column":4},"end":{"line":104,"column":78}},"55":{"start":{"line":105,"column":4},"end":{"line":105,"column":58}},"56":{"start":{"line":108,"column":4},"end":{"line":108,"column":44}},"57":{"start":{"line":110,"column":4},"end":{"line":110,"column":23}},"58":{"start":{"line":113,"column":2},"end":{"line":161,"column":29}},"59":{"start":{"line":114,"column":4},"end":{"line":134,"column":5}},"60":{"start":{"line":115,"column":6},"end":{"line":133,"column":7}},"61":{"start":{"line":116,"column":8},"end":{"line":126,"column":42}},"62":{"start":{"line":117,"column":10},"end":{"line":119,"column":11}},"63":{"start":{"line":118,"column":12},"end":{"line":118,"column":34}},"64":{"start":{"line":121,"column":10},"end":{"line":121,"column":40}},"65":{"start":{"line":122,"column":10},"end":{"line":122,"column":36}},"66":{"start":{"line":124,"column":10},"end":{"line":124,"column":79}},"67":{"start":{"line":125,"column":10},"end":{"line":125,"column":57}},"68":{"start":{"line":128,"column":8},"end":{"line":128,"column":50}},"69":{"start":{"line":129,"column":8},"end":{"line":129,"column":21}},"70":{"start":{"line":130,"column":8},"end":{"line":130,"column":17}},"71":{"start":{"line":132,"column":8},"end":{"line":132,"column":30}},"72":{"start":{"line":136,"column":4},"end":{"line":141,"column":6}},"73":{"start":{"line":137,"column":6},"end":{"line":139,"column":34}},"74":{"start":{"line":140,"column":6},"end":{"line":140,"column":29}},"75":{"start":{"line":143,"column":4},"end":{"line":145,"column":5}},"76":{"start":{"line":144,"column":6},"end":{"line":144,"column":92}},"77":{"start":{"line":147,"column":4},"end":{"line":158,"column":6}},"78":{"start":{"line":148,"column":6},"end":{"line":148,"column":45}},"79":{"start":{"line":149,"column":6},"end":{"line":157,"column":27}},"80":{"start":{"line":152,"column":8},"end":{"line":155,"column":9}},"81":{"start":{"line":153,"column":10},"end":{"line":153,"column":86}},"82":{"start":{"line":154,"column":10},"end":{"line":154,"column":49}},"83":{"start":{"line":156,"column":8},"end":{"line":156,"column":80}},"84":{"start":{"line":160,"column":4},"end":{"line":160,"column":43}},"85":{"start":{"line":163,"column":2},"end":{"line":178,"column":3}},"86":{"start":{"line":164,"column":4},"end":{"line":164,"column":67}},"87":{"start":{"line":164,"column":52},"end":{"line":164,"column":66}},"88":{"start":{"line":165,"column":4},"end":{"line":169,"column":5}},"89":{"start":{"line":170,"column":4},"end":{"line":172,"column":5}},"90":{"start":{"line":171,"column":6},"end":{"line":171,"column":71}},"91":{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},"92":{"start":{"line":174,"column":6},"end":{"line":174,"column":27}},"93":{"start":{"line":176,"column":4},"end":{"line":176,"column":60}},"94":{"start":{"line":177,"column":4},"end":{"line":177,"column":22}},"95":{"start":{"line":181,"column":0},"end":{"line":187,"column":1}},"96":{"start":{"line":182,"column":2},"end":{"line":186,"column":3}},"97":{"start":{"line":183,"column":4},"end":{"line":183,"column":47}},"98":{"start":{"line":185,"column":4},"end":{"line":185,"column":15}},"99":{"start":{"line":193,"column":0},"end":{"line":211,"column":1}},"100":{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},"101":{"start":{"line":195,"column":4},"end":{"line":195,"column":15}},"102":{"start":{"line":198,"column":2},"end":{"line":210,"column":3}}},"branchMap":{"1":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":19},"end":{"line":46,"column":32}},{"start":{"line":46,"column":36},"end":{"line":46,"column":41}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":2},"end":{"line":52,"column":2}},{"start":{"line":52,"column":2},"end":{"line":52,"column":2}}]},"3":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":12}},{"start":{"line":52,"column":16},"end":{"line":52,"column":28}},{"start":{"line":52,"column":32},"end":{"line":52,"column":37}},{"start":{"line":52,"column":42},"end":{"line":52,"column":46}},{"start":{"line":52,"column":50},"end":{"line":52,"column":61}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":2},"end":{"line":57,"column":2}},{"start":{"line":57,"column":2},"end":{"line":57,"column":2}}]},"5":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"6":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":9},"end":{"line":62,"column":9}},{"start":{"line":62,"column":9},"end":{"line":62,"column":9}}]},"7":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"8":{"line":81,"type":"cond-expr","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":46}},{"start":{"line":83,"column":8},"end":{"line":83,"column":20}}]},"9":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":34},"end":{"line":81,"column":60}},{"start":{"line":81,"column":64},"end":{"line":81,"column":94}}]},"10":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":2},"end":{"line":95,"column":2}},{"start":{"line":95,"column":2},"end":{"line":95,"column":2}}]},"11":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":2},"end":{"line":102,"column":2}},{"start":{"line":102,"column":2},"end":{"line":102,"column":2}}]},"12":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"13":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":6}},{"start":{"line":115,"column":6},"end":{"line":115,"column":6}}]},"14":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":10},"end":{"line":115,"column":39}},{"start":{"line":115,"column":43},"end":{"line":115,"column":59}}]},"15":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":10},"end":{"line":117,"column":10}},{"start":{"line":117,"column":10},"end":{"line":117,"column":10}}]},"16":{"line":124,"type":"cond-expr","locations":[{"start":{"line":124,"column":45},"end":{"line":124,"column":61}},{"start":{"line":124,"column":64},"end":{"line":124,"column":78}}]},"17":{"line":137,"type":"cond-expr","locations":[{"start":{"line":138,"column":10},"end":{"line":138,"column":44}},{"start":{"line":139,"column":10},"end":{"line":139,"column":34}}]},"18":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":4},"end":{"line":143,"column":4}},{"start":{"line":143,"column":4},"end":{"line":143,"column":4}}]},"19":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":8},"end":{"line":152,"column":8}},{"start":{"line":152,"column":8},"end":{"line":152,"column":8}}]},"20":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":12},"end":{"line":152,"column":50}},{"start":{"line":152,"column":54},"end":{"line":152,"column":62}}]},"21":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":4},"end":{"line":170,"column":4}},{"start":{"line":170,"column":4},"end":{"line":170,"column":4}}]},"22":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":4},"end":{"line":173,"column":4}},{"start":{"line":173,"column":4},"end":{"line":173,"column":4}}]},"23":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":2},"end":{"line":182,"column":2}},{"start":{"line":182,"column":2},"end":{"line":182,"column":2}}]},"24":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":2},"end":{"line":194,"column":2}},{"start":{"line":194,"column":2},"end":{"line":194,"column":2}}]},"25":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":12},"end":{"line":199,"column":22}},{"start":{"line":199,"column":26},"end":{"line":199,"column":41}}]}},"code":["/* @flow */","\"use strict\"","const path = require(\"path\")","const formatters/*: Object*/ = require(\"./formatters\")","const createStylelint = require(\"./createStylelint\")","const globby/*: Function*/ = require(\"globby\")","const needlessDisables/*: Function*/ = require(\"./needlessDisables\")","const alwaysIgnoredGlobs = require(\"./alwaysIgnoredGlobs\")","const FileCache = require(\"./utils/FileCache\")","const debug = require(\"debug\")(\"stylelint:standalone\")","const pkg = require(\"../package.json\")","const hash = require(\"./utils/hash\")","","/*::type CssSyntaxErrorT = {","  column: number;","  file?: string;","  input: {","    column: number;","    file?: string;","    line: number;","    source: string;","  };","  line: number;","  message: string;","  name: string;","  reason: string;","  source: string;","}*/","","module.exports = function (options/*: stylelint$standaloneOptions */)/*: Promise<stylelint$standaloneReturnValue>*/ {","  const files = options.files","  const code = options.code","  const codeFilename = options.codeFilename","  const config = options.config","  const configFile = options.configFile","  const configBasedir = options.configBasedir","  const configOverrides = options.configOverrides","  const ignoreDisables = options.ignoreDisables","  const ignorePath = options.ignorePath","  const reportNeedlessDisables = options.reportNeedlessDisables","  const formatter = options.formatter","  const syntax = options.syntax","  const customSyntax = options.customSyntax","  const allowEmptyInput = options.allowEmptyInput","  const cacheLocation = options.cacheLocation","  const useCache = options.cache || false","  let fileCache","","  const startTime = Date.now()","","  const isValidCode = typeof code === \"string\"","  if (!files && !isValidCode || files && (code || isValidCode)) {","    throw new Error(\"You must pass stylelint a `files` glob or a `code` string, though not both\")","  }","","  let formatterFunction","  if (typeof formatter === \"string\") {","    formatterFunction = formatters[formatter]","    if (formatterFunction === undefined) {","      return Promise.reject(new Error(\"You must use a valid formatter option: 'json', 'string', 'verbose', or a function\"))","    }","  } else if (typeof formatter === \"function\") {","    formatterFunction = formatter","  } else {","    formatterFunction = formatters.json","  }","","  const stylelint = createStylelint({","    config,","    configFile,","    configBasedir,","    configOverrides,","    ignoreDisables,","    ignorePath,","    reportNeedlessDisables,","    syntax,","    customSyntax,","  })","","  if (!files) {","    const absoluteCodeFilename = (codeFilename !== undefined && !path.isAbsolute(codeFilename))","      ? path.join(process.cwd(), codeFilename)","      : codeFilename","    return stylelint._lintSource({","      code,","      codeFilename: absoluteCodeFilename,","    }).then(postcssResult => {","      return stylelint._createStylelintResult(postcssResult)","    }).catch(handleError).then(stylelintResult => {","      return prepareReturnValue([stylelintResult])","    })","  }","","  let fileList = files","  if (typeof fileList === \"string\") {","    fileList = [fileList]","  }","  fileList = fileList.concat(","    alwaysIgnoredGlobs.map(file => \"!\" + file)","  )","","  if (useCache) {","    const stylelintVersion = pkg.version","    const hashOfConfig = hash(`${stylelintVersion}_${JSON.stringify(config)}`)","    fileCache = new FileCache(cacheLocation, hashOfConfig)","  } else {","    // No need to calculate hash here, we just want to delete cache file.","    fileCache = new FileCache(cacheLocation)","    // Remove cache file if cache option is disabled","    fileCache.destroy()","  }","","  return globby(fileList).then(filePaths => {","    if (!filePaths.length) {","      if (allowEmptyInput === undefined || !allowEmptyInput) {","        const message = (files => {","          if (typeof files === \"string\") {","            return `${files} does`","          }","          // seperate files into last (last file) and initial) all the others","          const initial = files.slice(0)","          const last = initial.pop()","          // join into a comma seperated string of file names","          const ending = (files.length > 1 ? `and ${last} do` : `${last} does`)","          return `${initial.join(\", \")} ${ending}`.trim()","        })(files) + \" not match any files\"","","        const err/*: Object*/ = new Error(message)","        err.code = 80","        throw err","      } else {","        return Promise.all([])","      }","    }","","    let absoluteFilePaths = filePaths.map(filePath => {","      const absoluteFilepath = (!path.isAbsolute(filePath))","        ? path.join(process.cwd(), filePath)","        : path.normalize(filePath)","      return absoluteFilepath","    })","","    if (useCache) {","      absoluteFilePaths = absoluteFilePaths.filter(fileCache.hasFileChanged.bind(fileCache))","    }","","    const getStylelintResults = absoluteFilePaths.map(absoluteFilepath => {","      debug(`Processing ${absoluteFilepath}`)","      return stylelint._lintSource({","        filePath: absoluteFilepath,","      }).then(postcssResult => {","        if (postcssResult.stylelint.stylelintError && useCache) {","          debug(`${absoluteFilepath} contains linting errors and will not be cached.`)","          fileCache.removeEntry(absoluteFilepath)","        }","        return stylelint._createStylelintResult(postcssResult, absoluteFilepath)","      }).catch(handleError)","    })","","    return Promise.all(getStylelintResults)","  }).then(prepareReturnValue)","","  function prepareReturnValue(stylelintResults/*: Array<stylelint$result>*/)/*: stylelint$standaloneReturnValue*/ {","    const errored = stylelintResults.some(result => result.errored)","    const returnValue/*: stylelint$standaloneReturnValue*/ = {","      errored,","      output: formatterFunction(stylelintResults),","      results: stylelintResults,","    }","    if (reportNeedlessDisables) {","      returnValue.needlessDisables = needlessDisables(stylelintResults)","    }","    if (useCache) {","      fileCache.reconcile()","    }","    debug(`Linting complete in ${Date.now() - startTime}ms`)","    return returnValue","  }","}","","function handleError(error/*: Object*/) {","  if (error.name === \"CssSyntaxError\") {","    return convertCssSyntaxErrorToResult(error)","  } else {","    throw error","  }","}","","// By converting syntax errors to stylelint results,","// we can control their appearance in the formatted output","// and other tools like editor plugins can decide how to","// present them, as well","function convertCssSyntaxErrorToResult(error/*: CssSyntaxErrorT*/)/*: stylelint$result*/ {","  if (error.name !== \"CssSyntaxError\") {","    throw error","  }","","  return {","    source: error.file || \"<input css 1>\",","    deprecations: [],","    invalidOptionWarnings: [],","    errored: true,","    warnings: [{","      line: error.line,","      column: error.column,","      rule: error.name,","      severity: \"error\",","      text: error.reason + \" (\" + error.name + \")\",","    }],","  }","}",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"49":0,"51":0,"52":0,"53":0,"56":0,"57":0,"58":0,"59":0,"60":0,"62":0,"63":0,"65":0,"68":0,"80":0,"81":0,"84":0,"88":0,"90":0,"94":0,"95":0,"96":0,"98":0,"99":0,"102":0,"103":0,"104":0,"105":0,"108":0,"110":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"121":0,"122":0,"124":0,"125":0,"128":0,"129":0,"130":0,"132":0,"136":0,"137":0,"140":0,"143":0,"144":0,"147":0,"148":0,"149":0,"152":0,"153":0,"154":0,"156":0,"160":0,"163":1,"164":0,"165":0,"170":0,"171":0,"173":0,"174":0,"176":0,"177":0,"181":1,"182":0,"183":0,"185":0,"193":1,"194":0,"195":0,"198":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/needlessDisables.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/needlessDisables.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":17},"end":{"line":6,"column":103}}},"2":{"name":"isWarningInRange","line":74,"loc":{"start":{"line":74,"column":0},"end":{"line":84,"column":15}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"2":{"start":{"line":6,"column":0},"end":{"line":72,"column":1}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":19}},"4":{"start":{"line":9,"column":2},"end":{"line":69,"column":4}},"5":{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},"6":{"start":{"line":12,"column":6},"end":{"line":12,"column":12}},"7":{"start":{"line":15,"column":4},"end":{"line":15,"column":56}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":81}},"9":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"10":{"start":{"line":19,"column":6},"end":{"line":19,"column":12}},"11":{"start":{"line":22,"column":4},"end":{"line":42,"column":6}},"12":{"start":{"line":23,"column":6},"end":{"line":23,"column":43}},"13":{"start":{"line":25,"column":6},"end":{"line":25,"column":40}},"14":{"start":{"line":26,"column":6},"end":{"line":34,"column":7}},"15":{"start":{"line":28,"column":8},"end":{"line":33,"column":9}},"16":{"start":{"line":29,"column":10},"end":{"line":32,"column":11}},"17":{"start":{"line":30,"column":12},"end":{"line":30,"column":29}},"18":{"start":{"line":31,"column":12},"end":{"line":31,"column":18}},"19":{"start":{"line":36,"column":6},"end":{"line":41,"column":7}},"20":{"start":{"line":37,"column":8},"end":{"line":40,"column":9}},"21":{"start":{"line":38,"column":10},"end":{"line":38,"column":27}},"22":{"start":{"line":39,"column":10},"end":{"line":39,"column":16}},"23":{"start":{"line":44,"column":4},"end":{"line":64,"column":6}},"24":{"start":{"line":45,"column":6},"end":{"line":63,"column":8}},"25":{"start":{"line":47,"column":8},"end":{"line":49,"column":10}},"26":{"start":{"line":48,"column":10},"end":{"line":48,"column":83}},"27":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"28":{"start":{"line":54,"column":10},"end":{"line":54,"column":35}},"29":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"30":{"start":{"line":61,"column":10},"end":{"line":61,"column":54}},"31":{"start":{"line":66,"column":4},"end":{"line":66,"column":63}},"32":{"start":{"line":68,"column":4},"end":{"line":68,"column":23}},"33":{"start":{"line":71,"column":2},"end":{"line":71,"column":15}},"34":{"start":{"line":74,"column":0},"end":{"line":90,"column":1}},"35":{"start":{"line":85,"column":2},"end":{"line":86,"column":23}},"36":{"start":{"line":89,"column":2},"end":{"line":89,"column":159}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":4},"end":{"line":11,"column":4}},{"start":{"line":11,"column":4},"end":{"line":11,"column":4}}]},"2":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":6},"end":{"line":26,"column":6}},{"start":{"line":26,"column":6},"end":{"line":26,"column":6}}]},"4":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":10},"end":{"line":29,"column":10}},{"start":{"line":29,"column":10},"end":{"line":29,"column":10}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"6":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":17},"end":{"line":48,"column":50}},{"start":{"line":48,"column":54},"end":{"line":48,"column":83}}]},"7":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"8":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":23}},{"start":{"line":53,"column":27},"end":{"line":53,"column":47}}]},"9":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"10":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":22}},{"start":{"line":60,"column":26},"end":{"line":60,"column":45}}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":9},"end":{"line":89,"column":28}},{"start":{"line":89,"column":33},"end":{"line":89,"column":56}},{"start":{"line":89,"column":60},"end":{"line":89,"column":77}},{"start":{"line":89,"column":81},"end":{"line":89,"column":104}},{"start":{"line":89,"column":110},"end":{"line":89,"column":122}},{"start":{"line":89,"column":126},"end":{"line":89,"column":158}}]}},"code":["/* @flow */","\"use strict\"","","const _ = require(\"lodash\")","","module.exports = function (results/*: Array<stylelint$result>*/)/*: stylelint$needlessDisablesReport*/ {","  const report = []","","  results.forEach(result => {","    // File with `CssSyntaxError` have not `_postcssResult`","    if (!result._postcssResult) {","      return","    }","","    const unused = { source: result.source, ranges: [] }","    const rangeData = _.cloneDeep(result._postcssResult.stylelint.disabledRanges)","","    if (!rangeData) {","      return","    }","","    result.warnings.forEach(warning => {","      const rule/*: string*/ = warning.rule","","      const ruleRanges = rangeData[rule]","      if (ruleRanges) {","        // Back to front so we get the *last* range that applies to the warning","        for (const range of ruleRanges.reverse()) {","          if (isWarningInRange(warning, range)) {","            range.used = true","            return","          }","        }","      }","","      for (const range of rangeData.all.reverse()) {","        if (isWarningInRange(warning, range)) {","          range.used = true","          return","        }","      }","    })","","    Object.keys(rangeData).forEach(rule => {","      rangeData[rule].forEach(range => {","        // Is an equivalent range already marked as unused?","        const alreadyMarkedUnused = unused.ranges.find(unusedRange => {","          return unusedRange.start === range.start && unusedRange.end === range.end","        })","","        // If this range is unused and no equivalent is marked,","        // mark this range as unused","        if (!range.used && !alreadyMarkedUnused) {","          unused.ranges.push(range)","        }","","        // If this range is used but an equivalent has been marked as unused,","        // remove that equivalent. This can happen because of the duplication","        // of ranges in rule-specific range sets and the \"all\" range set","        if (range.used && alreadyMarkedUnused) {","          _.remove(unused.ranges, alreadyMarkedUnused)","        }","      })","    })","","    unused.ranges = _.sortBy(unused.ranges, [ \"start\", \"end\" ])","","    report.push(unused)","  })","","  return report","}","","function isWarningInRange(","  warning/*: {","    rule: string,","    line: number,","  }*/,","  range/*: {","    rules?: Array<string>,","    start: number,","    end?: number,","  }*/",")/*: boolean*/ {","  const rule = warning.rule,","    line = warning.line","","  // Need to check if range.end exist, because line number type cannot be compared to undefined","  return range.start <= line && (range.end !== undefined && range.end >= line || range.end === undefined) && (!range.rules || range.rules.indexOf(rule) !== -1)","}",""],"l":{"4":1,"6":1,"7":0,"9":0,"11":0,"12":0,"15":0,"16":0,"18":0,"19":0,"22":0,"23":0,"25":0,"26":0,"28":0,"29":0,"30":0,"31":0,"36":0,"37":0,"38":0,"39":0,"44":0,"45":0,"47":0,"48":0,"53":0,"54":0,"60":0,"61":0,"66":0,"68":0,"71":0,"74":1,"85":0,"89":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/FileCache.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/FileCache.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"FileCache","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":76}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":37},"end":{"line":19,"column":65}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":32},"end":{"line":36,"column":44}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":30},"end":{"line":40,"column":42}}},"5":{"name":"(anonymous_5)","line":44,"loc":{"start":{"line":44,"column":34},"end":{"line":44,"column":62}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":28}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":54}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":50}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":23}},"7":{"start":{"line":12,"column":0},"end":{"line":17,"column":1}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":102}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":48}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":52}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":51}},"12":{"start":{"line":19,"column":0},"end":{"line":34,"column":1}},"13":{"start":{"line":22,"column":2},"end":{"line":22,"column":72}},"14":{"start":{"line":23,"column":2},"end":{"line":23,"column":36}},"15":{"start":{"line":24,"column":2},"end":{"line":24,"column":80}},"16":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"17":{"start":{"line":26,"column":4},"end":{"line":26,"column":67}},"18":{"start":{"line":30,"column":2},"end":{"line":32,"column":3}},"19":{"start":{"line":31,"column":4},"end":{"line":31,"column":42}},"20":{"start":{"line":33,"column":2},"end":{"line":33,"column":16}},"21":{"start":{"line":36,"column":0},"end":{"line":38,"column":1}},"22":{"start":{"line":37,"column":2},"end":{"line":37,"column":29}},"23":{"start":{"line":40,"column":0},"end":{"line":42,"column":1}},"24":{"start":{"line":41,"column":2},"end":{"line":41,"column":27}},"25":{"start":{"line":44,"column":0},"end":{"line":46,"column":1}},"26":{"start":{"line":45,"column":2},"end":{"line":45,"column":47}},"27":{"start":{"line":48,"column":0},"end":{"line":48,"column":26}}},"branchMap":{"1":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":46},"end":{"line":13,"column":59}},{"start":{"line":13,"column":63},"end":{"line":13,"column":85}}]},"2":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":23},"end":{"line":16,"column":35}},{"start":{"line":16,"column":39},"end":{"line":16,"column":51}}]},"3":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":15},"end":{"line":23,"column":30}},{"start":{"line":23,"column":34},"end":{"line":23,"column":36}}]},"4":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":18},"end":{"line":24,"column":36}},{"start":{"line":24,"column":40},"end":{"line":24,"column":80}}]},"5":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"6":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]}},"code":["/* @flow */","\"use strict\"","","const fileEntryCache = require(\"file-entry-cache\")","const path = require(\"path\")","const debug = require(\"debug\")(\"stylelint:file-cache\")","const getCacheFile = require(\"./getCacheFile\")","","const DEFAULT_CACHE_LOCATION = \"./.stylelintcache\"","const DEFAULT_HASH = \"\"","","function FileCache(cacheLocation/*: ?string */, hashOfConfig/*: ?string */) {","  const cacheFile = path.resolve(getCacheFile(cacheLocation || DEFAULT_CACHE_LOCATION, process.cwd()))","  debug(`Cache file is created at ${cacheFile}`)","  this._fileCache = fileEntryCache.create(cacheFile)","  this._hashOfConfig = hashOfConfig || DEFAULT_HASH","}","","FileCache.prototype.hasFileChanged = function (absoluteFilepath) {","  // Get file descriptor compares current metadata against cached","  // one and stores the result to \"changed\" prop.w","  const descriptor = this._fileCache.getFileDescriptor(absoluteFilepath)","  const meta = descriptor.meta || {}","  const changed = descriptor.changed || meta.hashOfConfig !== this._hashOfConfig","  if (!changed) {","    debug(`Skip linting ${absoluteFilepath}. File hasn't changed.`)","  }","  // Mutate file descriptor object and store config hash to each file.","  // Running lint with different config should invalidate the cache.","  if (meta.hashOfConfig !== this._hashOfConfig) {","    meta.hashOfConfig = this._hashOfConfig","  }","  return changed","}","","FileCache.prototype.reconcile = function () {","  this._fileCache.reconcile()","}","","FileCache.prototype.destroy = function () {","  this._fileCache.destroy()","}","","FileCache.prototype.removeEntry = function (absoluteFilepath) {","  this._fileCache.removeEntry(absoluteFilepath)","}","","module.exports = FileCache",""],"l":{"4":1,"5":1,"6":1,"7":1,"9":1,"10":1,"12":1,"13":0,"14":0,"15":0,"16":0,"19":1,"22":0,"23":0,"24":0,"25":0,"26":0,"30":0,"31":0,"33":0,"36":1,"37":0,"40":1,"41":0,"44":1,"45":0,"48":1}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/getCacheFile.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/getCacheFile.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"getCacheFile","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":55}}},"2":{"name":"getCacheFileForDirectory","line":32,"loc":{"start":{"line":32,"column":2},"end":{"line":32,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":28}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":24}},"4":{"start":{"line":17,"column":0},"end":{"line":51,"column":1}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":39}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":56}},"7":{"start":{"line":26,"column":2},"end":{"line":26,"column":74}},"8":{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},"9":{"start":{"line":33,"column":4},"end":{"line":33,"column":71}},"10":{"start":{"line":36,"column":2},"end":{"line":36,"column":15}},"11":{"start":{"line":38,"column":2},"end":{"line":42,"column":3}},"12":{"start":{"line":39,"column":4},"end":{"line":39,"column":47}},"13":{"start":{"line":41,"column":4},"end":{"line":41,"column":20}},"14":{"start":{"line":44,"column":2},"end":{"line":47,"column":3}},"15":{"start":{"line":46,"column":4},"end":{"line":46,"column":37}},"16":{"start":{"line":50,"column":2},"end":{"line":50,"column":26}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":2}},{"start":{"line":44,"column":2},"end":{"line":44,"column":2}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":25}},{"start":{"line":44,"column":30},"end":{"line":44,"column":39}},{"start":{"line":44,"column":43},"end":{"line":44,"column":66}}]}},"code":["\"use strict\"","","const hash = require(\"./hash\")","const path = require(\"path\")","const fs = require(\"fs\")","/**"," * Return the cacheFile to be used by stylelint, based on whether the provided parameter is"," * a directory or looks like a directory (ends in `path.sep`), in which case the file"," * name will be `cacheFile/.cache_hashOfCWD`."," *"," * If cacheFile points to a file or looks like a file, then it will just use that file."," *"," * @param {string} cacheFile - The name of file to be used to store the cache"," * @param {string} cwd - Current working directory. Used for tests"," * @returns {string} Resolved path to the cache file"," */","module.exports = function getCacheFile(cacheFile, cwd) {","  /*","   * Make sure path separators are normalized for environment/os.","   * Also, keep trailing path separator if present.","   */","  cacheFile = path.normalize(cacheFile)","","  const resolvedCacheFile = path.resolve(cwd, cacheFile)","  // If the last character passed is a path separator, we assume is a directory.","  const looksLikeADirectory = cacheFile[cacheFile.length - 1] === path.sep","","  /**","   * Return the default cache file name when provided parameter is a directory.","   * @returns {string} - Resolved path to the cacheFile","   */","  function getCacheFileForDirectory() {","    return path.join(resolvedCacheFile, `.stylelintcache_${hash(cwd)}`)","  }","","  let fileStats","","  try {","    fileStats = fs.lstatSync(resolvedCacheFile)","  } catch (ex) {","    fileStats = null","  }","","  if (looksLikeADirectory || (fileStats && fileStats.isDirectory())) {","    // Return path to provided directory with generated file name.","    return getCacheFileForDirectory()","  }","","  // Return normalized path to cache file.","  return resolvedCacheFile","}",""],"l":{"3":1,"4":1,"5":1,"17":1,"22":0,"24":0,"26":0,"32":1,"33":0,"36":0,"38":0,"39":0,"41":0,"44":0,"46":0,"50":0}},"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hash.js":{"path":"/home/travis/build/npmtest/node-npmtest-stylelint/stylelint/lib/utils/hash.js","s":{"1":1,"2":1,"3":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"hash","line":9,"loc":{"start":{"line":9,"column":17},"end":{"line":9,"column":36}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":37}},"2":{"start":{"line":9,"column":0},"end":{"line":11,"column":1}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":42}}},"branchMap":{},"code":["\"use strict\"","const murmur = require(\"imurmurhash\")","","/**"," * hash the given string"," * @param  {string} str the string to hash"," * @returns {string}    the hash"," */","module.exports = function hash(str) {","  return murmur(str).result().toString(36)","}",""],"l":{"2":1,"9":1,"10":0}}}